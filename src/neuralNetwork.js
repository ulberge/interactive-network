import * as tf from '@tensorflow/tfjs';

/* global nj */


export default function loadLayer1() {
  // Gabor filters (vert, diag, hor, diag)
  let weights1 = [[[[-1.4,-1.45,-1.45,-1.25,-1.35,-2.15,-1.45,-0.15,-1.45,-2.15,-1.35,-1.25,-1.45,-1.45,-1.4],[-1.4,-1.45,-1.45,-1.2,-1.35,-2.6,-1.5,0.55,-1.5,-2.6,-1.35,-1.2,-1.45,-1.45,-1.4],[-1.4,-1.45,-1.45,-1.05,-1.3,-3.15,-1.5,1.5,-1.5,-3.15,-1.3,-1.1,-1.45,-1.45,-1.4],[-1.4,-1.45,-1.45,-0.95,-1.25,-3.75,-1.5,2.55,-1.55,-3.75,-1.25,-0.95,-1.45,-1.45,-1.4],[-1.4,-1.45,-1.45,-0.85,-1.2,-4.4,-1.55,3.6,-1.55,-4.4,-1.2,-0.85,-1.45,-1.45,-1.4],[-1.4,-1.45,-1.45,-0.7,-1.15,-4.95,-1.6,4.55,-1.6,-4.95,-1.15,-0.7,-1.45,-1.45,-1.4],[-1.4,-1.5,-1.5,-0.65,-1.15,-5.3,-1.6,5.1,-1.6,-5.3,-1.15,-0.65,-1.5,-1.5,-1.4],[-1.4,-1.5,-1.5,-0.65,-1.15,-5.4,-1.6,5.3,-1.6,-5.4,-1.15,-0.65,-1.5,-1.5,-1.4],[-1.4,-1.5,-1.45,-0.65,-1.15,-5.25,-1.6,4.95,-1.6,-5.25,-1.15,-0.65,-1.45,-1.5,-1.4],[-1.4,-1.45,-1.45,-0.75,-1.2,-4.8,-1.55,4.25,-1.6,-4.8,-1.2,-0.75,-1.45,-1.45,-1.4],[-1.4,-1.45,-1.45,-0.85,-1.25,-4.2,-1.55,3.3,-1.55,-4.2,-1.25,-0.9,-1.45,-1.45,-1.4],[-1.4,-1.45,-1.45,-1.,-1.3,-3.6,-1.5,2.2,-1.5,-3.6,-1.3,-1.,-1.45,-1.45,-1.4],[-1.4,-1.45,-1.45,-1.1,-1.3,-2.95,-1.5,1.2,-1.5,-2.95,-1.3,-1.1,-1.45,-1.45,-1.4],[-1.4,-1.45,-1.45,-1.2,-1.35,-2.45,-1.5,0.3,-1.5,-2.45,-1.35,-1.2,-1.45,-1.45,-1.4],[-1.4,-1.4,-1.45,-1.3,-1.35,-2.05,-1.45,-0.35,-1.45,-2.05,-1.35,-1.3,-1.45,-1.4,-1.4]]],[[[-1.4,-1.4,-1.4,-1.4,-1.4,-1.45,-1.5,-1.4,-1.2,-1.2,-1.6,-1.9,-1.55,-1.2,-1.2],[-1.4,-1.4,-1.4,-1.4,-1.45,-1.5,-1.4,-1.05,-1.,-1.75,-2.4,-1.75,-0.9,-0.95,-1.4],[-1.4,-1.4,-1.4,-1.45,-1.5,-1.4,-0.9,-0.8,-2.,-3.15,-2.05,-0.35,-0.35,-1.35,-1.75],[-1.4,-1.4,-1.45,-1.5,-1.4,-0.8,-0.6,-2.25,-4.,-2.55,0.5,0.6,-1.35,-2.1,-1.7],[-1.4,-1.45,-1.5,-1.4,-0.75,-0.45,-2.45,-4.85,-3.05,1.5,1.9,-1.3,-2.75,-2.,-1.3],[-1.45,-1.5,-1.4,-0.8,-0.45,-2.55,-5.45,-3.3,2.5,3.35,-1.3,-3.6,-2.4,-1.25,-1.2],[-1.5,-1.4,-0.9,-0.6,-2.45,-5.45,-3.45,3.05,4.4,-1.15,-4.55,-2.95,-1.15,-1.05,-1.35],[-1.4,-1.05,-0.8,-2.25,-4.85,-3.3,3.05,4.8,-1.1,-5.25,-3.45,-1.,-0.8,-1.3,-1.5],[-1.2,-1.,-2.,-4.,-3.05,2.5,4.4,-1.1,-5.55,-3.8,-0.9,-0.65,-1.25,-1.5,-1.45],[-1.2,-1.75,-3.15,-2.55,1.5,3.35,-1.15,-5.25,-3.8,-0.9,-0.5,-1.25,-1.5,-1.45,-1.4],[-1.6,-2.4,-2.05,0.5,1.9,-1.3,-4.55,-3.45,-0.9,-0.5,-1.2,-1.5,-1.5,-1.4,-1.4],[-1.9,-1.75,-0.35,0.6,-1.3,-3.6,-2.95,-1.,-0.65,-1.25,-1.5,-1.5,-1.4,-1.4,-1.4],[-1.55,-0.9,-0.35,-1.35,-2.75,-2.4,-1.15,-0.8,-1.25,-1.5,-1.5,-1.4,-1.4,-1.4,-1.4],[-1.2,-0.95,-1.35,-2.1,-2.,-1.25,-1.05,-1.3,-1.5,-1.45,-1.4,-1.4,-1.4,-1.4,-1.4],[-1.2,-1.4,-1.75,-1.7,-1.3,-1.2,-1.35,-1.5,-1.45,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4]]],[[[-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4],[-1.45,-1.45,-1.45,-1.45,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.45,-1.45,-1.45,-1.45],[-1.45,-1.45,-1.45,-1.45,-1.45,-1.45,-1.45,-1.45,-1.45,-1.45,-1.45,-1.45,-1.45,-1.45,-1.45],[-1.25,-1.15,-1.05,-0.9,-0.8,-0.65,-0.6,-0.55,-0.6,-0.65,-0.8,-0.9,-1.05,-1.15,-1.25],[-1.45,-1.45,-1.45,-1.45,-1.45,-1.45,-1.5,-1.5,-1.5,-1.45,-1.45,-1.45,-1.45,-1.45,-1.45],[-2.2,-2.65,-3.2,-3.85,-4.5,-5.1,-5.5,-5.6,-5.5,-5.1,-4.5,-3.85,-3.2,-2.65,-2.2],[-1.2,-1.1,-0.95,-0.75,-0.55,-0.4,-0.3,-0.25,-0.3,-0.4,-0.55,-0.75,-0.95,-1.1,-1.2],[-0.2,0.45,1.3,2.3,3.3,4.2,4.8,5.05,4.8,4.2,3.3,2.3,1.3,0.45,-0.2],[-1.75,-1.95,-2.15,-2.4,-2.7,-2.95,-3.1,-3.15,-3.1,-2.95,-2.7,-2.4,-2.15,-1.95,-1.75],[-2.05,-2.4,-2.8,-3.3,-3.85,-4.3,-4.6,-4.7,-4.6,-4.3,-3.85,-3.3,-2.8,-2.4,-2.05],[-1.25,-1.2,-1.1,-0.95,-0.85,-0.7,-0.65,-0.65,-0.65,-0.7,-0.85,-0.95,-1.1,-1.2,-1.25],[-1.3,-1.25,-1.2,-1.1,-1.05,-0.95,-0.9,-0.9,-0.9,-0.95,-1.05,-1.1,-1.2,-1.25,-1.3],[-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5],[-1.4,-1.4,-1.45,-1.45,-1.45,-1.45,-1.45,-1.45,-1.45,-1.45,-1.45,-1.45,-1.45,-1.4,-1.4],[-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.4]]],[[[-1.2,-1.25,-1.7,-1.85,-1.5,-1.15,-1.25,-1.45,-1.5,-1.45,-1.4,-1.4,-1.4,-1.4,-1.4],[-1.3,-0.8,-1.05,-2.,-2.35,-1.6,-0.95,-1.1,-1.45,-1.5,-1.45,-1.4,-1.4,-1.4,-1.4],[-1.7,-1.1,-0.15,-0.65,-2.45,-3.05,-1.75,-0.75,-1.,-1.4,-1.5,-1.45,-1.4,-1.4,-1.4],[-1.85,-2.05,-0.85,0.85,0.,-3.1,-3.9,-1.85,-0.55,-0.85,-1.45,-1.5,-1.45,-1.4,-1.4],[-1.45,-2.3,-2.65,-0.5,2.35,0.75,-3.75,-4.7,-2.,-0.4,-0.85,-1.45,-1.5,-1.45,-1.4],[-1.15,-1.45,-2.85,-3.5,-0.25,3.8,1.6,-4.1,-5.2,-2.15,-0.4,-0.85,-1.4,-1.5,-1.45],[-1.25,-0.95,-1.45,-3.55,-4.35,0.1,4.85,2.1,-4.15,-5.25,-2.1,-0.55,-0.95,-1.4,-1.5],[-1.45,-1.2,-0.7,-1.4,-4.1,-5.,0.15,5.2,2.2,-3.9,-4.7,-2.05,-0.8,-1.1,-1.4],[-1.5,-1.45,-1.1,-0.5,-1.3,-4.45,-5.25,0.,4.65,1.85,-3.4,-3.9,-1.9,-1.,-1.2],[-1.4,-1.5,-1.45,-1.05,-0.4,-1.3,-4.35,-5.,-0.35,3.5,1.05,-2.75,-3.05,-1.7,-1.2],[-1.4,-1.4,-1.5,-1.5,-1.1,-0.4,-1.25,-3.85,-4.35,-0.75,2.,0.3,-2.15,-2.35,-1.6],[-1.4,-1.4,-1.4,-1.5,-1.5,-1.1,-0.55,-1.25,-3.2,-3.5,-1.,0.6,-0.45,-1.8,-1.9],[-1.4,-1.4,-1.4,-1.4,-1.5,-1.5,-1.2,-0.8,-1.3,-2.55,-2.65,-1.2,-0.35,-0.9,-1.6],[-1.4,-1.4,-1.4,-1.4,-1.4,-1.5,-1.45,-1.25,-1.,-1.35,-2.05,-2.05,-1.3,-0.95,-1.2],[-1.4,-1.4,-1.4,-1.4,-1.4,-1.4,-1.45,-1.5,-1.3,-1.2,-1.35,-1.7,-1.7,-1.4,-1.2]]]];
  const biases1 = Array(weights1.length).fill(0);

  const weightTs = [];
  let w = weights1;
  const b = biases1;
  w = nj.array(w).transpose(2, 3, 1, 0).tolist();
  weightTs.push([tf.tensor4d(w), tf.tensor1d(b)]);

  const layer1 = tf.layers.conv2d({
    filters: 2,
    kernelSize: 15,
    strides: 1,
    padding: 'same',
    weights: weightTs[0],
    activation: 'relu',
    name: 'conv1'
  });

  return layer1;
}


// function normalize_array(arr) {
//   normalize = function(v, max, min) {
//     return (v - min) / (max - min);
//   }

//   const max = Math.max.apply(null, arr);
//   const min = Math.min.apply(null, arr);

//   if ((max - min) === 0) {
//     return arr.map(v => v > 0 ? 1 : 0);
//   }

//   const norms = arr.map(v => normalize(v, max, min));
//   return norms;
// }

// function getFilterSketch(arr, layer_i) {
//   const filterSizes = [3, 3, 3];
//   const scale = 10;

//   return (p) => {
//     const sketchSize = filterSizes[layer_i];

//     p.setup = function setup() {
//       p.pixelDensity(1);
//       p.createCanvas(sketchSize * scale, sketchSize * scale);
//       p.background(255);
//       p.noLoop();
//       p.noStroke();
//     };

//     p.draw = function draw() {
//       // normalize array in 255
//       const arr_flat = arr.flat();
//       const arr_flat_norm = normalize_array(arr_flat);

//       let i = 0;
//       for (let y = 0; y < sketchSize; y += 1) {
//         for (let x = 0; x < sketchSize; x += 1) {
//           p.fill(arr_flat_norm[i] * 255);
//           p.rect(x * scale, y * scale, scale, scale);
//           i += 1;
//         }
//       }
//     }
//   };
// }

// function drawFilters() {
//   $('#layer_L1 .filters').append('<td><div class="filter0"></div></td>');
//   new p5(getFilterSketch(weights1[0][0], 0), $('#layer_L1 .filter0')[0]);
//   $('#layer_L1 .filters').append('<td><div class="filter1"></div></td>');
//   new p5(getFilterSketch(weights1[1][0], 0), $('#layer_L1 .filter1')[0]);

//   $('#layer_L2 .filters').append('<td><div class="filter0"></div></td>');
//   new p5(getFilterSketch(weights2[0][0], 1), $('#layer_L2 .filter0')[0]);
//   new p5(getFilterSketch(weights2[0][1], 1), $('#layer_L2 .filter0')[0]);

//   $('#layer_L2 .filters').append('<td><div class="filter1"></div></td>');
//   new p5(getFilterSketch(weights2[1][0], 1), $('#layer_L2 .filter1')[0]);
//   new p5(getFilterSketch(weights2[1][1], 1), $('#layer_L2 .filter1')[0]);

//   $('#layer_L2 .filters').append('<td><div class="filter2"></div></td>');
//   new p5(getFilterSketch(weights2[2][0], 1), $('#layer_L2 .filter2')[0]);
//   new p5(getFilterSketch(weights2[2][1], 1), $('#layer_L2 .filter2')[0]);

//   $('#layer_L2 .filters').append('<td><div class="filter3"></div></td>');
//   new p5(getFilterSketch(weights2[3][0], 1), $('#layer_L2 .filter3')[0]);
//   new p5(getFilterSketch(weights2[3][1], 1), $('#layer_L2 .filter3')[0]);

//   $('#layer_L3 .filters').append('<td><div class="filter0"></div></td>');
//   new p5(getFilterSketch(weights3[0][0], 2), $('#layer_L3 .filter0')[0]);
//   new p5(getFilterSketch(weights3[0][1], 2), $('#layer_L3 .filter0')[0]);
//   new p5(getFilterSketch(weights3[0][2], 2), $('#layer_L3 .filter0')[0]);
//   new p5(getFilterSketch(weights3[0][3], 2), $('#layer_L3 .filter0')[0]);
// }

// function evalLayers(imgArr, modelLayers) {
//   let imgArr_f = nj.array([imgArr]);
//   imgArr_f = imgArr_f.reshape([1, 16, 16, 1]);
//   imgArr_f = imgArr_f.tolist();

//   let curr = tf.tensor4d(imgArr_f);
//   let layerOutputs = [];
//   modelLayers.forEach((layer, i) => {
//     // console.log('L' + (i + 1) + ' input', curr.shape);
//     const result = layer.apply(curr);
//     layerOutputs.push(result.arraySync());
//     curr = result;
//   });
//   // console.log('output', curr.shape);

//   // format into neurons
//   layerOutputs = layerOutputs.map(o => {
//     o = nj.array(o[0]);
//     o = o.transpose(2, 0, 1);
//     return o.tolist();
//   });

//   return layerOutputs;
// }


