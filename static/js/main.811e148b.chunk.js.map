{"version":3,"sources":["serviceWorker.js","components/UI/Array2DView.js","js/sketches/array2DViewSketch.js","components/UI/Array2DViewList.js","js/kernel.js","components/KernelTuner/KernelMakerControls.js","components/KernelTuner/KernelMaker.js","components/UI/DebounceSlider.js","js/conv/convArray.js","js/conv/convLayer.js","js/conv/maxPoolLayer.js","js/conv/network.js","js/smartCanvas.js","components/KernelTuner/KernelInspectorDrawingInput.js","js/sketches/drawingInputSketch.js","js/sketches/colorCodedMapSketch.js","components/KernelTuner/KernelInspectorColorCodedMap.js","js/charts/activationChart.js","components/KernelTuner/KernelInspectorActivationChart.js","components/UI/Array2DViewOverlayList.js","components/KernelTuner/KernelInspectorViewOutputAtPoint.js","components/KernelTuner/KernelInspectorViewOutput.js","components/KernelTuner/KernelInspector.js","components/KernelTuner/KernelTunerAbout.js","components/KernelTuner/KernelTuner.js","components/Page/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Array2DView","props","imgArr","scale","imgRef","useRef","pRef","useEffect","current","p5","p","_draw","_setupDone","h","length","w","height","width","resizeCanvas","canvas","style","clear","flatArr","flat","max","Math","min","map","row","v","loadPixels","y","x","set","color","updatePixels","setTimeout","setup","pixelDensity","createCanvas","stroke","noLoop","noSmooth","ref","Array2DViewList","imgArrs","cols","Grid","container","spacing","i","item","key","breakAfter","kernelTypes","getCosWaveFn","theta","lambda","period","a","PI","cos","sin","getGaussianFn","sigma","exp","getLine","windowSize","wave","gauss","kernel","nj","zeros","assign","tolist","halfWindowSize","floor","yCentered","xCentered","z","getLineEnd","getLs","angle","numKernels","rotationDelta","kernels","b","kernelLineEnd0","kernelLineEnd1","c","push","getDot","size","gaussNeg","gaussPos","scaleKernel","negativeScaleFactor","positiveSum","positiveMax","negativeMin","forEach","positiveScaleFactor","getKernels","numComponents","types","includes","getLines","getLineEnds","kernelLine","kernelLineEnd","zMax","zMin","getTs","kernelLine0","kernelLine1","getXs","kernelLineEndBase","kernelLineEndBranch0","kernelLineEndBranch1","getYs","scaledKernels","console","log","join","KernelMakerControls","memo","ToggleButtonGroup","value","onChange","event","aria-label","borderRadius","margin","className","slice","type","ToggleButton","textTransform","padding","textAlign","Slider","defaultValue","track","aria-labelledby","marks","label","step","valueLabelDisplay","KernelMaker","defaultKernelSettings","updateKernelSettings","useState","kernelSettings","setKernelSettings","timerRef","updateKernelSettingsCallback","useCallback","field","newKernelSettings","clearTimeout","useMemo","ExpansionPanel","defaultExpanded","square","boxShadow","border","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","justify","marginRight","DebounceSlider","setValue","debounce","timer","dtype","ConvArray","channels","shape","kernelSize","stride","outerShape","this","_shape","_stride","_pad","_outerBounds","ceil","_channels","_arr","_ids","_max","_dirtyBounds","arr","channel","bounds","_slice","_updateDirtyBounds","outputTensor","backend","_backend","tf","ct1","minX","minY","maxX","maxY","times","ct0","Date","now","idsT","argMax","dsync","dataSync","idsUpdate","reshape","idsSlice","flatOutputTensor","flatIdsTensor","layerOffsets","withinLayerOffsets","idLookups","maxT","gather","maxUpdate","maxSlice","reduce","Number","isInteger","sx","sy","ex","ey","dsx","dsy","dex","dey","table","dirtyBounds","limit","minX0","minY0","maxX0","maxY0","minX1","minY1","maxX1","maxY1","limitBounds","dilateBounds","poolSize","selection","ConvLayer","input","output","filters","_kernelSize","_rawFilters","filter","_tflayer","numOutputs","weights","transpose","biases","weightsTensor","conv2d","strides","activation","dataFormat","getConvLayer","dirty","d","data","apply","updateArr","updateBounds","result","useWebGL","sizeDisplay","runWith","updateShape","update","calcStats","clean","MaxPoolLayer","maxPooling2d","Network","inputShape","layerInfos","arrs","layerInfo","conv","pool","layers","entries","layer","t00","t0","run","t1","t01","acts","ids","safePt","pt","Vector","SmartCanvas","network","_backup","_listeners","forceFullUpdate","init","start","end","makeBackup","_getLineBounds","img","get","line","image","g","pixels","_notifyListeners","fn","indexOf","splice","KernelInspectorDrawingInput","onUpdate","rotation","setRotation","smartCanvasRef","strokeWeight","draw","mouseIsPressed","pmouseX","pmouseY","mouseX","mouseY","_rotationCache","addSegment","angleMode","DEGREES","translate","rotate","pop","getSketch","k","addListener","reset","direction","position","marginTop","Button","marginLeft","variant","onClick","maxWidth","minWidth","colors","colorMap","KernelInspectorColorCodedMap","onSelect","innerHTML","needsRefresh","drawWindow","setData","_scale","maxMax","setKernels","_kernelCache","icon","_getIcon","_colorCodedGraphics","createGraphics","zoomScale","_isMouseInBounds","_drawBackground","x0","y0","x1","y1","slice_ids","array","slice_max","fill","noStroke","rect","_drawIconArray","noFill","pad","mouseClicked","_onSelect","_pt","_getColor","setAlpha","intensity","rectScale","tint","random","renderChart","el","act","name","offsetWidth","d3","domain","range","bandwidth","svg","append","attr","bars","selectAll","enter","exit","remove","flatKernelData","abs","rIndex","colIndex","kIndex","col","weightPixels","pixelSize","renderKernelsOnBars","call","tickSize","node","KernelInspectorActivationChart","chartRef","Array2DViewOverlayList","imgArrsOverlay","overlayOpacity","top","opacity","KernelInspectorViewOutputAtPoint","count","actsAtPt","imgArrAtPt","getImgArrAtPt","s","sort","selectTopIndices","ptDisplay","Array","KernelInspectorViewOutput","defaultPt","setPt","getOutput","KernelInspector","imgSectionStyle","HtmlTooltip","withStyles","theme","tooltip","backgroundColor","fontSize","Tooltip","citations","KernelTunerAboutText","cite","fns","citation","title","Fragment","interactive","CitationGenerator","src","alt","marginBottom","href","KernelTunerAbout","TransitionProps","mountOnEnter","KernelTuner","Container","borderTop","createMuiTheme","palette","primary","grey","storageKey","storedSettings","JSON","parse","localStorage","getItem","initialKernelSettings","isNaN","isArray","kernelType","areValidKernelSettings","ReactDOM","render","setItem","stringify","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.811e148b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport p5 from 'p5';\nimport { getSketch } from '../../js/sketches/array2DViewSketch';\n\n// Renders a 2D array as a p5 sketch\nconst Array2DView = props => {\n  const { imgArr, scale } = props;\n  const imgRef = useRef(null);\n  const pRef = useRef(null);\n\n  useEffect(() => {\n    // run once\n    if (!pRef.current) {\n      pRef.current = new p5(getSketch(), imgRef.current);\n    }\n\n    // run every time\n    if (pRef.current) {\n      pRef.current._draw(imgArr, scale);\n    }\n  }, [ imgArr, scale ]);\n\n  return (\n    <div ref={imgRef}></div>\n  );\n};\n\nArray2DView.propTypes = {\n  imgArr: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  scale: PropTypes.number\n};\n\nexport default Array2DView;\n","/**\n * Returns a p5 sketch that can draw a 2D array\n */\nexport function getSketch() {\n  return (p) => {\n    /**\n     * Draw a 2D array at the given scale\n     * @param {Number[][]} imgArr - 2D array to initialize canvas (values between [-1, 1])\n     * @param {Number} scale - Scale at which to render (uses css, hopefully pixelated, but depends on browser)\n     */\n    p._draw = (imgArr, scale=1) => {\n      if (!imgArr) {\n        return;\n      }\n\n      // protect against rendering before sketch ready\n      if (!p._setupDone) {\n        setTimeout(() => p._draw(imgArr, scale), 10);\n        return;\n      }\n\n      const h = imgArr.length;\n      const w = imgArr[0].length;\n      if (h !== p.height || w !== p.width) {\n        p.resizeCanvas(w, h);\n      }\n\n      p.canvas.style.height = (h * scale) + 'px';\n      p.canvas.style.width = (w * scale) + 'px';\n\n      p.clear();\n\n      // normalize to max value (positive or negative)\n      const flatArr = imgArr.flat();\n      let max = Math.max(...flatArr);\n      max = max > 0 ? max : -Math.min(...flatArr);\n      imgArr = imgArr.map(row => row.map(v => v / max));\n\n      // render pixels using image\n      p.loadPixels();\n      for (let y = 0; y < imgArr.length; y += 1) {\n        for (let x = 0; x < imgArr[0].length; x += 1) {\n          const v = imgArr[y][x] * 255;\n          if (v >= 0) {\n            p.set(x, y, p.color(0, 0, 0, v));\n          } else if (v < 0) {\n            p.set(x, y, p.color(214, 30, 30, -v * 0.75));\n          }\n        }\n      }\n      p.updatePixels();\n    }\n\n    p.setup = () => {\n      p.pixelDensity(1);\n      p.createCanvas(1, 1);\n      p.stroke(255);\n      p.noLoop();\n      p.noSmooth();\n    };\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Array2DView from './Array2DView';\n\n// Renders a series of 2D arrays as p5 sketches\nconst Array2DViewList = props => {\n  const { imgArrs, cols, scale } = props;\n  return (\n    <Grid container spacing={1} style={props.style}>\n      { imgArrs.map((imgArr, i) => (\n        <Grid item key={i} style={ cols && ((i % cols) === (cols - 1)) ? { breakAfter: 'always' } : {}} >\n          <Array2DView imgArr={imgArr} scale={scale} />\n        </Grid>\n      )) }\n    </Grid>\n  );\n}\n\nArray2DViewList.propTypes = {\n  imgArrs: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))).isRequired,\n  scale: PropTypes.number.isRequired,\n  cols: PropTypes.number,\n};\n\nexport default Array2DViewList;\n","import nj from 'numjs';\n\n// export const kernelTypes = ['┃', '╻', '┗', '┳', '╋', 'Y', '>', '_/', ')', '⭑'];\nexport const kernelTypes = ['I', 'i', 'L', 'T', 'X', 'Y', '>', '_/', ')', '⭑'];\n\n// Returns a f(x, y) for 2D cosine wave at angle theta of width inverse lambda from -PI to PI, scaled by pos and neg\nfunction getCosWaveFn(theta, lambda, period=1) {\n  return (x, y) => {\n    const a = (2 * Math.PI / lambda) * ((x * Math.cos(theta)) + (y * Math.sin(theta)));\n    if (a > (Math.PI * period) || a < (-Math.PI * period)) {\n      return null;\n    }\n\n    return Math.cos(a);\n  }\n}\n\n// Returns f(x, y) for a 2D Gaussian with spread sigma\nfunction getGaussianFn(sigma) {\n  return (x, y) => {\n    return Math.exp(-.5 * ((x ** 2 / (sigma ** 2)) + (y ** 2 / (sigma ** 2))));\n  }\n}\n\nfunction getLine(windowSize, theta, lambda, sigma) {\n  const wave = getCosWaveFn(theta, lambda);\n  const gauss = getGaussianFn(sigma);\n  const kernel = nj.zeros([windowSize, windowSize]).assign(-1, false).tolist();\n  const halfWindowSize = Math.floor(windowSize / 2);\n\n  for (let y = 0; y < windowSize; y += 1) {\n    const yCentered = y - halfWindowSize;\n    for (let x = 0; x < windowSize; x += 1) {\n      const xCentered = x - halfWindowSize;\n      const z = wave(xCentered, yCentered);\n      if (z !== null) {\n        kernel[y][x] = z;\n      }\n\n      kernel[y][x] = kernel[y][x] * gauss(xCentered, yCentered);\n    }\n  }\n\n  return kernel;\n}\n\nfunction getLines(windowSize, numKernels, lambda, sigma) {\n  const rotationDelta = Math.PI / numKernels; // divide 180 degrees in number\n\n  const kernels = [];\n  for (let i = 0; i < numKernels; i += 1) {\n    const theta = i * rotationDelta; // angle of this cos wave\n    const kernel = getLine(windowSize, theta, lambda, sigma);\n\n    kernels.push(kernel);\n  }\n\n  return kernels;\n}\n\nfunction getLineEnd(windowSize, theta, lambda, sigma) {\n  const wave = getCosWaveFn(theta, lambda);\n  const gauss = getGaussianFn(sigma);\n  const kernel = nj.zeros([windowSize, windowSize]).assign(-1, false).tolist();\n  const halfWindowSize = Math.floor(windowSize / 2);\n\n  for (let y = 0; y < windowSize; y += 1) {\n    const yCentered = y - halfWindowSize;\n    for (let x = 0; x < windowSize; x += 1) {\n      const xCentered = x - halfWindowSize;\n      let z = null;\n      let a = (Math.sin(theta) * xCentered) - (Math.cos(theta) * yCentered); // pos in rotation space\n      if (a < 0.00001) { // rounding error\n        z = wave(xCentered, yCentered);\n      } else if (a < 1.00001) {\n        // special case for after center point\n        z = wave(xCentered, yCentered);\n        z = z > 0 ? (z / 2) : z;\n      }\n      if (z !== null) {\n        kernel[y][x] = z;\n      }\n\n      kernel[y][x] = kernel[y][x] * gauss(xCentered, yCentered);\n    }\n  }\n\n  return kernel;\n}\n\nfunction getLineEnds(windowSize, numKernels, lambda, sigma) {\n  const rotationDelta = 2 * Math.PI / numKernels; // divide 180 degrees in number\n  const kernels = [];\n  for (let i = 0; i < numKernels; i += 1) {\n    const theta = i * rotationDelta; // angle of this cos wave\n    const kernel = getLineEnd(windowSize, theta, lambda, sigma);\n    kernels.push(kernel);\n  }\n\n  return kernels;\n}\n\nfunction getLs(windowSize, angle, numKernels, lambda, sigma) {\n  const rotationDelta = 2 * Math.PI / numKernels; // divide 180 degrees in number\n  const halfWindowSize = Math.floor(windowSize / 2);\n  const kernels = [];\n  for (let i = 0; i < numKernels; i += 1) {\n    const theta = i * rotationDelta; // angle of this cos wave\n    const a = Math.sin(theta + (Math.PI / 2) - (angle / 2));\n    const b = Math.cos(theta + (Math.PI / 2) - (angle / 2));\n\n    // Create two line ends at 90 degrees to each other and merge at diagonal between them\n    const kernelLineEnd0 = getLineEnd(windowSize, theta, lambda, sigma);\n    const kernelLineEnd1 = getLineEnd(windowSize, theta - angle, lambda, sigma);\n    const kernel = nj.zeros([windowSize, windowSize]).tolist();\n\n    for (let y = 0; y < windowSize; y += 1) {\n      const yCentered = y - halfWindowSize;\n      for (let x = 0; x < windowSize; x += 1) {\n        const xCentered = x - halfWindowSize;\n        const c = (a * xCentered) - (b * yCentered); // pos in rotation space\n        if (c < 0.00001) { // rounding error at 0\n          kernel[y][x] = kernelLineEnd0[y][x];\n        } else {\n          kernel[y][x] = kernelLineEnd1[y][x];\n        }\n      }\n    }\n\n    kernels.push(kernel);\n  }\n\n  return kernels;\n}\n\nfunction getTs(windowSize, angle, numKernels, lambda, sigma) {\n  const rotationDelta = 2 * Math.PI / numKernels; // divide 180 degrees in number\n  const halfWindowSize = Math.floor(windowSize / 2);\n  const kernels = [];\n  for (let i = 0; i < numKernels; i += 1) {\n    const theta = i * rotationDelta; // angle of this cos wave\n    const a = Math.sin(theta + (Math.PI / 2));\n    const b = Math.cos(theta + (Math.PI / 2));\n\n    // Create two line ends at 90 degrees to each other and merge at diagonal between them\n    const kernelLine = getLine(windowSize, theta, lambda, sigma);\n    const kernelLineEnd = getLineEnd(windowSize, theta - angle, lambda, sigma);\n    const kernel = nj.zeros([windowSize, windowSize]).tolist();\n    for (let y = 0; y < windowSize; y += 1) {\n      const yCentered = y - halfWindowSize;\n      for (let x = 0; x < windowSize; x += 1) {\n        const xCentered = x - halfWindowSize;\n        const c = (a * xCentered) - (b * yCentered); // pos in rotation space\n        if (c < 0.00001) { // rounding error at 0\n          // use line\n          kernel[y][x] = kernelLine[y][x];\n        } else {\n          // use most extreme towards T line\n          const zMax = Math.max(kernelLine[y][x], kernelLineEnd[y][x]);\n          const zMin = Math.min(kernelLine[y][x], kernelLineEnd[y][x]);\n          kernel[y][x] = zMax > 0 ? zMax : zMin;\n        }\n      }\n    }\n\n    kernels.push(kernel);\n  }\n\n  return kernels;\n}\n\nfunction getXs(windowSize, angle, numKernels, lambda, sigma) {\n  const rotationDelta = (Math.PI / 2) / numKernels; // divide 90 degrees in number\n  const kernels = [];\n  for (let i = 0; i < numKernels; i += 1) {\n    const theta = i * rotationDelta; // angle of this cos wave\n\n    // Create two line ends at 90 degrees to each other and merge at diagonal between them\n    const kernelLine0 = getLine(windowSize, theta, lambda, sigma);\n    const kernelLine1 = getLine(windowSize, theta - angle, lambda, sigma);\n    const kernel = nj.zeros([windowSize, windowSize]).tolist();\n    for (let y = 0; y < windowSize; y += 1) {\n      for (let x = 0; x < windowSize; x += 1) {\n        // use most extreme\n        const zMax = Math.max(kernelLine0[y][x], kernelLine1[y][x]);\n        const zMin = Math.min(kernelLine0[y][x], kernelLine1[y][x]);\n        kernel[y][x] = zMax > 0 ? zMax : zMin;\n      }\n    }\n\n    kernels.push(kernel);\n  }\n\n  return kernels;\n}\n\nfunction getDot(windowSize, lambda, sigma, size=1) {\n  const gaussNeg = getGaussianFn(sigma);\n  const gaussPos = getGaussianFn(size * lambda / 4);\n  const kernel = nj.zeros([windowSize, windowSize]).assign(-1, false).tolist();\n  const halfWindowSize = Math.floor(windowSize / 2);\n\n  for (let y = 0; y < windowSize; y += 1) {\n    const yCentered = y - halfWindowSize;\n    for (let x = 0; x < windowSize; x += 1) {\n      const xCentered = x - halfWindowSize;\n      kernel[y][x] = (gaussPos(xCentered, yCentered) * 8) - gaussNeg(xCentered, yCentered);\n    }\n  }\n\n  // normalize\n  const max = Math.max(...kernel.flat());\n  const kernelNorm = kernel.map(row => row.map(v => v / max));\n\n  return kernelNorm;\n}\n\nfunction getYs(windowSize, angle, numKernels, lambda, sigma) {\n  const rotationDelta = 2 * Math.PI / numKernels; // divide 360 degrees in number\n  const halfWindowSize = Math.floor(windowSize / 2);\n  const kernels = [];\n  for (let i = 0; i < numKernels; i += 1) {\n    const theta = i * rotationDelta; // angle of this cos wave\n\n    // Create line at angle, and two other lines spread from 180 degree from that line by angle\n    const kernelLineEndBase = getLineEnd(windowSize, theta, lambda, sigma);\n    const kernelLineEndBranch0 = getLineEnd(windowSize, theta - Math.PI + angle, lambda, sigma);\n    const kernelLineEndBranch1 = getLineEnd(windowSize, theta - Math.PI - angle, lambda, sigma);\n\n    const a = Math.sin(theta);\n    const b = Math.cos(theta);\n    const kernel = nj.zeros([windowSize, windowSize]).tolist();\n    for (let y = 0; y < windowSize; y += 1) {\n      const yCentered = y - halfWindowSize;\n      for (let x = 0; x < windowSize; x += 1) {\n        const xCentered = x - halfWindowSize;\n        const c = (a * xCentered) - (b * yCentered); // pos in rotation space\n        if (c < -1.00001) { // rounding error at 0\n          // use line\n          kernel[y][x] = kernelLineEndBase[y][x];\n        } else {\n          // use max between all\n          const zMax = Math.max(kernelLineEndBranch0[y][x], kernelLineEndBranch1[y][x], kernelLineEndBase[y][x]);\n          const zMin = Math.min(kernelLineEndBranch0[y][x], kernelLineEndBranch1[y][x], kernelLineEndBase[y][x]);\n          kernel[y][x] = zMax > 0 ? zMax : zMin;\n        }\n      }\n    }\n\n    kernels.push(kernel);\n  }\n\n  return kernels;\n}\n\n// process kernels\nexport function scaleKernel(kernel) {\n  let positiveSum = 0;\n  let positiveMax = 0;\n  let negativeMin = 0;\n  kernel.forEach(row => row.forEach(v => {\n    if (v > 0) {\n      positiveSum += v;\n      if (v > positiveMax) {\n        positiveMax = v;\n      }\n    } else {\n      if (v < negativeMin) {\n        negativeMin = v;\n      }\n    }\n  }));\n\n  let negativeScaleFactor;\n  if (positiveMax === 0 || negativeMin === 0) {\n    negativeScaleFactor = 1;\n  } else {\n    negativeScaleFactor = -negativeMin / (positiveMax / positiveSum);\n  }\n  const positiveScaleFactor = positiveSum;\n\n  kernel = kernel.map(row => row.map(v => {\n    if (v > 0) {\n      // normalize positive weights, such that the total adds up to 1 (ie. max activation is 1 if input max is 1)\n      return v / positiveScaleFactor;\n    } else {\n      // scale negative weights with scale where min is equal negative magnitude of max positive\n      // there may be a lot more negative than positive, but by scaling to match, an equal number\n      // of mismatch pixels will cancel out with positive\n      return v / negativeScaleFactor;\n    }\n  }));\n\n  return kernel;\n}\n\nexport function getKernels(windowSize, numComponents, lambda, sigma, types) {\n  const kernels = [];\n  if (!windowSize || !numComponents) {\n    return kernels;\n  }\n\n  if (types.includes(kernelTypes[0])) {\n    kernels.push(...getLines(windowSize, numComponents, lambda, sigma));\n  }\n  if (types.includes(kernelTypes[1])) {\n    kernels.push(...getLineEnds(windowSize, numComponents * 2, lambda, sigma));\n  }\n  if (types.includes(kernelTypes[2])) {\n    kernels.push(...getLs(windowSize, Math.PI * 0.5, numComponents * 2, lambda, sigma));\n  }\n  if (types.includes(kernelTypes[3])) {\n    kernels.push(...getTs(windowSize, Math.PI * 0.5, numComponents * 2, lambda, sigma));\n  }\n  if (types.includes(kernelTypes[4])) {\n    kernels.push(...getXs(windowSize, Math.PI * 0.5, numComponents / 2, lambda, sigma));\n  }\n  if (types.includes(kernelTypes[5])) {\n    kernels.push(...getYs(windowSize, Math.PI * 0.25, numComponents * 2, lambda, sigma));\n  }\n  if (types.includes(kernelTypes[6])) {\n    kernels.push(...getLs(windowSize, Math.PI * 0.25, numComponents * 2, lambda, sigma));\n  }\n  if (types.includes(kernelTypes[7])) {\n    kernels.push(...getLs(windowSize, Math.PI * 0.75, numComponents * 2, lambda, sigma));\n  }\n  if (types.includes(kernelTypes[8])) {\n    kernels.push(...getLs(windowSize, Math.PI * 0.925, numComponents * 2, lambda, sigma));\n  }\n  if (types.includes(kernelTypes[9])) {\n    kernels.push(getDot(windowSize, lambda, sigma, 0.7));\n    kernels.push(getDot(windowSize, lambda, sigma, 1));\n  }\n\n  // Other potentials\n  // kernels.push(...getTs(windowSize, Math.PI * 0.75, numComponents * 2, lambda, sigma));\n  // kernels.push(...getTs(windowSize, Math.PI * 0.25, numComponents * 2, lambda, sigma));\n  // kernels.push(...getXs(windowSize, Math.PI * 0.25, numComponents, lambda, sigma));\n  // points, small circles, blank, dense intersection, round corners, pinched round corners\n  // look at internal representations in Sketch-A-Net and try to add those\n\n  const scaledKernels = kernels.map(scaleKernel);\n\n  if (types.includes(kernelTypes[9])) {\n    // custom scale\n    scaledKernels.push(nj.zeros([windowSize, windowSize]).assign(1 / (windowSize * windowSize), false).tolist());\n    scaledKernels.push(nj.zeros([windowSize, windowSize]).assign(-1 / 4, false).tolist());\n    // const pixel = nj.zeros([windowSize, windowSize]);\n    // pixel.set(Math.floor(windowSize / 2), Math.floor(windowSize / 2), 1);\n    // scaledKernels.push(pixel.tolist());\n  }\n  // console.log(JSON.stringify(scaledKernels.map(k => k.map(r => r.map(v => Number(v.toFixed(5)))))));\n  // console.log(JSON.stringify(scaledKernels));\n  console.log(scaledKernels.map(kernel => kernel.map(row => row.join(',')).join('\\n')).join('\\n:\\n'));\n\n  return scaledKernels;\n}\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport Slider from '@material-ui/core/Slider';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport { kernelTypes } from '../../js/kernel';\n\n// { ['l', 'i', 'L', 'T', 'X', 'Y', '>', '7', ')', '⭑'].map(type => (\nconst KernelMakerControls = memo(function KernelMakerControls(props) {\n  return (\n    <div>\n      <div>\n        <div>Types</div>\n        <ToggleButtonGroup\n          value={props.types}\n          onChange={(event, types) => types.length > 0 ? props.onChange('types', types) : 0}\n          aria-label=\"types of kernels\"\n          style={{ borderRadius: 0, margin: '12px 0 0 0' }}\n          className=\"toggle-types\"\n        >\n          { kernelTypes.slice(0, 5).map((type, i) => (\n            <ToggleButton\n              key={type}\n              value={type}\n              style={{ borderRadius: 0, height: '28px', width: '28px', textTransform: 'none', padding: '4px', textAlign: 'center' }}\n            >\n              { type }\n            </ToggleButton>\n          )) }\n        </ToggleButtonGroup>\n        <ToggleButtonGroup\n          value={props.types}\n          onChange={(event, types) => types.length > 0 ? props.onChange('types', types) : 0}\n          aria-label=\"types of kernels\"\n          style={{ borderRadius: 0, margin: '2px 0 12px 0' }}\n          className=\"toggle-types\"\n        >\n          { kernelTypes.slice(5, 10).map((type, i) => (\n            <ToggleButton\n              key={type}\n              value={type}\n              style={{ borderRadius: 0, height: '28px', width: '28px', textTransform: 'none', padding: '4px', textAlign: 'center' }}\n            >\n              { type }\n            </ToggleButton>\n          )) }\n        </ToggleButtonGroup>\n      </div>\n      <div>\n        <div>Angles</div>\n        <Slider\n          defaultValue={props.numComponents}\n          track={false}\n          aria-labelledby=\"number of components\"\n          marks={[1, 2, 3, 4, 5].map(value => ({ value, label: (2 ** value) }))}\n          step={1}\n          min={1}\n          max={5}\n          onChange={(event, value) => props.onChange('numComponents', value)}\n        />\n      </div>\n      <div>\n        <div>Size</div>\n        <Slider\n          defaultValue={props.windowSize}\n          track={false}\n          aria-labelledby=\"window size\"\n          valueLabelDisplay=\"auto\"\n          marks={[3, 5, 7, 9, 11, 13, 15].map(value => ({ value, label: value }))}\n          step={2}\n          min={3}\n          max={15}\n          onChange={(event, value) => props.onChange('windowSize', value)}\n        />\n      </div>\n      <div>\n        <div>Width Factor</div>\n        <Slider\n          defaultValue={props.lambda}\n          track={false}\n          aria-labelledby=\"lambda\"\n          valueLabelDisplay=\"auto\"\n          step={0.1}\n          min={1.1}\n          max={10}\n          onChange={(event, value) => props.onChange('lambda', value)}\n          style={{ padding: '24px 0' }}\n        />\n      </div>\n      <div>\n        <div>Gaussian Spread</div>\n        <Slider\n          defaultValue={props.sigma}\n          track={false}\n          aria-labelledby=\"sigma\"\n          valueLabelDisplay=\"auto\"\n          step={0.1}\n          min={0.1}\n          max={8}\n          onChange={(event, value) => props.onChange('sigma', value)}\n          style={{ padding: '24px 0' }}\n        />\n      </div>\n    </div>\n  );\n});\n\nKernelMakerControls.propTypes = {\n  numComponents: PropTypes.number.isRequired,\n  lambda: PropTypes.number.isRequired,\n  sigma: PropTypes.number.isRequired,\n  windowSize: PropTypes.number.isRequired,\n  types: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nexport default KernelMakerControls;\n","import React, { useCallback, useMemo, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Array2DViewList from '../UI/Array2DViewList';\nimport KernelMakerControls from './KernelMakerControls';\nimport { getKernels } from '../../js/kernel';\n\nfunction KernelMaker(props) {\n  const { defaultKernelSettings, updateKernelSettings } = props;\n  // store the kernel settings as a local state for snappy updates\n  const [ kernelSettings, setKernelSettings ] = useState(defaultKernelSettings);\n  const { numComponents, lambda, sigma, windowSize, types } = kernelSettings;\n\n  const timerRef = useRef(null);\n  const updateKernelSettingsCallback = useCallback((field, value) => {\n    const newKernelSettings = { ...kernelSettings, [field]: value }\n    setKernelSettings(newKernelSettings);\n\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n    }\n    // delay global update to make the kernel tuner UI update smoothly\n    timerRef.current = setTimeout(() => {\n      updateKernelSettings(newKernelSettings);\n    }, 100);\n  }, [ setKernelSettings, kernelSettings, updateKernelSettings ]);\n\n  const kernels = useMemo(() => {\n    return getKernels(windowSize, 2 ** numComponents, lambda, sigma, types);\n  }, [ numComponents, lambda, sigma, windowSize, types ]);\n\n  return (\n    <ExpansionPanel defaultExpanded={true} square={true} style={{ boxShadow: 'none', border: '1px solid #b2b2b2' }}>\n      <ExpansionPanelSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"kerneltuner-content\"\n      >\n        <h3 style={{ margin: '0 10px' }}>Kernel Maker</h3>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails style={{ margin: '10px 20px' }}>\n        <Grid container justify=\"flex-start\" spacing={4}>\n          <Grid item style={{ marginRight: '20px', width: '165px' }}>\n            <KernelMakerControls\n              numComponents={numComponents}\n              lambda={lambda}\n              sigma={sigma}\n              windowSize={windowSize}\n              types={types}\n              onChange={updateKernelSettingsCallback}\n             />\n          </Grid>\n          <Grid item style={{ width: 'calc(100% - 220px)' }}>\n            <Array2DViewList imgArrs={kernels} scale={4} cols={8} />\n          </Grid>\n        </Grid>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n}\n\nKernelMaker.propTypes = {\n  defaultKernelSettings: PropTypes.object.isRequired,\n  updateKernelSettings: PropTypes.func.isRequired,\n};\n\nexport default KernelMaker;\n","import React, { useState, useCallback, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport Slider from '@material-ui/core/Slider';\nimport { debounce } from 'lodash';\n\n// This slider manages its own state and notifies listeners to changes through onChange after debounce\nconst DebounceSlider = memo(function DebounceSlider(props) {\n  const [value, setValue] = useState(props.defaultValue);\n  const onChange = useCallback(debounce(props.onChange, props.timer || 0), [props]);\n\n  return (\n    <Slider\n      value={value}\n      {...props}\n      onChange={(event, value) => {\n        setValue(value);\n        onChange(event, value);\n      }}\n    />\n  )\n});\n\nDebounceSlider.propTypes = {\n  defaultValue: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n  timer: PropTypes.number,\n};\n\nexport default DebounceSlider;\n","import nj from 'numjs';\nimport * as tf from '@tensorflow/tfjs';\n\nexport const dtype = 'float32';\n\n// A wrapper to simplify the update and retrieval of 2D array slices for convolutions\nexport default class ConvArray {\n  constructor(channels, shape, kernelSize, stride) {\n    // console.log('create ConvArray');\n    // shape of the editable area\n    this._shape = shape;\n    // settings for convolutions that will be applied to this array (necessary for calculating valid slices)\n    this._stride = stride;\n    this._pad = Math.floor(kernelSize / 2);\n    // backing array with extra padding on sides for valid convolution\n    let outerShape;\n    if (this._pad !== 0) {\n      // for conv2d filters with stride===1\n      outerShape = this._shape.map(v => v + (this._pad * 2));\n      this._outerBounds = [ -this._pad, -this._pad, this._shape[1] + this._pad, this._shape[0] + this._pad ];\n    } else {\n      // for maxPool2d filters, need extra padding to width and height to be divisible by pool size\n      outerShape = shape.map(v => Math.ceil(v / this._stride) * this._stride);\n      this._outerBounds = [ 0, 0, outerShape[1], outerShape[0] ];\n    }\n\n    const [ h, w ] = outerShape;\n    this._channels = channels;\n    this._arr = nj.zeros([channels, h, w], dtype);\n\n    // max data\n    this._ids = nj.zeros(this._shape, 'int32').assign(-1, false);\n    this._max = nj.zeros(this._shape, dtype);\n\n    // 4-tuple containing bounds of area that has been changed, coordinates relative to editable area\n    this._dirtyBounds = null;\n  }\n\n  static pool(channels, shape, poolSize) {\n    return new ConvArray(channels, shape, 0, poolSize);\n  }\n\n  static conv(channels, shape, kernelSize, stride=1) {\n    return new ConvArray(channels, shape, kernelSize, stride);\n  }\n\n  /**\n   * Previous layer assigns its calculations to the editable area\n   */\n  assign(arr, channel, bounds) {\n    if (channel === null) {\n      this._slice(bounds).assign(arr, false);\n    } else {\n      this._slice(bounds).slice([channel, channel + 1], null, null).assign(arr, false);\n    }\n    this._updateDirtyBounds(bounds);\n  }\n\n  /**\n   * Clears the dirtyBounds\n   */\n  clean() {\n    this._dirtyBounds = null;\n  }\n\n  /**\n   * Clears the dirtyBounds\n   */\n  calcStats(outputTensor, backend='cpu') {\n    if (this._dirtyBounds) {\n      let _backend;\n      if (backend) {\n        // save original backend for reset\n        _backend = tf.getBackend();\n      }\n\n      const [ minX, minY, maxX, maxY ] = this._dirtyBounds;\n      const h = maxY - minY;\n      const w = maxX - minX;\n\n      const times = [];\n      let ct0 = Date.now();\n      let ct1;\n\n      if (backend) {\n        tf.setBackend(backend);\n      }\n\n      times.push(tf.getBackend());\n      const idsT = outputTensor.argMax(1);\n\n      if (backend) {\n        // reset backend\n        tf.setBackend(_backend);\n      }\n\n      ct1 = Date.now();\n      times.push('argmax -> ');\n      times.push(ct1 - ct0);\n      ct0 = ct1;\n\n      times.push(tf.getBackend());\n      const dsync = idsT.dataSync();\n\n      ct1 = Date.now();\n      times.push('data sync -> ');\n      times.push(ct1 - ct0);\n      ct0 = ct1;\n\n      times.push(tf.getBackend());\n      let idsUpdate = nj['int32'](dsync);\n      idsUpdate = idsUpdate.reshape([ h, w ]);\n      const idsSlice = this._ids.slice([minY, maxY], [minX, maxX]);\n      idsSlice.assign(idsUpdate, false);\n\n      ct1 = Date.now();\n      times.push('update _ids -> ');\n      times.push(ct1 - ct0);\n      ct0 = ct1;\n\n      // gather max\n      times.push(tf.getBackend());\n      const flatOutputTensor = outputTensor.reshape([-1]);\n      const flatIdsTensor = idsT.reshape([-1]);\n      const layerOffsets = tf.mul(flatIdsTensor, tf.scalar(w * h, 'int32'));\n      const withinLayerOffsets = tf.range(0, h * w, 1, 'int32');\n      const idLookups = tf.add(layerOffsets, withinLayerOffsets);\n\n      ct1 = Date.now();\n      times.push('prepare gather -> ');\n      times.push(ct1 - ct0);\n      ct0 = ct1;\n\n      if (backend) {\n        tf.setBackend(backend);\n      }\n\n      times.push(tf.getBackend());\n      const maxT = flatOutputTensor.gather(idLookups);\n\n      if (backend) {\n        // reset backend\n        tf.setBackend(_backend);\n      }\n\n      ct1 = Date.now();\n      times.push('gather -> ');\n      times.push(ct1 - ct0);\n      ct0 = ct1;\n\n      times.push(tf.getBackend());\n      const maxUpdate = nj[dtype](maxT.dataSync()).reshape([ h, w ]);\n      const maxSlice = this._max.slice([minY, maxY], [minX, maxX]);\n      maxSlice.assign(maxUpdate, false);\n\n      ct1 = Date.now();\n      times.push('update _max -> ');\n      times.push(ct1 - ct0);\n      ct0 = ct1;\n\n      console.log('calc stats:', backend, 'total time -> ', times.reduce((a, b) => Number.isInteger(b) ? a + b : a, 0), ...times);\n    }\n  }\n\n  /**\n   * Get the dirty area plus padding so that valid convolutions will happen on any convolution that touches\n   * the dirty pixels.\n   */\n  get dirty() {\n    if (!this._dirtyBounds) {\n      return null;\n    }\n    return this._slice(this.dirtyBounds);\n  }\n\n  /**\n   * Gets the dirty bounds with respect to what the next layer cares about\n   */\n  get dirtyBounds() {\n    if (!this._dirtyBounds) {\n      return null;\n    }\n\n    let bounds = this._dirtyBounds;\n\n    // for conv2d kernels with stride=1\n    if (this._pad !== 0) {\n      // at a minimum, expand the bounds by twice the kernel padding\n      bounds = dilateBounds(this._dirtyBounds, this._pad * 2);\n      // limit to the editable area\n      bounds = limitBounds(bounds, this._outerBounds);\n    }\n\n    // for maxPool2d kernels\n    if (this._stride !== 1) {\n      // match the bounds to the beginning and end of a stride (limited by backing array)\n      bounds = bounds.map(b => b / this._stride);\n      const [ sx, sy, ex, ey ] = bounds;\n      bounds = [ Math.floor(sx), Math.floor(sy), Math.ceil(ex), Math.ceil(ey) ];\n      bounds = bounds.map(b => b * this._stride);\n    }\n\n    return bounds;\n  }\n\n  /**\n   * Return the editable array (not including padding around edges)\n   */\n  get arr() {\n    return this._slice([ 0, 0, this._shape[1], this._shape[0] ]);\n  }\n\n  /**\n   * Slice that allows negative values to represent outside of legal area\n   */\n  _slice(bounds=null) {\n    if (!bounds) {\n      bounds = [ 0, 0, ...this._shape ];\n    }\n    const [ sx, sy, ex, ey ] = bounds;\n    return this._arr.slice(null, [ sy + this._pad, ey + this._pad ], [ sx + this._pad, ex + this._pad ]);\n  }\n\n  /**\n   * Expand the dirty bounds to include the given bounds\n   */\n  _updateDirtyBounds(bounds) {\n    if (!this._dirtyBounds) {\n      this._dirtyBounds = bounds;\n    } else {\n      const [ sx, sy, ex, ey ] = bounds;\n      const [ dsx, dsy, dex, dey ] = this._dirtyBounds;\n      this._dirtyBounds = [ Math.min(sx, dsx), Math.min(sy, dsy), Math.max(ex, dex), Math.max(ey, dey) ];\n    }\n  }\n\n  print() {\n    this.arr.tolist().forEach(c => console.table(c));\n  }\n\n  printBacking() {\n    this._arr.tolist().forEach(c => console.table(c));\n  }\n}\n\n// reduce bounds to be within limits\nexport function limitBounds(bounds, limit) {\n  if (!bounds || !limit) {\n    return bounds;\n  }\n\n  // update with most extreme\n  const [ minX0, minY0, maxX0, maxY0 ] = bounds;\n  const [ minX1, minY1, maxX1, maxY1 ] = limit;\n  const minX = Math.max(minX0, minX1);\n  const minY = Math.max(minY0, minY1);\n  const maxX = Math.min(maxX0, maxX1);\n  const maxY= Math.min(maxY0, maxY1);\n  return [ minX, minY, maxX, maxY ];\n}\n\n// Eat away padding amount from 2D array\nexport function dilateBounds(selection, padding) {\n  if (!selection || selection.length === 0 || !padding) {\n    return selection;\n  }\n  let [ minX, minY, maxX, maxY ] = selection;\n\n  return [ minX - padding, minY - padding, maxX + padding, maxY + padding ];\n}\n","import nj from 'numjs';\nimport * as tf from '@tensorflow/tfjs';\nimport { dtype, dilateBounds } from './convArray';\n\nexport default class ConvLayer {\n  constructor(input, output, filters, kernelSize) {\n    this.input = input;\n    this.output = output;\n    this._kernelSize = kernelSize;\n    this._pad = Math.floor(kernelSize / 2);\n    this._rawFilters = filters;\n    this.filters = filters.map(filter => filter.map(kernel => kernel ? nj[dtype]([kernel]) : null));\n    this._tflayer = getConvLayer(nj[dtype](filters.map(filter => filter.map(kernel => kernel ? kernel : nj.zeros([kernelSize, kernelSize], dtype).tolist()))), kernelSize);\n  }\n\n  runWith(backend) {\n    const dirty = this.input.dirty;\n\n    // tf backend\n    const times = [];\n    let ct0 = Date.now();\n    let ct1;\n\n    const d = dirty.reshape([1, ...dirty.shape]).selection;\n    const input = tf.tensor4d(d.data, d.shape);\n\n    ct1 = Date.now();\n    times.push('to tensor -> ');\n    times.push(ct1 - ct0);\n    ct0 = ct1;\n\n    let _backend;\n    if (backend) {\n      // save original backend for reset\n      _backend = tf.getBackend();\n      tf.setBackend(backend);\n    }\n\n    times.push(tf.getBackend());\n    const output = this._tflayer.apply(input);\n\n    if (backend) {\n      // reset backend\n      tf.setBackend(_backend);\n    }\n\n    ct1 = Date.now();\n    times.push('apply conv -> ');\n    times.push(ct1 - ct0);\n    ct0 = ct1;\n\n    times.push(tf.getBackend());\n    const dsync = output.dataSync();\n\n    ct1 = Date.now();\n    times.push('data sync -> ');\n    times.push(ct1 - ct0);\n    ct0 = ct1;\n\n    times.push(tf.getBackend());\n    const updateArr = nj[dtype](dsync);\n\n    ct1 = Date.now();\n    times.push('to array -> ');\n    times.push(ct1 - ct0);\n    ct0 = ct1;\n\n    console.log('conv stats:', backend, 'total time -> ', times.reduce((a, b) => Number.isInteger(b) ? a + b : a, 0), ...times);\n\n    return { output, updateArr };\n  }\n\n  run() {\n    // updateBounds for this layer will be the dirtyBounds eroded by the padding for convolution\n    const updateBounds = dilateBounds(this.input.dirtyBounds, -this._pad);\n    const [ minX, minY, maxX, maxY ] = updateBounds;\n    const h = maxY - minY;\n    const w = maxX - minX;\n    const size = h * w * this._kernelSize * this._rawFilters.length;\n\n    // the default for calculations is cpu\n    tf.setBackend('cpu');\n\n    // over a certain size, webgl is faster\n    // at small sizes, the penalty for syncing data makes cpu faster\n    const useWebGL = ((h * w) >= (150 * 150)) || size > 8000000;\n\n    let result;\n    const sizeDisplay = `${w} x ${h} x ${this._kernelSize} x ${this._rawFilters.length} = ${size}`;\n    if (useWebGL) {\n      console.log('dirty size x kernel x kernels -> ', sizeDisplay, ' -> electing webgl backend');\n      result = this.runWith('webgl');\n    } else {\n      console.log('dirty size x kernel x kernels -> ', sizeDisplay, ' -> electing cpu backend');\n      result = this.runWith('cpu');\n    }\n    const { output, updateArr } = result;\n\n    const updateShape = [ this.output._channels, h, w ];\n    const update = updateArr.reshape(updateShape);\n    this.output.assign(update, null, updateBounds);\n\n    if (useWebGL) {\n      this.output.calcStats(output, 'webgl');\n    } else {\n      this.output.calcStats(output, 'cpu');\n    }\n\n    this.input.clean();\n  }\n}\n\nfunction getConvLayer(filters, kernelSize) {\n  // data format in: [out, in, h, w]\n  // data format out: [filter_height, filter_width, in_channels, out_channels]\n  // -> filters: A Tensor. Must have the same type as input. A 4-D tensor of shape\n  const numOutputs = filters.shape[0];\n  const weights = filters.transpose(2, 3, 1, 0).tolist();\n  // create bias such that the ideal input is 1\n  const biases = nj.zeros([numOutputs]).tolist();\n\n  // we only need a bias for all negative weights (the others are balanced to equal 1 on ideal)\n  filters.tolist().forEach((filter, i) => {\n    // for filters that are all negative, give bias of positive 1\n    if (filter.flat().flat().filter(v => v > 0).length === 0) {\n      biases[i] = 64;\n    }\n  });\n\n  const weightsTensor = [tf.tensor4d(weights), tf.tensor1d(biases)];\n  // const weightsTensor = [tf.tensor4d(weights)];\n  const layer = tf.layers.conv2d({\n    filters: numOutputs,\n    kernelSize: kernelSize,\n    strides: 1,\n    padding: 'valid',\n    weights: weightsTensor,\n    activation: 'relu',\n    dataFormat: 'channelsFirst',\n    // useBias: false\n  });\n  return layer;\n}\n","import nj from 'numjs';\nimport * as tf from '@tensorflow/tfjs';\nimport { dtype } from './convArray';\n\nexport default class MaxPoolLayer {\n  constructor(input, output, poolSize) {\n    this.input = input;\n    this.output = output;\n    this.poolSize = poolSize;\n    this._tflayer = tf.layers.maxPooling2d({ poolSize, dataFormat: 'channelsFirst' });\n  }\n\n  run() {\n    // for pool layers, the padding is to the edge of each pool, so update bounds are the reduced dirty bounds\n    const dirty = this.input.dirty;\n    const updateBounds = this.input.dirtyBounds.map(b => Math.ceil(b / this.poolSize));\n    const [ minX, minY, maxX, maxY ] = updateBounds;\n    const h = maxY - minY;\n    const w = maxX - minX;\n\n    const size = h * w;\n    const sizeThreshold = 3000;\n    if (size > sizeThreshold) {\n      tf.setBackend('webgl');\n      console.log('opting to use webgl');\n    } else {\n      tf.setBackend('cpu');\n    }\n\n    // tf backend\n    const d = dirty.reshape([1, ...dirty.shape]).selection;\n    const input = tf.tensor4d(d.data, d.shape);\n    const output = this._tflayer.apply(input);\n    const updateShape = [ this.output._channels, h, w ];\n    const update = nj[dtype](output.dataSync()).reshape(updateShape);\n\n    tf.setBackend('cpu');\n\n    this.output.assign(update, null, updateBounds);\n\n    if (size > sizeThreshold) {\n      this.output.calcStats(output, 'webgl');\n    } else {\n      this.output.calcStats(output, 'cpu');\n    }\n\n    this.input.clean();\n  }\n}\n","import ConvArray from './convArray';\nimport ConvLayer from './convLayer';\nimport MaxPoolLayer from './maxPoolLayer';\n\nexport default class Network {\n  constructor(inputShape, layerInfos) {\n    this.layerInfos = layerInfos;\n\n    // setup input and output data reps\n    this.arrs = []; // should be length = layers.length + 1\n    let channels = 1;\n    let shape = inputShape;\n    for (const layerInfo of layerInfos) {\n      let arr;\n      if (layerInfo.type === 'conv2d') {\n        arr = ConvArray.conv(channels, shape, layerInfo.kernelSize);\n        // next layer will have the channels created by this layer\n        channels = layerInfo.filters.length;\n        // we only allow a stride of 1 on convs for now\n        // shape = ?\n      } else if (layerInfo.type === 'maxPool2d') {\n        arr = ConvArray.pool(channels, shape, layerInfo.poolSize);\n        // pool layers only affect shape of layers in hyper column\n        shape = shape.map(v => Math.ceil(v / layerInfo.poolSize));\n      }\n      this.arrs.push(arr);\n    }\n    // add a final arr for the output\n    this.arrs.push(ConvArray.conv(channels, shape, 0));\n\n    // setup layers\n    this.layers = [];\n    for (const [i, layerInfo] of layerInfos.entries()) {\n      const input = this.arrs[i];\n      const output = this.arrs[i + 1];\n      let layer;\n      if (layerInfo.type === 'conv2d') {\n        layer = new ConvLayer(input, output, layerInfo.filters, layerInfo.kernelSize);\n      } else if (layerInfo.type === 'maxPool2d') {\n        layer = new MaxPoolLayer(input, output, layerInfo.poolSize);\n      }\n      this.layers.push(layer);\n    }\n\n    // prune first layer kernels with no connection going forward?\n  }\n\n  /**\n   * Given a change to the input layer, update all\n   */\n  run(dirty, dirtyBounds) {\n    // update first layer\n    this.arrs[0].assign(dirty, 0, dirtyBounds);\n\n    // propogate through network by running layers\n    const t00 = Date.now();\n    for (const [i, layer] of this.layers.entries()) {\n      const t0 = Date.now();\n      layer.run();\n      const t1 = Date.now();\n      console.log('time for layer ' + i, t1 - t0);\n    }\n    const t01 = Date.now();\n    console.log('total network time', t01 - t00);\n\n    // mark last layer clean (or it will accumlate dirty!)\n    this.arrs[this.arrs.length - 1].clean();\n  }\n\n  getOutput(i) {\n    const { arr: acts, _max: max, _ids: ids } = this.arrs[i + 1];\n    return { acts, max, ids };\n  }\n}\n","import nj from 'numjs';\nimport { dtype } from './conv/convArray';\nimport Network from './conv/network';\nimport p5 from 'p5';\n\nfunction limit(v, min, max) {\n  return v < min ? min : (v >= max ? max - 0.001 : v);\n}\n\nfunction safePt(pt, bounds) {\n  const [ minX, minY, maxX, maxY ] = bounds;\n  const x = limit(pt.x, minX, maxX);\n  const y = limit(pt.y, minY, maxY);\n  return new p5.Vector(x, y);\n}\n\nexport default class SmartCanvas {\n  constructor(p, shape, layerInfos) {\n    // assumes p is blank\n    this.p = p;\n    this.shape = shape;\n    this.layerInfos = layerInfos;\n    this.network = new Network(this.shape, layerInfos);\n    this._dirtyBounds = null;\n    this._backup = null;\n    this._listeners = [];\n  }\n\n  // do full calc once p5 is ready\n  init() {\n    if (!this.p._setupDone) {\n      setTimeout(() => this.init(), 10);\n    } else {\n      this.forceFullUpdate();\n    }\n  }\n\n  reset() {\n    this.p.clear();\n    this.forceFullUpdate();\n  }\n\n  get bounds() {\n    const [ maxY, maxX ] = this.shape;\n    return [ 0, 0, maxX, maxY ];\n  }\n\n  /**\n   * Draw a new line segment and update the dirtyBounds for this SmartCanvas\n   * @param {{x: number, y: number}} start - Start point of line segment\n   * @param {{x: number, y: number}} end - End point of line segment\n   * @param {boolean} makeBackup - If true, store the affected canvas area in the backup cache before change is applied.\n   */\n  addSegment(start, end, makeBackup=false) {\n    // sanitize\n    start = safePt(start, this.bounds);\n    end = safePt(end, this.bounds);\n\n    const bounds = this._getLineBounds(start, end);\n    if (makeBackup) {\n      if (this._backup !== null) {\n        console.log('Overwriting existing backup! Should call restore() first');\n      }\n      this._backup = {\n        img: this.p.get(...bounds),\n        bounds\n      };\n    }\n\n    this.p.line(start.x, start.y, end.x, end.y);\n    this._updateDirtyBounds(bounds);\n  }\n\n  /**\n   * Restore the image are from the backup cache to what it was previously and update dirty bounds to include\n   */\n  restore() {\n    if (this._backup !== null) {\n      const { img, bounds } = this._backup;\n      const [ x, y ] = bounds.slice(0, 2);\n      this.p.image(img, x, y);\n      this._backup = null;\n      this._updateDirtyBounds(bounds);\n    } else {\n      console.log('Backup failed, no backup cache available');\n    }\n  }\n\n  /**\n   * Recalculate the network activations within the current dirty bounds and reset dirty bounds to null\n   */\n  update() {\n    if (this._dirtyBounds) {\n      // get dirty area\n      const [ sx, sy, ex, ey ] = this._dirtyBounds;\n      const g = this.p.get(sx, sy, ex - sx, ey - sy);\n      g.loadPixels();\n      const dirty = nj[dtype](g.pixels).reshape(g.height, g.width, 4).slice(null, null, [3, 4]).reshape(1, g.height, g.width);\n      this.network.run(dirty, this._dirtyBounds);\n      this._notifyListeners({ network: this.network, dirtyBounds: [...this._dirtyBounds] });\n      this._dirtyBounds = null; // reset dirty bounds\n    }\n  }\n\n  forceFullUpdate() {\n    this._dirtyBounds = this.bounds;\n    this.update();\n  }\n\n  /**\n   * Expand the dirty bounds to include the given bounds\n   */\n  _updateDirtyBounds(bounds) {\n    if (!this._dirtyBounds) {\n      this._dirtyBounds = bounds;\n    } else {\n      const [ sx, sy, ex, ey ] = bounds;\n      const [ dsx, dsy, dex, dey ] = this._dirtyBounds;\n      this._dirtyBounds = [ Math.min(sx, dsx), Math.min(sy, dsy), Math.max(ex, dex), Math.max(ey, dey) ];\n    }\n  }\n\n  _getLineBounds(start, end) {\n    const pad = 1; // stroke weight is 2 right now, so pad by 1\n    let minX = Math.min(start.x, end.x) - pad;\n    let minY = Math.min(start.y, end.y) - pad;\n    let maxX = Math.max(start.x, end.x) + pad + 1;\n    let maxY = Math.max(start.y, end.y) + pad + 1;\n    const bounds = [ minX, minY, maxX, maxY ].map(v => Math.floor(v));\n    return bounds;\n  }\n\n  addListener(fn) {\n    this._listeners.push(fn);\n  }\n\n  removeListener(fn) {\n    const i = this._listeners.indexOf(fn);\n    if (i > -1) {\n      this._listeners.splice(i, 1);\n    }\n  }\n\n  _notifyListeners(...params) {\n    for (let fn of this._listeners) {\n      if (fn) {\n        fn(...params);\n      }\n    }\n  }\n}\n","import React, { useEffect, useRef, useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport DebounceSlider from '../UI/DebounceSlider';\nimport SmartCanvas from '../../js/smartCanvas';\nimport p5 from 'p5';\nimport { getSketch } from '../../js/sketches/drawingInputSketch';\n\nfunction KernelInspectorDrawingInput(props) {\n  const { shape, kernels, onUpdate } = props;\n\n  const [ rotation, setRotation ] = useState(0);\n\n  const imgRef = useRef(null);\n  const pRef = useRef(null);\n  const smartCanvasRef = useRef(null);\n\n  useEffect(() => {\n    if (!pRef.current) {\n      // currently doesn't support updating sketch\n      pRef.current = new p5(getSketch(shape, smartCanvasRef), imgRef.current);\n    }\n  });\n\n  useEffect(() => {\n    // only updates to kernels should actually retrigger this\n    const layerInfos = [\n      {\n        filters: kernels.map(k => [k]),\n        kernelSize: kernels[0].length,\n        type: 'conv2d'\n      }\n    ];\n    smartCanvasRef.current = new SmartCanvas(pRef.current, shape, layerInfos);\n    smartCanvasRef.current.addListener(onUpdate);\n    smartCanvasRef.current.init();\n  }, [ kernels, shape, onUpdate ]);\n\n  useEffect(() => {\n    if (!pRef.current._setupDone) {\n      return;\n    }\n\n    pRef.current.setRotation(rotation);\n    // entire canvas is dirty\n    smartCanvasRef.current.forceFullUpdate();\n  }, [ rotation ]);\n\n  const clear = useCallback(() => smartCanvasRef.current.reset(), []);\n\n  return (\n    <Grid container direction=\"column\" spacing={1} style={{ position: 'relative' }}>\n      <Grid item style={{ margin: '0 auto' }}>\n        <div ref={imgRef} className=\"zoom300\"></div>\n        <div style={{ marginTop: '10px', textAlign: 'center' }}>\n          <span>Make a drawing</span>\n          <Button style={{ marginLeft: '10px' }} variant=\"contained\" size=\"small\" color=\"primary\" aria-label=\"clear\" onClick={clear}>\n            Clear\n          </Button>\n        </div>\n      </Grid>\n      <Grid item style={{ margin: '20px auto', maxWidth: '200px', minWidth: '160px' }}>\n        <div>\n          <DebounceSlider\n            defaultValue={rotation}\n            track={false}\n            aria-labelledby=\"drawing rotation\"\n            valueLabelDisplay=\"auto\"\n            marks={[{ value: -360, label: '-360'}, { value: 0, label: '0'}, { value: 360, label: '360'}]}\n            step={1}\n            min={-360}\n            max={360}\n            onChange={(event, value) => setRotation(value)}\n            timer={20}\n          />\n        </div>\n        <div style={{ marginTop: '10px', textAlign: 'center' }}>Test rotation invariance</div>\n      </Grid>\n    </Grid>\n  );\n}\n\nKernelInspectorDrawingInput.propTypes = {\n  kernels: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))).isRequired,\n  shape: PropTypes.arrayOf(PropTypes.number).isRequired,\n  onUpdate: PropTypes.func,\n};\n\nexport default KernelInspectorDrawingInput;\n","const imgArr = [[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 13, 15, 10,  4,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  5, 40, 74, 82, 70, 50, 27,  9,  1,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  1, 21, 91,110,105,100, 98, 86, 63, 33, 10,\n    2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  5, 50,120, 90, 61, 64, 83, 98,103, 89, 59,\n   27,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  1, 12, 90,111, 45,  8,  9, 24, 47, 76,105,108,\n   80, 44, 15,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  3, 26,128, 81, 22,  0,  0,  0,  3, 14, 41, 86,\n  116,103, 61, 23,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  8, 51,142, 48,  8,  0,  0,  0,  0,  0,  2, 16,\n   54,106,125, 91, 34,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0, 16, 89,119, 27,  1,  0,  0,  0,  0,  0,  0,  1,\n    6, 27, 73,120,119, 53,  9,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  1, 28,124, 81, 15,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  4, 16, 49, 99,124, 55, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  6, 45,139, 51,  8,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  1, 11, 43,103,113, 43,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0, 15, 66,135, 29,  4,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0, 10, 48,117, 89, 32,  4,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0, 25, 88,116, 17,  1,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  1, 12, 73,115, 69, 20,  1,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  2,  5,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  1, 35,106, 92, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  2, 26,100,102, 51,  9,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  1, 16, 39, 21,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  2, 43,117, 73,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  5, 55,110, 86, 31,  2,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  6, 61,135, 85, 25,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  4, 48,121, 63,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0, 17, 80,106, 66, 11,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  1, 14,107,164,139, 69, 16,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  5, 50,122, 59,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  2, 40, 97, 95, 37,  1,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  3, 27,134,104,113,101, 54,  8,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  7, 56,125, 52,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0, 15, 72,102, 65,  9,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  7, 49,140, 58, 64,102, 89, 34,  2,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0, 13, 66,124, 41,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  4, 48, 97, 88, 22,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0, 14, 79,125, 32, 25, 76,103, 71, 15,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0, 25, 82,115, 28,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0, 28, 84,102, 39,  1,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  1, 24,111, 96, 19,  5, 41, 91,101, 44,  3,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  5, 46,100, 94, 16,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0, 13, 68,108, 58,  4,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  4, 37,135, 63, 11,  0, 13, 61,107, 85, 16,  1,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  1, 22, 75,109, 63,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 53,105, 78,  9,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0, 10, 56,141, 37,  5,  0,  1, 28, 83,119, 46,  5,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  8, 55,102, 93, 29,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 38, 95,100, 18,  1,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0, 21, 79,128, 20,  2,  0,  0,  5, 45,114,100, 16,  1,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0, 29, 89,102, 51,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 79,118, 29,  2,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    1, 34,105, 97, 12,  1,  0,  0,  0, 15, 65,141, 49,  8,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  4, 55,101, 79, 19,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11, 62,125, 48,  4,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    5, 49,120, 69,  7,  0,  0,  0,  0,  3, 29,111,103, 24,  1,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0, 10, 71,100, 62,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 46,118, 73,  8,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n   12, 63,124, 47,  4,  0,  0,  0,  0,  0, 11, 62,133, 53, 10,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0, 16, 82, 97, 50,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 32,101,101, 12,  1,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n   21, 77,118, 31,  2,  0,  0,  0,  0,  0,  3, 27,118, 88, 27,  1,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0, 21, 88, 93, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 21, 80,125, 20,  2,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n   33, 90,105, 20,  1,  0,  0,  0,  0,  0,  0, 10, 80,115, 48,  6,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0, 24, 91, 90, 38,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12, 59,140, 33,  4,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,\n   45,101, 87, 12,  0,  0,  0,  0,  0,  0,  0,  4, 44,122, 69, 16,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0, 25, 92, 90, 37,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 43,141, 52,  8,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,\n   57,107, 70,  7,  0,  0,  0,  0,  0,  0,  0,  1, 23,109, 87, 30,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0, 24, 91, 90, 38,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 30,129, 75, 13,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12,\n   68,108, 54,  3,  0,  0,  0,  0,  0,  0,  0,  0, 13, 89,101, 44,  1,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0, 24, 91, 91, 39,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 20,105,102, 20,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 21,\n   78,104, 41,  1,  0,  0,  0,  0,  0,  0,  0,  0,  7, 72,107, 56,  5,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0, 25, 93, 90, 37,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 13, 77,127, 28,  1,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 32,\n   86, 97, 30,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 56,109, 68, 12,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0, 31, 98, 86, 31,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 56,139, 38,  4,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 42,\n   92, 88, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 41,104, 81, 24,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    1, 42,105, 79, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 41,143, 49,  8,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 51,\n   96, 79, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 25, 91, 93, 43,  2,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    4, 58,108, 68, 13,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 30,140, 60, 12,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 60,\n   99, 70, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12, 71,100, 65, 11,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n   10, 80,105, 53,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 22,131, 73, 18,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 67,\n   99, 62,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 46, 97, 87, 29,\n    1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,\n   21,104, 92, 35,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 16,118, 85, 24,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14, 73,\n   99, 55,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 81,101, 56,\n    6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,\n   42,121, 71, 18,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 12,103, 98, 30,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 19, 79,\n   97, 47,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 53,101, 88,\n   21,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,\n   80,118, 47,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 87,109, 36,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 25, 84,\n   94, 40,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 80,109,\n   51,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 27,\n  129, 83, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 72,118, 44,  2,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 31, 88,\n   90, 34,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 52,104,\n   89, 15,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14, 73,\n  132, 45,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 60,123, 51,  5,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 36, 91,\n   87, 29,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 26, 81,\n  117, 42,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 37,119,\n   91, 21,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 49,125, 58,  8,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 41, 94,\n   84, 25,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 50,\n  113, 85, 12,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 20, 74,127,\n   45,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 40,124, 65, 12,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 45, 96,\n   81, 21,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 24,\n   82,124, 34,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7, 46,109, 94,\n   16,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 32,121, 72, 17,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 49, 97,\n   78, 18,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,\n   45,129, 75, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 76,118, 47,\n    5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 25,115, 79, 23,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 52, 98,\n   75, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,\n   19, 90,122, 36,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 47,102, 94, 17,\n    1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 20,107, 86, 29,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 55, 99,\n   73, 13,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    5, 37,136, 75, 19,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 16, 73,110, 58,  4,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 15, 97, 94, 36,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 58, 99,\n   71, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    1, 12, 87,118, 49,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 37, 91, 97, 30,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12, 86,100, 44,\n    1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 59, 99,\n   70, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  3, 39,117, 84, 28,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 58,100, 77, 14,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 77,104, 51,\n    3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 61,100,\n   68, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  1, 14, 85,106, 59, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14, 73,100, 58,  5,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 68,106, 56,\n    5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 62,100,\n   67,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  3, 47,104, 87, 33,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 25, 84, 95, 43,  1,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 61,108, 62,\n    8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 63,100,\n   66,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0, 19, 80,102, 63, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 35, 91, 88, 31,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 55,108, 66,\n   11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 64,100,\n   65,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  4, 47, 98, 90, 34,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 42, 95, 83, 23,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 49,107, 70,\n   14,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 64,100,\n   65,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0, 18, 75,104, 67, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 46, 96, 79, 20,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 44,106, 74,\n   17,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 64,100,\n   65,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  2, 40, 95,102, 36,  1,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 47, 96, 78, 19,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 40,104, 78,\n   21,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 64,100,\n   65,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0, 12, 64,112, 80, 11,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 46, 96, 80, 20,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 35,102, 81,\n   25,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 63,100,\n   66,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  2, 30, 86,117, 40,  3,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 42, 94, 83, 23,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 32, 99, 84,\n   28,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 62,100,\n   67,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  9, 51,112, 90, 14,  1,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  2,  0, 36, 91, 87, 29,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 30, 96, 86,\n   31,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 61,100,\n   68,  9,  0,  0,  0,  0,  0,  2,  5, 10, 16, 22, 28, 32, 34, 36, 36, 36,\n   36, 36, 36, 36, 36, 36, 38, 59,110,146, 63, 40, 36, 37, 37, 37, 37, 37,\n   37, 37, 37, 37, 37, 37, 37, 37, 36, 36, 36, 36, 36, 36, 36, 36, 35, 35,\n   34, 34, 33, 33, 33, 33, 32, 32, 31, 31, 31, 30, 30, 29, 28, 28, 27, 27,\n   26, 26, 25, 25, 24, 23, 22, 22, 21, 21, 20, 19, 19, 18, 17, 17, 16, 16,\n   15, 14, 14, 13, 12, 12, 11, 14, 26, 49, 35, 13, 35, 87, 90, 38,  5,  6,\n    6,  6,  6,  6,  6,  6,  5,  5,  3,  3,  2,  1,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27, 94, 88,\n   34,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 60, 99,\n   69, 10,  0,  4, 13, 25, 36, 48, 58, 66, 73, 79, 84, 86, 88, 89, 89, 90,\n   89, 89, 89, 89, 89, 89, 89, 96,120,164,113, 92, 89, 89, 89, 89, 88, 88,\n   88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 87, 87,\n   87, 87, 86, 86, 86, 86, 86, 85, 85, 85, 85, 84, 84, 84, 83, 83, 83, 82,\n   82, 82, 82, 81, 80, 80, 79, 79, 78, 77, 77, 76, 75, 75, 74, 73, 73, 72,\n   71, 71, 70, 69, 69, 68, 69, 78,104,141,113, 78, 83,115,116, 82, 57, 58,\n   59, 59, 59, 59, 59, 59, 58, 57, 54, 52, 49, 46, 42, 38, 33, 27, 21, 15,\n   11,  7,  3,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 25, 92, 89,\n   37,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 58,100,\n   75, 24, 27, 49, 77,103,123,137,145,147,146,142,136,130,125,121,114,104,\n   96, 94, 94, 94, 94, 94, 94, 94, 99,113,101, 93, 92, 92, 92, 91, 91, 91,\n   91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92,\n   93, 93, 93, 93, 94, 94, 95, 95, 95, 95, 96, 96, 97, 97, 98, 99, 99,100,\n  100,101,102,102,103,103,103,104,104,104,104,105,105,105,105,106,106,106,\n  106,107,107,107,107,107,113,133,167,191,165,138,131,135,131,117,107,107,\n  107,106,106,106,107,107,107,107,106,105,103,101, 98, 95, 90, 84, 76, 69,\n   62, 54, 46, 38, 29, 21, 13,  7,  3,  1,  0,  0,  0,  0,  0, 23, 90, 91,\n   39,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  8, 63,113,\n  105, 75, 97,137,170,187,192,190,182,171,160,151,142,134,128,121,100, 64,\n   33, 26, 26, 26, 26, 26, 26, 26, 26, 26, 25, 25, 25, 25, 25, 25, 24, 24,\n   24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26,\n   26, 27, 27, 27, 27, 28, 28, 28, 29, 29, 29, 29, 30, 31, 31, 32, 32, 33,\n   33, 34, 34, 35, 36, 37, 38, 38, 39, 40, 41, 41, 42, 42, 43, 44, 45, 45,\n   46, 47, 48, 48, 49, 50, 60, 85,117,120,105, 95, 87, 80, 74, 69, 66, 64,\n   63, 62, 62, 62, 62, 63, 65, 68, 70, 74, 78, 82, 88, 96,103,111,117,122,\n  125,124,119,109, 96, 80, 63, 48, 36, 27, 19, 12,  8,  4,  2, 23, 89, 92,\n   41,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 10, 35,100,164,\n  182,161,146,133,122,112,103, 95, 88, 84, 82, 82, 85, 91, 98,104, 89, 49,\n    8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,\n    1,  1,  1,  1,  2,  2,  4,  9, 15, 15, 12, 11,  9,  8,  7,  6,  6,  5,\n    5,  5,  5,  5,  5,  5,  5,  6,  7,  8,  9, 11, 12, 15, 18, 22, 27, 35,\n   44, 55, 69, 86,105,125,140,143,138,122, 98, 72, 50, 31, 19, 33, 93, 95,\n   44,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 11, 82,161,201,194,\n  137, 64, 27, 17, 14, 12, 11, 10,  9,  9,  9,  9,  9, 10, 11, 12, 11,  6,\n    1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  2,  2,\n    4,  5,  7, 10, 13, 19, 28, 42, 60, 81,106,128,141,141,127,115,139,123,\n   67, 21, 11,  5,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 14,103,179,175,135,\n   76, 21,  3,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  1,  2,  3,  6, 10, 14, 21, 30, 42, 58, 80,113,159,169,\n  140,105, 85, 64, 45, 29, 16,  7,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 46,114,139,111,\n   56, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  5, 11, 21, 43, 90,109,\n   98, 91,103,110,107, 96, 81, 65, 48, 31, 16,  6,  1,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 44, 97,123,\n   98, 44,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 29, 38,\n   33, 33, 48, 64, 78, 90, 98,100, 97, 88, 76, 60, 42, 24, 11,  3,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 13, 75,132,\n  138, 96, 49, 10,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  4,\n    2,  0,  3,  9, 21, 36, 52, 68, 81, 92, 99,100, 94, 81, 65, 47, 30, 24,\n   32, 36, 29, 21, 14,  9,  4,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 85,118,\n  118,112,102, 53, 12,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  3, 10, 22, 37, 55, 73, 92,106,109,102, 89, 89,\n  109,104, 87, 76, 67, 58, 48, 38, 28, 18,  9,  3,  1,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 55,109, 86,\n   48, 62,110,117, 55, 17,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  4, 11, 25, 43, 65, 89,113,141,\n  164,135,112,118,123,124,120,110, 94, 73, 53, 36, 23, 14,  6,  2,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 17, 96,103, 48,\n    6,  9, 39,105,135, 70, 23,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  6, 13, 26, 48,\n   67, 45, 23, 28, 37, 50, 67, 87,110,132,143,135,110, 75, 43, 20,  7,  1,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 40,123, 74, 19,\n    0,  0,  5, 23, 88,131, 93, 39,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  4,\n    6,  4,  1,  2,  3,  4,  7, 10, 14, 22, 38, 65, 99,128,136,113, 63, 15,\n    1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7, 71,119, 50,  6,\n    0,  0,  0,  3, 21, 70,111,103, 60, 19,  2,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  5, 11, 20, 35, 62, 99,122, 79,\n   14,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 13,101,101, 33,  1,\n    0,  0,  0,  0,  2, 20, 60, 99,106, 74, 30,  4,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 14, 40, 87,126,\n   47,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 21,126, 79, 21,  0,\n    0,  0,  0,  0,  0,  1, 16, 51, 89,105, 86, 42,  8,  1,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5,  4,  2,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  5, 11, 17, 19, 17, 11,  4,  0,  0,  0,  0,  0,  7, 40,116,\n   92, 19,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 35,140, 58, 12,  0,\n    0,  0,  0,  0,  0,  0,  1, 11, 39, 78,106, 97, 51, 15,  2,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 15, 38, 56, 56, 49, 37,\n   19,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  2, 20, 52, 67, 74, 76, 74, 67, 51, 25,  7,  1,  0,  0,  0, 15, 76,\n  128, 34,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 55,139, 41,  5,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  5, 25, 65,110,107, 62, 24,  6,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 44, 98,126,130,108, 97,\n   65, 24,  1,  0,  0,  0,  0,  1,  6, 14, 19, 20, 19, 16, 13, 10,  7,  4,\n    2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    4, 20, 73,115,116,110,108,108,109,105, 82, 44, 15,  2,  0,  0,  6, 44,\n  142, 48,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14, 81,124, 28,  1,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 13, 48,107,118, 78, 34, 10,  1,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14, 72,137,154,165,119,134,\n  118, 53,  5,  0,  0,  0,  0,  4, 29, 65, 87, 92, 89, 82, 74, 64, 54, 44,\n   27,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,\n   16, 71,154,150,112, 85, 73, 71, 79,101,129,109, 58, 18,  2,  0,  3, 28,\n  141, 59, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22,111, 97, 18,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 28, 87,126,103, 51, 13,\n    2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 13, 68,143,189,204,159,163,\n  146, 71, 10,  0,  0,  0,  0,  7, 63,147,196,201,201,205,208,201,192,172,\n  117, 43,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  2,  1,  1,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  3,  7, 10,\n   12, 12, 11,  7,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  5,\n    9, 10, 11, 10,  9,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,\n   32,136,219,214,186,158,137,121,107, 96, 88,117,117, 65, 15,  0,  2, 22,\n  136, 66, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 34,135, 66, 11,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 16, 58,110,120, 79,\n   27,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 16, 71,164,212,220,214,\n  158, 69, 11,  0,  0,  0,  0,  1, 47,125,149,115,106,135,194,199,206,206,\n  149, 55,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 26, 32, 30, 24, 17,\n   10,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 14, 39, 72, 98,\n  113,113,100, 67, 28,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 13, 53,\n   80, 92, 94, 94, 85, 52,  7,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    9, 53,161,221,212,162,115, 97,103,113, 76, 51,103,101, 46,  2,  2, 21,\n  134, 69, 16,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 49,143, 43,  6,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 12, 40, 84,116,\n  102, 50, 13,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 30, 91,135,131,106,\n   62, 22,  2,  0,  0,  0,  0,  1, 42,122,170,166,157,161,189,155,153,147,\n   97, 29,  1,  0,  0,  0,  0,  0,  0,  0,  1, 11, 71,142,164,162,149,126,\n   89, 29,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 21, 80,154,200,213,\n  218,214,207,167, 90, 20,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 61,142,\n  141,133,138,152,165,138, 52, 40, 31, 15,  3,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    1, 11, 55,138,194,199,154, 85, 34, 25, 18, 31, 94, 98, 46,  2,  2, 22,\n  135, 67, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 15, 67,136, 27,  3,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7, 29, 66,\n  103,111, 71, 29,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7, 24, 39, 35, 25,\n   12,  3,  0,  0,  0,  0,  0,  0, 19, 69,127,165,177,174,174,144,115, 77,\n   35,  7,  0,  0,  0,  0,  0,  0,  0,  0,  5, 38,150,197,216,226,227,214,\n  174, 75,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 40,126,209,231,223,\n  240,246,243,214,140, 51,  5,  0,  0,  0,  0,  0,  0,  0,  0,  9, 89,171,\n  159,158,175,184,179,159,116,123,106, 52,  9,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  1, 10, 50,110,161,170,129, 72, 52, 54, 79,112, 82, 28,  0,  3, 25,\n  139, 62, 13,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 24, 87,117, 17,  1,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 18,\n   51, 92,108, 86, 50, 21,  6,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  4, 21, 52, 86,108,114,106, 82, 53, 24,\n    6,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11, 69,197,209,218,231,233,209,\n  158, 75,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 38,125,212,235,225,\n  239,242,232,209,151, 70, 10,  0,  0,  0,  0,  0,  0,  0,  0,  7, 68,134,\n  150,174,203,204,174,147,142,157,128, 59,  9,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  1, 10, 35, 45, 47, 46, 39, 22,  3,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  8, 35, 78,113,122,107, 99, 99,105, 93, 48, 11,  0,  4, 31,\n  142, 55, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 35,105, 94, 11,  1,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,\n    9, 35, 79,106,105, 83, 48, 16,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  6, 17, 29, 36, 33, 19,  7,  1,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11, 69,181,194,195,195,175,130,\n   76, 36,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 21, 84,161,196,192,\n  189,178,160,138,101, 51,  8,  0,  0,  0,  0,  0,  0,  0,  0,  2, 26, 61,\n   89,123,155,163,142,122,122,122, 86, 34,  3,  0,  0,  0,  0,  0,  0,  0,\n    0,  3, 12, 29, 64,113,117,112,117,115, 83, 35,  7,  1,  0,  0,  0,  0,\n    0,  0,  0,  0,  3, 17, 39, 60, 73, 77, 76, 66, 42, 16,  1,  0,  5, 39,\n  144, 47,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 47,119, 70,  7,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  3, 24, 85,141,150,114, 61, 20,  3,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 35,106,131,132,118, 86, 44,\n   12,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 33, 77,105,104,\n   90, 74, 59, 44, 29, 13,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  5,\n   15, 34, 56, 71, 76, 75, 70, 55, 28,  8,  0,  0,  0,  0,  0,  0,  0,  0,\n    2, 20, 59,102,151,194,179,166,176,184,158, 98, 21,  3,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  2,  7, 13, 16, 15, 10,  4,  0,  0,  0,  8, 50,\n  142, 39,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 59,124, 49,  4,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    1,  8, 32, 91,137,145,135,115, 74, 30,  9,  2,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 20, 30, 32, 26, 15,  4,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 12, 18, 16,\n   12,  7,  3,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  1,  3,  7, 10, 12,  9,  4,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    6, 39,108,160,189,215,209,202,202,203,193,138, 27,  3,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 63,\n  136, 32,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 18, 73,121, 33,  2,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,\n   13, 44,114,129, 82, 43, 48, 91,131,116, 53, 19,  5,  1,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    1, 13, 37, 56, 75,146,189,198,190,178,148, 67,  9,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14, 78,\n  126, 26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 30, 87,108, 21,  1,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  8, 32,\n   80,135,111, 47, 14,  4,  5, 16, 45,102,140,101, 51, 18,  4,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  1,  3,  5,  9, 31, 56, 67, 65, 52, 31,  8,  1,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 92,\n  113, 21,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 42, 98, 91, 14,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 25, 62,104,\n  120, 80, 30,  9,  1,  0,  0,  1,  8, 24, 64,109,117, 89, 49, 19,  3,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  4,  8, 10, 10,  8,  4,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 18, 98,\n  107, 20,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 53,105, 75,  8,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 16, 48, 85,107, 99,\n   63, 23,  4,  0,  0,  0,  0,  0,  0,  2, 14, 44, 79,104,104, 79, 43, 13,\n    1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 93,\n  113, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 64,108, 61,  4,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 32, 71, 98,102, 80, 46,\n   15,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 25, 56, 86,103, 98, 69,\n   29,  7,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 13, 74,\n  129, 35,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 74,107, 48,  2,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 18, 50, 89,106, 94, 62, 28,  7,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 11, 33, 66, 96,107,\n   86, 50, 21,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7, 47,\n  132, 75, 29,  8,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0, 26, 82,102, 36,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  2, 12, 35, 70,106,110, 77, 40, 13,  2,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 14, 40, 78,\n  109,103, 72, 37, 13,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 20,\n   97,112, 82, 49, 25, 10,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0, 37, 90, 93, 26,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  1,  7, 23, 55, 96,122,100, 49, 17,  3,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 16,\n   50, 98,119, 98, 56, 22,  6,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,\n   33, 88,118,113, 86, 54, 29, 13,  5,  1,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  2, 49, 96, 83, 17,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  3, 13, 43, 93,127,115, 65, 21,  4,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    3, 22, 64,113,126, 91, 38, 10,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    2, 15, 44, 84,122,138,120, 75, 34, 14,  5,  1,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  5, 59, 99, 72, 10,  0,  0,  0,  0,  0,\n    0,  0,  2, 12, 39, 91,128,117, 72, 28,  8,  1,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  1,  8, 30, 75,121,129, 82, 34, 12,  3,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  1,  4, 11, 25, 51, 91,133,137, 96, 49, 17,  3,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0, 10, 68,100, 62,  5,  0,  0,  0,  0,  0,\n    5, 18, 43, 83,120,114, 76, 38, 14,  4,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  4, 16, 41, 80,120,117, 83, 50, 25,  9,  1,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  1,  3,  8, 18, 36, 70,111,117, 80, 31,  4,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0, 16, 76, 98, 52,  2,  0,  1,  6, 16, 32,\n   55, 81,105,111, 85, 49, 21,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  1,  7, 23, 51, 85,107,107, 90, 64, 38, 16,  4,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  4, 17, 46, 90,106, 70, 17,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0, 22, 84,102, 57, 22, 31, 46, 61, 75, 89,\n   99,100, 87, 60, 27,  7,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  1,  7, 28, 56, 81, 97,101, 93, 75, 51, 26, 10,\n    2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 45, 97, 92, 35,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0, 26, 92,123, 99, 78, 86, 95,100,100, 93,\n   79, 57, 32,  9,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 25, 49, 73, 92,102, 99, 83, 63,\n   42, 24, 11,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 21, 81, 98, 47,  1,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0, 21, 78,118,118,104, 97, 86, 72, 56, 38,\n   20,  7,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 16, 35, 61, 86,105,108,\n   98, 80, 60, 40, 24, 11,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 78, 99, 50,  2,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  7, 29, 48, 50, 41, 31, 20, 11,  4,  1,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  7, 20, 41, 68,\n   96,116,122,110, 86, 58, 35, 21, 12,  6,  2,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 28, 87, 97, 43,  1,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  2,  1,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  7,\n   16, 32, 56, 88,120,142,135,104, 68, 39, 20,  9,  4,  1,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n    1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  7, 59,105, 84, 23,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    1,  2,  5, 10, 19, 37, 67,105,132,137,116, 81, 45, 20,  7,  1,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  3,\n    3,  5,  6,  7,  8, 10, 11, 13, 15, 17, 19, 20, 21, 22, 22, 23, 23, 21,\n   20, 18, 15, 13, 10,  7,  5,  3,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  2, 36,102,100, 46,  4,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  1,  2,  5, 11, 21, 37, 61, 90,115,123,104, 69, 38, 17,  5,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  6, 17, 29, 38, 43, 47, 51, 54,\n   58, 62, 66, 71, 75, 80, 84, 89, 94,100,105,109,111,113,113,114,113,111,\n  107,102, 96, 89, 81, 73, 64, 56, 47, 34, 19,  7,  1,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  1, 19, 89,110, 64, 15,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  4, 13, 27, 47, 70, 96,110,102, 81, 53,\n   26,  7,  0,  0,  0,  0,  0,  1,  9, 28, 56, 82, 97,103,106,107,108,109,\n  109,109,108,107,105,102, 99, 97, 94, 90, 87, 84, 82, 80, 79, 79, 80, 81,\n   85, 89, 93, 98,102,106,108,110,108,101, 84, 55, 24,  4,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  1, 10, 66,116, 78, 27,  2,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  5, 17, 38, 64, 88,101,100,\n   82, 53, 21,  3,  0,  0,  1, 17, 50, 85,103,100, 88, 80, 76, 73, 70, 68,\n   65, 62, 59, 55, 52, 48, 44, 41, 37, 34, 30, 28, 25, 24, 23, 23, 24, 25,\n   28, 32, 36, 42, 48, 54, 60, 67, 75, 86,100,100, 74, 33,  5,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  8, 45,114, 94, 38,  6,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 11, 33, 59, 84,\n  100, 99, 75, 35,  6,  1, 14, 62,110,119, 87, 55, 34, 24, 19, 16, 14, 11,\n    9,  7,  6,  4,  3,  2,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  2,  4,  7, 11, 17, 30, 57, 89,104, 81, 34,  4,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  6, 35, 99,111, 47, 11,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  8, 26,\n   57, 92,112, 93, 42, 16, 49,124,153,102, 31,  5,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 37, 81,109, 85, 27,  3,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  4, 31, 89,139, 64, 14,  1,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,\n    8, 30, 72,121,107, 64,106,169,153, 65,  6,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 30, 80,120, 82, 21,  3,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  2, 24, 83,156,137, 24,  3,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  1, 12, 45,119,144,168,171,115, 33,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 23, 76,138, 77, 20,\n    2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  1, 18, 76,154,181, 96, 12,  1,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  1,  6, 32,109,172,153, 77, 12,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 18, 71,139, 77,\n   23,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  2, 19, 74,137,147, 83, 19,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  6, 53,129,116, 49,  3,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 19, 82,121,\n   73, 23,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,\n    8, 39, 92,129,114, 62, 19,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  3, 52,113, 84, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 29, 93,\n  107, 64, 18,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 24,\n   68,127,148,113, 56, 15,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0, 10, 77,106, 58,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 44,\n   98, 97, 52, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 22, 51, 90,\n  149,173,127, 60, 15,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  1, 23,105, 92, 36,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12,\n   59,101, 88, 36,  4,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 22, 48, 76,100,117,\n  161,135, 66, 18,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  4, 45,121, 70, 17,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,\n   21, 75,105, 79, 33, 23,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 20, 45, 76,100,107, 93, 70,\n   91, 55, 17,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  9, 80,116, 46,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    3, 35, 90,123,103, 79, 17,  7,  5,  4,  3,  3,  2,  2,  1,  1,  1,  1,\n    1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,\n    1,  1,  1,  2,  2,  3,  4,  7, 11, 20, 39, 75,111,118, 95, 58, 26,  9,\n   17,  7,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  2, 20,121, 88, 25,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  7, 57,136,179,128, 57, 43, 37, 32, 28, 25, 23, 20, 18, 16, 15, 14,\n   13, 13, 12, 11, 11, 11, 11, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12, 13,\n   14, 14, 16, 19, 22, 27, 34, 45, 65, 98,135,133, 94, 50, 20,  5,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  7, 46,142, 53,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  6, 57,136,174,153,144,143,143,143,141,139,137,134,129,124,119,115,\n  111,107,104, 99, 97, 95, 93, 92, 92, 92, 92, 93, 94, 96, 99,101,104,109,\n  114,119,126,132,136,141,143,143,135,111, 68, 33, 14,  5,  1,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0, 16, 87,121, 29,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    1, 26, 83,118, 76, 39, 39, 43, 48, 52, 57, 62, 66, 70, 74, 79, 83, 86,\n   89, 92, 96, 98,101,102,103,104,104,104,104,104,104,103,101, 98, 95, 91,\n   88, 83, 78, 73, 67, 61, 53, 44, 34, 22, 12,  4,  1,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  3, 31,124, 83, 16,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n   11, 60,102, 87, 26,  4,  4,  5,  7,  9, 11, 13, 15, 16, 18, 21, 22, 24,\n   25, 27, 28, 30, 31, 32, 33, 33, 33, 33, 33, 33, 33, 33, 31, 30, 28, 26,\n   25, 23, 20, 17, 15, 12,  9,  6,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0, 10, 54,137, 48,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,\n   36, 90, 98, 50,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0, 23, 82,124, 24,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14,\n   70,103, 74, 19,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    3, 40,109, 91, 11,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 40,\n  101, 93, 41,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n   10, 59,123, 55,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12, 79,\n  110, 64, 13,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n   24, 81,117, 29,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 37,119,\n   88, 30,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,\n   45,101, 91, 14,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 11, 87,118,\n   50,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,\n   64,108, 64,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 36,131, 77,\n   21,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 24,\n   80,104, 43,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 16, 80,125, 40,\n    6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 42,\n   93, 92, 26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 35,121, 86, 18,\n    1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7, 59,\n  100, 75, 13,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14, 63,135, 44,  7,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 16, 76,\n  100, 56,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 29, 94,114, 19,  2,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 30, 89,\n   93, 38,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 47,118, 77,  8,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 49, 98,\n   81, 21,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14, 67,125, 44,  4,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 67,101,\n   66,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 31, 89,110, 23,  1,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 19, 84, 96,\n   48,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 54,105, 82, 11,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 32, 98, 87,\n   32,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 78,107, 52,  4,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 48,107, 75,\n   19,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 49, 97, 91, 27,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 66,108, 62,\n    9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 23, 79,102, 62,  9,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11, 85,102, 48,\n    3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  7, 53,101, 88, 31,  1,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 19,104, 91, 34,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  1, 25, 89,102, 57,  8,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 31,120, 76, 21,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  6, 62,113, 78, 21,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 48,125, 61, 10,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  2, 27,110, 98, 40,  3,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7, 69,119, 47,  4,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  1, 10, 76,120, 61, 13,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 92,107, 36,  1,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  5, 35,122, 87, 29,  2,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 15,115, 89, 26,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  1, 19, 83,122, 47,  9,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 22,133, 71, 17,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0, 10, 49,123, 81, 18,  1,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 32,142, 55, 10,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  4, 32, 92,120, 34,  5,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7, 45,143, 43,  5,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  1, 19, 70,122, 70,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 59,138, 34,  2,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  9, 55,109,101, 22,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12, 72,129, 28,  1,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  6, 46,100,107, 43,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 15, 84,120, 23,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  5, 40, 94,105, 60, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 92,113, 21,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    3, 35, 89,106, 70, 21,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 96,109, 20,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,\n   29, 87,107, 75, 29,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 96,109, 20,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 26,\n   84,110, 77, 32,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 92,112, 21,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 26, 79,\n  120, 80, 30,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 15, 86,118, 23,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 27, 75,128,\n   83, 25,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 13, 77,126, 26,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 31, 84,129, 82,\n   18,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11, 66,134, 30,  1,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 38, 94,121, 76, 16,\n    2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 55,140, 35,  3,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 47, 98,110, 70, 21,  2,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7, 45,143, 42,  5,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 53,100,104, 67, 23,  3,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 37,144, 49,  8,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  1, 13, 57,102,102, 64, 23,  3,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 29,141, 57, 11,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  3, 19, 61,106, 99, 58, 21,  3,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 23,136, 66, 15,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  6, 27, 67,113,102, 49, 14,  2,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 18,128, 77, 19,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  2, 11, 37, 81,119,101, 38,  8,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 13,112, 92, 27,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  1,  5, 19, 58,107,124, 82, 24,  3,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 84,114, 43,  3,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  3, 14, 47, 98,126,104, 51, 13,  2,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 50,123, 69, 16,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  6,\n   20, 47, 89,120,109, 70, 31,  9,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 24,103,100, 48,\n    8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 13, 32, 58,\n   85,107,106, 78, 46, 19,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 62,106, 93,\n   56, 32, 18,  8,  3,  1,  0,  0,  0,  0,  1,  4, 11, 26, 47, 70, 90,101,\n  100, 82, 53, 24,  7,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 24, 74,101,\n  100, 86, 74, 63, 52, 45, 40, 37, 38, 40, 46, 54, 67, 82, 95,101, 96, 79,\n   54, 25,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 26, 58,\n   84, 99,106,108,105,100, 96, 94, 95, 97,101,106,108,103, 88, 67, 42, 20,\n    6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  8,\n   19, 33, 47, 61, 74, 85, 92, 95, 95, 91, 84, 72, 56, 39, 22, 10,  2,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  2,  4,  8, 11, 14, 15, 15, 14, 11,  7,  3,  1,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0],\n [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0]];\n\n/**\n * return the p5 sketch for the SmartCanvas\n */\nexport function getSketch(shape, smartCanvasRef) {\n  let dirty = false;\n  return (p) => {\n    p.setup = () => {\n      p.pixelDensity(1);\n      const [ w, h ] = shape;\n      p.createCanvas(w, h);\n      p.strokeWeight(2);\n\n      // p.loadPixels();\n      // for (let y = 0; y < imgArr.length; y += 1) {\n      //   for (let x = 0; x < imgArr[0].length; x += 1) {\n      //     const v = imgArr[y][x];\n      //     if (v >= 0) {\n      //       if (x - 20 >= 0 && y - 50 >= 0) {\n      //         p.set(x - 20, y - 50, p.color(0, 0, 0, v));\n      //       }\n      //     }\n      //   }\n      // }\n      // p.updatePixels();\n    };\n\n    p.draw = () => {\n      if (p.mouseIsPressed) {\n        // while mouse is pressed, add line segments to canvas\n        const start = { x: p.pmouseX, y: p.pmouseY };\n        const end = { x: p.mouseX, y: p.mouseY };\n        if (!(start.x < 0 || start.y < 0 || end.x < 0 || end.y < 0 || end.x >= p.width || start.x >= p.width || end.y >= p.height || start.y >= p.height)) {\n          // clear cache on draw (multiple new lines and new rotations will degrade image, but can clear)\n          if (p._rotationCache) {\n            p._rotationCache = null;\n          }   // draw new line\n          smartCanvasRef.current.addSegment(start, end);\n          dirty = true;\n        }\n      } else {\n        // at end of mouse press, update LineInfo\n        if (dirty) {\n          smartCanvasRef.current.update();\n          dirty = false;\n        }\n      }\n    };\n\n    p.setRotation = rotation => {\n      // we store the image since redraws will degrade (clears on draw)\n      if (!p._rotationCache) {\n        p._rotationCache = p.get();\n      }\n      p.clear();\n      p.push();\n      p.angleMode(p.DEGREES);\n      console.log(rotation, p._rotationCache);\n\n      p.translate(p.width / 2, p.height / 2);\n      p.rotate(rotation);\n      p.translate(-p.width / 2, -p.height / 2);\n\n      p.image(p._rotationCache, 0, 0);\n      p.pop();\n    };\n  };\n}\n","import nj from 'numjs';\n\n// some good contrast colors to start\nconst colors = ['#e6194b', '#3cb44b', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075'];\n// save colors so that they are consistent between renders\nconst colorMap = {};\n\n/**\n * Returns a p5 sketch that can draw a 2D array\n */\nexport function getSketch(kernels) {\n  // spacing between rectangles\n  let ids = null;\n  let max = null;\n  let scale = 1;\n  let needsRefresh = false;\n  let drawWindow = true;\n  const zoomWindow = 4;\n\n  return (p) => {\n    p.setData = (_ids, _max, _scale=1) => {\n      // save the data for rendering in draw loop\n      ids = _ids;\n      // normalize max 2d array\n      let maxMax = Math.max(..._max.flat());\n      max = _max.map(row => row.map(v => v / maxMax));\n      scale = _scale;\n      needsRefresh = true;\n    }\n\n    p.setKernels = kernels => {\n      // create images based on kernels so we dont have to recalculate\n      p._kernelCache = [];\n      for (const kernel of kernels) {\n        const icon = p._getIcon(kernel);\n        p._kernelCache.push(icon);\n      }\n    }\n\n    p.setup = () => {\n      p.pixelDensity(1);\n      p.createCanvas(300, 300);\n      p.stroke(255);\n      p.noSmooth();\n\n      p._colorCodedGraphics = p.createGraphics(300, 300);\n    };\n\n    p.draw = () => {\n      if (ids && max) {\n        // check if we need to resize\n        const h = ids.length * scale;\n        const w = ids[0].length * scale;\n        if (h !== p.height || w !== p.width) {\n          p.resizeCanvas(w, h);\n          p._colorCodedGraphics = p.createGraphics(ids[0].length, ids.length);\n        }\n\n        // check if mouse is in canvas (with padding of zoomWindow)\n        const x = Math.floor(p.mouseX / scale);\n        const y = Math.floor(p.mouseY / scale);\n        const zoomScale = scale * 6;\n        const isMouseInBounds = p._isMouseInBounds();\n        if (isMouseInBounds && drawWindow) {\n          // if so, we need to redraw with overlay\n          p.clear();\n          p._drawBackground(ids, max, scale);\n\n          // get zoomed in version\n          const bounds = [\n            Math.max(0, x - zoomWindow),\n            Math.max(0, y - zoomWindow),\n            Math.min(w / scale, x + zoomWindow + 1),\n            Math.min(h / scale, y + zoomWindow + 1)\n          ];\n          const [ x0, y0, x1, y1 ] = bounds;\n          const slice_ids = nj.array(ids).slice([y0, y1], [x0, x1]).tolist();\n          const slice_max = nj.array(max).slice([y0, y1], [x0, x1]).tolist();\n\n          // draw zoomed in version as overlay\n          p.push();\n          p.translate((x * scale) - ((zoomWindow + 0.5) * zoomScale), (y * scale) - ((zoomWindow + 0.5) * zoomScale));\n          // blank out background\n          p.push();\n          p.fill(255);\n          p.noStroke();\n          p.rect(0, 0, slice_ids[0].length * zoomScale, slice_ids.length * zoomScale);\n          p.pop();\n          // draw zoom\n          p._drawIconArray(slice_ids, slice_max, zoomScale);\n          // draw outline\n          p.push();\n          p.noFill();\n          p.strokeWeight(1);\n          p.stroke('#b2b2b2');\n          p.rect(0, 0, slice_ids[0].length * zoomScale, slice_ids.length * zoomScale);\n          p.pop();\n          // outline the center of the zoom\n          p.push();\n          p.noFill();\n          p.stroke('#b2b2b2');\n          p.strokeWeight(1);\n          p.rect(zoomWindow * zoomScale, zoomWindow * zoomScale, zoomScale, zoomScale);\n          p.pop();\n          p.pop();\n\n          needsRefresh = true;\n        } else {\n          // Only redraw once when zoom leaves, because then it is static\n          if (needsRefresh) {\n            p.clear();\n            p._drawBackground(ids, max, scale);\n            needsRefresh = false;\n          }\n        }\n      }\n    };\n\n    // check if legal mouse position\n    p._isMouseInBounds = () => {\n      const h = p.height;\n      const w = p.width;\n      const x = p.mouseX;\n      const y = p.mouseY;\n      const pad = zoomWindow * scale;\n      return x > pad && y > pad && x < w - pad && y < h - pad;\n    }\n\n    p.mouseClicked = () => {\n      if (ids && scale) {\n        if (p._isMouseInBounds()) {\n          const x = Math.floor(p.mouseX / scale);\n          const y = Math.floor(p.mouseY / scale);\n          if (p._onSelect) {\n            p._onSelect({ x, y });\n            // close zoom window for a brief moment like a camera shutter\n            drawWindow = false;\n            setTimeout(() => {\n              drawWindow = true;\n            }, 150);\n          }\n          p._pt = { x, y };\n        }\n      }\n    };\n\n    p._drawBackground = (ids, max, scale=1) => {\n      const g = p._colorCodedGraphics;\n      g.clear();\n      g.loadPixels();\n      for (let y = 0; y < ids.length; y += 1) {\n        for (let x = 0; x < ids[0].length; x += 1) {\n          // for performance reasons only draw ones that are dark enough\n          if (max[y][x] >= 0.1) {\n            let key = ids[y][x];\n            if (key >= 0) {\n              let c = p._getColor(key);\n              c.setAlpha(max[y][x] * 255);\n              g.set(x, y, c);\n            }\n          }\n        }\n      }\n      g.updatePixels();\n      p.push();\n      p.scale(scale);\n      p.image(g.get(), 0, 0);\n      p.pop();\n\n      if (p._pt) {\n        const { x, y } = p._pt;\n        // draw triangle\n        // p.push();\n        // p.scale(scale);\n        // p.fill(0);\n        // p.noStroke();\n        // const zoomScale = 6 / scale;\n        // p.translate(0.5, 0);\n        // p.triangle(x, y, x + (zoomScale * 0.75), y - (zoomScale * 2), x - (zoomScale * 0.75), y - (zoomScale * 2));\n        // p.pop();\n\n\n        // draw selected point\n        const key = ids[y][x];\n        const intensity = max[y][x];\n        const rectScale = 10;\n\n        p.push();\n        p.translate(((x + 0.5) - (rectScale / 2)) * scale, ((y + 0.5) - (rectScale / 2)) * scale);\n        if (intensity > 0.1) {\n          p.fill(255);\n          p.noStroke();\n          p.rect(0, 0, scale * rectScale, scale * rectScale);\n          const kernel = p._kernelCache[key];\n          // p.tint(255, intensity * 255 * );\n          p.image(kernel, 0, 0, scale * rectScale, scale * rectScale);\n          p.noFill();\n          p.stroke(0);\n          p.rect(0, 0, scale * rectScale, scale * rectScale);\n        } else {\n          p.fill(255);\n          p.stroke(0);\n          p.rect(0, 0, scale * rectScale, scale * rectScale);\n        }\n        p.pop();\n\n        // const c = (intensity > 0.1) ? p._getColor(key) : p.color(255, 255, 255);\n        // const rectScale = 5;\n        // c.setAlpha(255);\n        // p.push();\n        // p.fill(c);\n        // p.stroke(0);\n        // p.translate(((x + 0.5) - (rectScale / 2)) * scale, ((y + 0.5) - (rectScale / 2)) * scale);\n        // p.rect(0, 0, scale * rectScale, scale * rectScale);\n        // p.pop();\n\n\n      }\n    };\n\n    p._drawIconArray = (ids, max, scale=1) => {\n      for (let y = 0; y < ids.length; y += 1) {\n        for (let x = 0; x < ids[0].length; x += 1) {\n          let intensity = max[y][x];\n          if (intensity > 0.1) {\n            let key = ids[y][x];\n            if (key >= 0) {\n              const kernel = p._kernelCache[key];\n              p.push();\n              p.tint(255, intensity * 255);\n              p.image(kernel, x * scale, y * scale, scale, scale);\n              p.pop();\n            }\n          }\n        }\n      }\n    };\n\n    p._getColor = i => {\n      let c = colorMap[i];\n      if (!c) {\n        if (colors[i]) {\n          c = p.color(colors[i]);\n        } else {\n          c = p.color([ Math.random() * 155, Math.random() * 155, Math.random() * 155 ]);\n        }\n        colorMap[i] = c;\n      }\n      return c;\n    };\n\n    p._getIcon = imgArr => {\n      const kernelSize = imgArr.length;\n      const g = p.createGraphics(kernelSize, kernelSize);\n      // normalize to max value (positive or negative)\n      const flatArr = imgArr.flat();\n      let max = Math.max(...flatArr);\n      max = max > 0 ? max : -Math.min(...flatArr);\n      imgArr = imgArr.map(row => row.map(v => v / max));\n\n      g.loadPixels();\n      for (let y = 0; y < imgArr.length; y += 1) {\n        for (let x = 0; x < imgArr[0].length; x += 1) {\n          const v = imgArr[y][x] * 255;\n          if (v > 0) {\n            g.set(x, y, p.color(0, 0, 0, v));\n          } else if (v < 0) {\n            g.set(x, y, p.color(214, 30, 30, -v * 0.75));\n          }\n        }\n      }\n      g.updatePixels();\n      return g.get();\n    };\n  };\n}\n","import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport p5 from 'p5';\nimport { getSketch } from '../../js/sketches/colorCodedMapSketch';\n\nconst KernelInspectorColorCodedMap = props => {\n  const { kernels, pt, ids, max, scale, onSelect } = props;\n  const imgRef = useRef(null);\n  const pRef = useRef(null);\n\n  useEffect(() => {\n    if (imgRef.current) {\n      imgRef.current.innerHTML = '';\n      pRef.current = new p5(getSketch(), imgRef.current);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (pRef.current) {\n      pRef.current.setKernels(kernels);\n    }\n  }, [ kernels ]);\n\n  useEffect(() => {\n    if (pRef.current) {\n      pRef.current._pt = pt;\n    }\n  }, [ pt ]);\n\n  useEffect(() => {\n    if (pRef.current && ids && max) {\n      pRef.current.setData(ids, max, scale);\n    }\n  }, [ ids, max, scale ]);\n\n  useEffect(() => {\n    if (pRef.current) {\n      pRef.current._onSelect = onSelect;\n    }\n  }, [ onSelect ]);\n\n  return (\n    <div ref={imgRef} className=\"zoom300\"></div>\n  );\n};\n\nKernelInspectorColorCodedMap.propTypes = {\n  ids: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  max: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  kernels: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n  scale: PropTypes.number,\n  pt: PropTypes.object,\n  onSelect: PropTypes.func,\n};\n\nexport default KernelInspectorColorCodedMap;\n","import * as d3 from 'd3';\n\n// render the kernels using d3 on top of the x bars\nfunction renderKernelsOnBars(el, x, kernels) {\n  // flatten kernels into a data set with each individual weight as an entry\n  const flatKernelData = [];\n  kernels.forEach((kernel, i) => {\n    // normalize\n    let max = Math.max(...kernel.map(row => Math.max(...row.map(v => Math.abs(v)))));\n    kernel.forEach((row, rIndex) => row.forEach((v, colIndex) => {\n      flatKernelData.push({ kIndex: i, row: rIndex, col: colIndex, v: v / max });\n    }));\n  });\n\n  // render flat kernel data\n  const weightPixels = el.append('g').selectAll('.pixel').data(flatKernelData).enter();\n  const pixelSize = x.bandwidth() / kernels[0].length;\n  weightPixels.append('rect')\n    .attr('fill', d => {\n      if (d.v >= 0) {\n        return 'rgba(0, 0, 0, ' + (d.v) + ')';\n      } else {\n        return 'rgba(214, 30, 30, ' + (-d.v * 0.75) + ')';\n      }\n    })\n    .style('stroke-width', 0)\n    .attr('x', d => x(d.kIndex) + (pixelSize * d.col))\n    .attr('y', d => (pixelSize * d.row))\n    .attr('height', pixelSize)\n    .attr('width', pixelSize);\n\n  // render outlines of kernels\n  const kernelOutlines = el.append('g').selectAll('.outline').data(kernels).enter();\n  kernelOutlines.append('rect')\n    .attr('x', (d, i) => x(i))\n    .attr('y', 0)\n    .attr('height', x.bandwidth())\n    .attr('width', x.bandwidth())\n    .style('stroke', '#b2b2b2')\n    .style('fill', 'none')\n    .style('stroke-width', 1);\n}\n\n// render bar chart of activations with the kernel icon on top of each bar\nexport function renderChart(el, kernels, acts) {\n  // format data for d3\n  const data = acts.map((act, i) => ({ name: i, value: act / 255 }));\n\n  // setup styles\n  const margin = {top: 4, right: 4, bottom: 4, left: 4};\n  const width = el.offsetWidth - margin.left - margin.right;\n  const height = width * 0.5;\n\n  // setup bands\n  const x = d3.scaleBand()\n    .domain(data.map(d => d.name))\n    .range([margin.left, width - margin.right])\n    .padding(0.1);\n  const y = d3.scaleLinear()\n    .domain([0, 1])\n    .range([height - margin.bottom, margin.top + x.bandwidth()]);\n\n  // create parent el\n  const svg = d3.select(el).append('svg')\n    .attr('width', width)\n    .attr('height', height);\n\n  // draw bars\n  const bars = svg.append('g').selectAll('.bar').data(data).enter();\n  bars.append('rect')\n      .attr('fill', '#e0e0e0')\n      .attr('stroke', '#b2b2b2')\n      .style('stroke-width', 1)\n      .attr('x', d => x(d.name))\n      .attr('y', d => y(d.value ? d.value : 0))\n      .attr('height', d => y(0) - y(d.value ? d.value : 0))\n      .attr('width', x.bandwidth())\n  bars.exit().remove();\n  renderKernelsOnBars(svg, x, kernels);\n\n  // draw x axis ticks\n  const xAxis = g => g\n    .attr('transform', `translate(0,${height - margin.bottom})`)\n    .attr('color', '#b2b2b2')\n    .call(d3.axisBottom(x).tickSize(0));\n  svg.append('g')\n    .style('font-size', '0')\n    .call(xAxis);\n\n  // // draw y axis percent labels\n  // const yAxis = g => g\n  //   .attr('transform', `translate(${margin.left},0)`)\n  //   .call(d3.axisLeft(y).tickFormat(d3.format('.0%')))\n  //   .call(g => g.select('.domain').remove());\n  // svg.append('g')\n  //   .style('font-size', '10px')\n  //   .call(yAxis);\n\n  return svg.node();\n}\n","import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { renderChart } from '../../js/charts/activationChart';\n\nconst KernelInspectorActivationChart = props => {\n  const chartRef = useRef(null);\n\n  const { kernels, acts } = props;\n  useEffect(() => {\n    // clear the previous chart\n    chartRef.current.innerHTML = '';\n    if (kernels && acts) {\n      renderChart(chartRef.current, kernels, acts);\n    }\n  }, [ kernels, acts ]);\n\n  return (\n    <div ref={chartRef} style={props.style}></div>\n  );\n};\n\nKernelInspectorActivationChart.propTypes = {\n  kernels: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))).isRequired,\n  acts: PropTypes.arrayOf(PropTypes.number),\n};\n\nexport default KernelInspectorActivationChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Array2DViewList from '../UI/Array2DViewList';\n\n// Renders two lists of 2D arrays as p5 sketches with one overlaid and transparent\nconst Array2DViewOverlayList = props => {\n  const { imgArrs, imgArrsOverlay, scale, overlayOpacity } = props;\n  return (\n    <div style={{ ...props.style, position: 'relative' }}>\n      <Array2DViewList\n        imgArrs={imgArrs}\n        scale={scale}\n      />\n      <Array2DViewList\n        imgArrs={imgArrsOverlay}\n        scale={scale}\n        style={{ position: 'absolute', top: '4px', opacity: overlayOpacity || 0.75 }}\n      />\n    </div>\n  );\n}\n\nArray2DViewOverlayList.propTypes = {\n  imgArrs: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n  imgArrsOverlay: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n  scale: PropTypes.number,\n  overlayOpacity: PropTypes.number,\n};\n\nexport default Array2DViewOverlayList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport KernelInspectorActivationChart from './KernelInspectorActivationChart';\nimport Array2DViewOverlayList from '../UI/Array2DViewOverlayList';\nimport nj from 'numjs';\n\n// get indices of kernels with top activations\nfunction selectTopIndices(acts, count) {\n  return acts.map((s, i) => [i, s]).sort((a, b) => (a[1] > b[1]) ? -1 : 1).slice(0, count).map(d => d[0]);\n}\n\nfunction getImgArrAtPt(imgArr, pt, pad) {\n  const { x, y } = pt;\n  const bounds = [ x - pad, y - pad, x + pad + 1, y + pad + 1 ];\n  const [ x0, y0, x1, y1 ] = bounds;\n  if (x0 < 0 || y0 < 0 || x1 > imgArr[0].length || y1 > imgArr.length) {\n    return null;\n  }\n  const imgArrSlice = nj.array(imgArr).slice([y0, y1], [x0, x1]).tolist();\n  return imgArrSlice;\n}\n\nconst KernelInspectorViewOutputAtPoint = props => {\n  let { acts, kernels, count, imgArr, pt } = props;\n\n  if (!acts || !pt || !kernels || kernels.length !== acts.length) {\n    return null;\n  }\n\n  // select the activations and img data at the selected pt\n  const { x, y } = pt;\n  let actsAtPt = acts.map(channel => channel[y][x]);\n  const pad = (kernels[0].length - 1) / 2;\n  const imgArrAtPt = getImgArrAtPt(imgArr, pt, pad);\n\n  // get the indices of the top activations at the given pt\n  const top = selectTopIndices(actsAtPt, count);\n\n  // map the top indices to the corresponding activations and kernels\n  kernels = top.map(i => kernels[i]);\n  actsAtPt = top.map(i => actsAtPt[i]);\n\n  const ptDisplay = `(${pt.x}, ${pt.y})`;\n\n  return (\n    <div style={{ width: '200px' }}>\n      <div>\n        <KernelInspectorActivationChart kernels={kernels} acts={actsAtPt} style={{ margin: '10px auto' }}/>\n        <div style={{ margin: '5px 0 25px 0', textAlign: 'center' }}>\n          Top activations at {ptDisplay}\n        </div>\n      </div>\n      { imgArrAtPt &&\n        <div>\n          <Array2DViewOverlayList\n            imgArrs={new Array(kernels.length).fill(imgArrAtPt)}\n            imgArrsOverlay={kernels}\n            scale={4.5}\n            overlayOpacity={0.8}\n            style={{ margin: '10px auto' }}\n          />\n          <div style={{ margin: '10px 0', textAlign: 'center' }}>\n            Kernel overlays at {ptDisplay}\n          </div>\n        </div>\n      }\n    </div>\n  );\n};\n\nKernelInspectorViewOutputAtPoint.propTypes = {\n  acts: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n  kernels: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n  imgArr: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  pt: PropTypes.object,\n  count: PropTypes.number.isRequired,\n};\n\nexport default KernelInspectorViewOutputAtPoint;\n","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport KernelInspectorColorCodedMap from './KernelInspectorColorCodedMap';\nimport KernelInspectorViewOutputAtPoint from './KernelInspectorViewOutputAtPoint';\n\nfunction KernelInspectorViewOutput(props) {\n  const { data, kernels, defaultPt } = props;\n  // store selected point on color-coded map\n  const [ pt, setPt ] = useState(defaultPt);\n\n  // format data coming from network on updates\n  const { imgArr, acts, max, ids } = useMemo(() => {\n    if (data && data.network) {\n      const { acts: imgArr } = data.network.getOutput(-1); // get input\n      const { acts, max, ids } = data.network.getOutput(0); // get output\n      // unwrap ndarrays into arrays\n      return { imgArr: imgArr.tolist()[0], acts: acts.tolist(), max: max.tolist(), ids: ids.tolist() };\n    }\n    return {};\n  }, [ data ]);\n\n  return (\n    <Grid container spacing={4} justify=\"center\" style={props.style}>\n      <Grid item>\n        <div>\n          <KernelInspectorColorCodedMap\n            kernels={kernels}\n            max={max}\n            ids={ids}\n            scale={3}\n            onSelect={setPt}\n            pt={pt}\n          />\n          <div style={{ textAlign: 'center' }}>\n            <div style={{ marginTop: '10px' }}>Select to inspect</div>\n          </div>\n        </div>\n      </Grid>\n      <Grid item>\n        <KernelInspectorViewOutputAtPoint\n          kernels={kernels}\n          imgArr={imgArr}\n          acts={acts}\n          pt={pt}\n          count={Math.min(8, kernels.length)}\n          style={{ width: '400px' }}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n\nKernelInspectorViewOutput.propTypes = {\n  data: PropTypes.object.isRequired,\n  kernels: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))).isRequired,\n  defaultPt: PropTypes.object.isRequired,\n};\n\nexport default KernelInspectorViewOutput;\n","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport KernelInspectorDrawingInput from './KernelInspectorDrawingInput';\nimport KernelInspectorViewOutput from './KernelInspectorViewOutput';\nimport { getKernels } from '../../js/kernel';\n\n// shape of the drawing area\nconst shape = [ 100, 100 ];\n// const shape = [ 256, 256 ];\nconst defaultPt = { x: Math.floor(shape[0] / 2) - 1, y: Math.floor(shape[1] / 2) - 1 }\n\nfunction KernelInspector(props) {\n  // store up-to-date data from network, use this object to trigger updates\n  const [ data, setData ] = useState(null);\n\n  // get the kernels\n  const { numComponents, lambda, sigma, windowSize, types } = props.kernelSettings;\n  const kernels = useMemo(() => {\n    return getKernels(windowSize, 2 ** numComponents, lambda, sigma, types);\n  }, [ numComponents, lambda, sigma, windowSize, types ]);\n\n  return (\n    <div style={props.style}>\n      <Grid container spacing={4} justify=\"center\">\n        <Grid item>\n          <KernelInspectorDrawingInput\n            kernels={kernels}\n            shape={shape}\n            onUpdate={setData}\n          />\n        </Grid>\n        <Grid item>\n          { data && <KernelInspectorViewOutput kernels={kernels} data={data} defaultPt={defaultPt} /> }\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nKernelInspector.propTypes = {\n  kernelSettings: PropTypes.object.isRequired,\n};\n\nexport default KernelInspector;\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst imgSectionStyle = {\n  textAlign: 'center',\n  margin: '40px 0'\n};\n\nconst HtmlTooltip = withStyles(theme => ({\n  tooltip: {\n    backgroundColor: '#e0e0e0',\n    maxWidth: 300,\n    fontSize: '16px',\n    border: '1px solid #b2b2b2',\n    color: '#000',\n    borderRadius: 0,\n    padding: '4px'\n  },\n}))(Tooltip);\n\nconst citations = [\n  '[1] J. P. Jones and L. A. Palmer, “An evaluation of the two-dimensional Gabor filter model of simple receptive fields in cat striate cortex,” Journal of neurophysiology, vol. 58, no. 6, pp. 1233–1258, 1987.',\n  '[2] R. Mehrotra, K. R. Namuduri, and N. Ranganathan, “Gabor filter-based edge detection,” Pattern recognition, vol. 25, no. 12, pp. 1479–1494, 1992.',\n  '[3] J. Wang, Z. Zhang, C. Xie, V. Premachandran, and A. Yuille, “Unsupervised learning of object semantic parts from internal states of CNNs by population encoding,” arXiv:1511.06855 [cs], Nov. 2016.',\n  '[4] K. Greff, R. K. Srivastava, and J. Schmidhuber, “Highway and Residual Networks learn Unrolled Iterative Estimation,” arXiv:1612.07771 [cs], Mar. 2017.',\n  '[5] C. Olah, A. Mordvintsev, and L. Schubert, “Feature Visualization,” Distill, vol. 2, no. 11, p. e7, Nov. 2017, doi: 10.23915/distill.00007.',\n  '[6] Q. Yu, Y. Yang, F. Liu, Y.-Z. Song, T. Xiang, and T. M. Hospedales, “Sketch-a-net: A deep neural network that beats humans,” International journal of computer vision, vol. 122, no. 3, pp. 411–425, 2017.',\n  '[7] I. Shafkat, “Intuitively Understanding Convolutions for Deep Learning,” Medium, 07-Jun-2018. [Online]. Available: https://towardsdatascience.com/intuitively-understanding-convolutions-for-deep-learning-1f6f42faee1. [Accessed: 07-Feb-2020].',\n  '[8] E. Ulberg, “Visual Concepts in Sketch-A-Net,” Dec-2019. [Online]. Available: https://ulberge.github.io/SketchANetClustering/.',\n];\n\nfunction CitationGenerator(citations) {\n  const fns = citations.map((citation, i) => {\n    return () => (\n      <HtmlTooltip title={<React.Fragment>{citation}</React.Fragment>} interactive>\n        <Button style={{ padding: 0, minWidth: 0, height: 0 }}><span style={{ color: '#1f7e9b' }}>[{i + 1}]</span></Button>\n      </HtmlTooltip>\n    )\n  });\n  return i => fns[i-1]();\n}\n\nfunction KernelTunerAboutText(props) {\n  const cite = CitationGenerator(citations);\n\n  return (\n    <div>\n      <p><i>The <b>kernel tuner</b> is a parametric tool that makes kernels for detecting important features in a line drawing.</i></p>\n\n      <h4>Example usage</h4>\n      <p>How is the kernel tuner used?</p>\n      <p>Let’s say I care about line drawings of boxes. First, I might draw a box in the test area. A box is made up of horizontal/vertical lines and corners at 90 degrees. So, I would select the line and corner types and limit the angles to two. This yields kernels that match the elements of a box. When applied to the drawing, the six kernels neatly label the parts of the box.</p>\n\n      <div style={imgSectionStyle}>\n        <img\n          src=\"./imgs/tuner/scrn0.png\" alt=\"Kernel Tuner screenshot of making kernels\"\n          style={{ height: '150px', marginRight: '20px' }}\n        />\n        <img\n          src=\"./imgs/tuner/name3.png\" alt=\"6 Kernels\"\n          style={{ height: '150px', marginRight: '20px' }}\n        />\n        <img\n          src=\"./imgs/tuner/box.png\" alt=\"a box drawing\"\n          style={{ height: '120px', marginBottom: '15px' }}\n        />\n        <img\n          src=\"./imgs/tuner/names0.png\" alt=\"Activations (0) for box\"\n          style={{ height: '100px', marginBottom: '25px' }}\n        />\n      </div>\n\n      <p>Adjusting the size of the kernels, the width of the sine wave or the radius of the 2D Gaussian changes the character of the kernels. The different kernels yield different readings of the same box.</p>\n\n      <div style={imgSectionStyle}>\n        <img\n          src=\"./imgs/tuner/k04.png\" alt=\"Sample kernels with different settings\"\n          style={{ height: '100px', marginRight: '20px' }}\n        />\n        <img\n          src=\"./imgs/tuner/out1.png\" alt=\"thin output\"\n          style={{ height: '75px', marginBottom: '12px' }}\n        />\n        <img\n          src=\"./imgs/tuner/out2.png\" alt=\"med output\"\n          style={{ height: '75px', marginBottom: '12px' }}\n        />\n        <img\n          src=\"./imgs/tuner/out4.png\" alt=\"thick output\"\n          style={{ height: '75px', marginBottom: '12px' }}\n        />\n        <div style={{ textAlign: 'center' }}>\n          <small>(1) Different kernels that can be produced. (2) A variety of outputs.</small>\n        </div>\n      </div>\n\n      <p>The tool can also be used to check how robust the kernels are to rotation. A slider rotates the images and recalculates the activations in real time.</p>\n\n      <div style={imgSectionStyle}>\n        <img\n          src=\"./imgs/tuner/rot.png\" alt=\"Kernel Tuner screenshot of rotation\"\n          style={{ height: '300px' }}\n        />\n      </div>\n\n      <p>The square above is no longer well matched by the kernels generated. There are blank spaces and poorly matched labels along the lines. To help diagnose what is going wrong, the tool provides information when the user hovers over a location. On click, the tool shows a chart of the top activations at the location and what the kernels look like as overlays at that point.</p>\n\n      <div style={imgSectionStyle}>\n        <img\n          src=\"./imgs/tuner/selection.png\" alt=\"Kernel Tuner screenshot of selection\"\n          style={{ height: '300px' }}\n        />\n      </div>\n\n      <p>After inspection, we can see that our filters are quite relaxed. The corner is matching a corner at a different angle with high activation. We may want this, or we may want to increase the size of the Gaussian to make the filters more strict. Or, we can increase the angle setting to ‘4’ to better match the corner.</p>\n\n      <div style={imgSectionStyle}>\n        <img\n          src=\"./imgs/tuner/angles4.png\" alt=\"Kernel Tuner screenshot of more angles provided\"\n          style={{ height: '300px' }}\n        />\n      </div>\n\n      <h4>Abstraction through convolution</h4>\n\n      <p>(<i>Note: A “kernel” is a 2D matrix of weights. A “filter” is a stack of kernels, with one kernel for each input channel. Since the first layer of a black and white image has only one channel, each filter has one kernel and we can use filter and kernel interchangeably.</i>)</p>\n\n      <p>The kernel tuner produces kernels that translate an image from pixel values to higher order features such as lines, line ends, corners, T, X and Y-intersections. It does this through a process called convolution in which the kernels are applied as sliding windows across an image.</p>\n\n      <div style={imgSectionStyle}>\n        <img\n          src=\"./imgs/tuner/slidingwindow.gif\" alt=\"sliding window animation for convolutions\"\n          style={{ height: '200px' }}\n        />\n        <div style={{ textAlign: 'center' }}>\n          <small>(1) The sliding window of a convolution {cite(1)}.</small>\n        </div>\n      </div>\n\n      <p>After these kernels are applied, each pixel location is given a more meaningful name like “vertical line” or “T-intersection at 45 degrees.” In reality, they are being given values corresponding to each name, but we can think of the channel with the highest value as the locations assigned name.</p>\n\n      <div style={imgSectionStyle}>\n        <img\n          src=\"./imgs/tuner/name2.png\" alt=\"line drawing of a box\"\n          style={{ height: '40px', marginBottom: '80px', marginRight: '40px' }}\n        />\n        <img\n          src=\"./imgs/tuner/name3.png\" alt=\"6 kernels for a box line drawing\"\n          style={{ height: '200px', marginRight: '40px' }}\n        />\n        <img\n          src=\"./imgs/tuner/name0.png\" alt=\"graphics of max activations for a box line drawing\"\n          style={{ height: '200px' }}\n        />\n        <div style={{ textAlign: 'center' }}>\n          <small>(1) Raw pixel data. (2) Set of kernels. (3) Map of maximum activations.</small>\n        </div>\n      </div>\n\n      <p>By extracting this information, we can interact with the canvas at a higher level of abstraction. Convolutional neural networks use this process to classify images as abstract entities. The prevailing wisdom is that each layer of a network produces a higher order of information than the previous layer {cite(5)}. This may or may not be the case, but it is at least a useful starting point for thinking about how networks learn {cite(4)}.</p>\n\n      <p>At the first layer, filters function as templates. They may be fuzzy, but they match a narrow range of pixel arrangements. After multiple layers the filters no longer correspond to templates. The network can match a visual object at different scales, rotations, or individual expressions (to some extent). It should be noted that if something can be matched with a template, it only requires one layer of convolution. If an object is abstract (i.e. it can take a variety of forms), then the network must flexibly encode the visual concept through multiple layers.</p>\n\n      <div style={imgSectionStyle}>\n        <img\n          src=\"./imgs/tuner/match2.png\" alt=\"line drawing of a corner\"\n          style={{ height: '80px' }}\n        />\n        <img\n          src=\"./imgs/tuner/match0.png\" alt=\"6 kernel overlays of corner line drawing\"\n          style={{ height: '80px' }}\n        />\n        <div style={{ textAlign: 'center' }}>\n          <small>(1) Kernels overlaid on corner.</small>\n        </div>\n      </div>\n\n      <h4>Background</h4>\n      <p>The patterns for the kernels produced by this tool are inspired by Gabor filters. Gabor filters are kernels created using a 2D Gaussian function applied to a sine wave {cite(2)}. They are useful for edge detection (or in this case, line detection). A study by Jones and Palmer demonstrated that 2D Gabor filters provide similar performance to the simple receptive fields in a mammalian visual cortex {cite(1)}. As further demonstration of their representational capacity, a convolutional neural network trained on a dataset of line drawings learned filters that looked eerily similar to Gabor filters {cite(6)}.)</p>\n\n      <div style={imgSectionStyle}>\n        <img\n          src=\"./imgs/tuner/func0.png\" alt=\"1D Gabor filter\"\n          style={{ height: '100px', marginRight: '20px' }}\n        />\n        <img\n          src=\"./imgs/tuner/gaborplus2.jpg\" alt=\"kernels in Sketch-A-Net\"\n          style={{ height: '100px', marginRight: '20px' }}\n        />\n        <img\n          src=\"./imgs/tuner/gaborplus.jpg\" alt=\"Gabor filters\"\n          style={{ height: '100px' }}\n        />\n        <div style={{ textAlign: 'center' }}>\n          <small>(1) 1D Gabor filter. Red: sine wave, Green: 1D Gaussian (also known as a normal distribution), Blue: Gabor filter. (2) A bank of Gabor filters at different sizes and rotations {cite(6)}. (3) Kernels from the first layer of Sketch-A-Net {cite(6)}.</small>\n        </div>\n      </div>\n\n      <h4>Construction of kernels</h4>\n      <p>Typically, Gabor filters are applied at various sizes (as seen in the bank above). This tool is designed to work with line drawings of a consistent stroke width and therefore provides a single size. In addition, this tool produces filters that are cut off after a single traversal of a sine wave. Gabor filters have multiple ridges to match textures in addition to lines.</p>\n      <p>(For simplicity's sake, this project ignores textures and focuses on detecting line features. Even though textures play an important role in some styles of line drawings.)</p>\n\n      <div style={imgSectionStyle}>\n        <img\n          src=\"./imgs/tuner/gaborme.png\" alt=\"vertical line filter generated with tuner\"\n          style={{ height: '150px' }}\n        />\n        <img\n          src=\"./imgs/tuner/gabor1.jpg\" alt=\"vertical Gabor filter\"\n          style={{ height: '150px', marginLeft: '20px' }}\n        />\n        <img\n          src=\"./imgs/tuner/kerneltypes.png\" alt=\"sample of line filters generated with tuner\"\n          style={{ height: '100px', marginBottom: '25px', marginLeft: '20px' }}\n        />\n        <div style={{ textAlign: 'center' }}>\n          <small>(1) Vertical line filter generated with Kernel Tuner. (2) Vertical Gabor filter. (3) Other types of kernels generated.</small>\n        </div>\n      </div>\n\n      <p>The other important difference is the range of features matched. Instead of being limited to lines of different orientations, the kernels produced can match a range of feature types. Normally, networks take their time to build up these representations. In an investigation of the representations at different layers within Sketch-a-Net (which has convolutional layers), I found that the first layer matched line orientations {cite(8)}. Layers two through four haphazardly refined features such as corners, rounded corners, dots, curves, and a variety of textures. </p>\n\n      <div style={imgSectionStyle}>\n        <img\n          src=\"./imgs/tuner/viz0.png\" alt=\"Sketch-A-Net layer 1 visual concepts\"\n          style={{ maxWidth: '500px', width: '70%' }}\n        />\n        <img\n          src=\"./imgs/tuner/viz1.png\" alt=\"Sketch-A-Net layer 2 visual concepts\"\n          style={{ maxWidth: '500px', width: '70%' }}\n        />\n        <div style={{ textAlign: 'center' }}>\n          <small>(1-4) Illustrations of visual concepts in Layers 1 and 2 in Sketch-A-Net, found using a K-Means clustering approach borrowed from {cite(3)}. More can be seen <a href=\"https://ulberge.github.io/SketchANetClustering/\">here</a></small>\n        </div>\n      </div>\n\n      <p>While the machine derives representations it finds useful from scratch, a human can define the important features of a line drawing logically. Namely, we know we care about the orientation of the lines and their intersections. We could define other features of interest, but the number of filters could quickly get out of control. The approach of this tuner is to incorporate human common sense while leaving further features to be derived later on.</p>\n\n      <p>The kernel types were chosen to span the range of possibilities for one, two, or three lines that pass from outside the kernel window through (or to) the center of the kernel window. Typically CNNs learn to detect features at different offsets as well, but I chose to ignore that until I can be convinced it is necessary. The goal is to efficiently extract the most salient, “template”-like information available. Subsequent layers will condense and make sense of it.</p>\n\n      <p>The construction of these kernels is similar to Gabor filters but with a domain limited to PI. Furthermore, each kernel is a Frankenstein of Gabor filters corresponding to the lines involved. Most are composed of multiple lines stitched together.</p>\n\n      <div style={imgSectionStyle}>\n        <img\n          src=\"./imgs/tuner/linetypes.png\" alt=\"The one, two, and three line constructions considered\"\n          style={{ height: '200px', filter: 'grayscale()' }}\n        />\n        <img\n          src=\"./imgs/tuner/stitch.png\" alt=\"The ‘L’ corner is made by stitching perpendicular Gabor filters along a diagonal a 45 degree angle\"\n          style={{ height: '100px', marginBottom: '50px', marginLeft: '40px' }}\n        />\n        <div style={{ textAlign: 'center' }}>\n          <small>(1) The one, two, and three line constructions considered. (2) The ‘L’ corner is made by stitching together Gabor filters.</small>\n        </div>\n      </div>\n\n      <h4>Head-to-head comparison with first layer kernels in machine learning</h4>\n      <p>To verify that these kernels encode sufficient information to act as a foundation for robust networks, I built models on top of them. Then, I compared the classification accuracy with other approaches. I tested models with the kernels as the fixed, pre-trained weights and compared them with models using random, trainable weights. For this experiment, I used the TU Berlin sketch dataset, augmented through shifting the images and through slight shear, zoom, and rotational transformations. I also compare the results to state-of-the-art approaches.</p>\n\n      <h4>Test #1</h4>\n      <p>The first network I built was designed to classify using simple statistics built on top of the Kernel Tuner filters. My hope was to establish a baseline of how much information was being extracted through just the kernels. The network pools the information and uses a fully connected layer before the final softmax layer to calculate statistics.</p>\n\n      <div style={imgSectionStyle}>\n        <img\n          src=\"./imgs/tuner/stats.png\" alt=\"Model summary for Test #1 of stats on top of kernels\"\n          style={{ height: '300px' }}\n        />\n        <div style={{ textAlign: 'center' }}>\n          <small>(1) Model summary for Test #1 of statistics on top of kernels.</small>\n        </div>\n      </div>\n\n      <h4>Test #2</h4>\n      <p>Secondly, I built a shallow CNN on top of the kernels to see how they would compare to a network without pretrained weights and to state of the art results on the same dataset. While this network has over 3 million trainable weights, it is still considerably smaller than the 8.5 million of Sketch-A-Net {cite(6)}</p>\n\n      <div style={imgSectionStyle}>\n        <img\n          src=\"./imgs/tuner/conv.png\" alt=\"Model summary for Test #2 of shallow CNN on top of kernels\"\n          style={{ height: '500px' }}\n        />\n        <div style={{ textAlign: 'center' }}>\n          <small>(1) Model summary for Test #2 of shallow CNN on top of kernels.</small>\n        </div>\n      </div>\n\n      <h4>Results</h4>\n      <p>My preliminary results show a % for the shallow statistical network and % for the shallow CNN. When I replaced the kernels with random weights the results were % and % respectively. Sketch-A-Net achieved %, although with more weights and a more complex model. I would argue that the use of kernels also improved the generalizability since there was a concerted approach to have a well distributed set of features recognized.</p>\n\n      <h4>Conclusion</h4>\n      <p>The kernel tuner provides a way to tune kernels for line drawings. It acts as a visual debugger to make the filters for the first convolutional layer to translate from pixels to visual concepts.</p>\n    </div>\n  );\n}\n\n\nexport default function KernelTunerAbout(props) {\n  return (\n    <ExpansionPanel defaultExpanded={true} TransitionProps={{ mountOnEnter: true }} square={true} style={{ boxShadow: 'none', border: '1px solid #b2b2b2' }}>\n      <ExpansionPanelSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"kerneltuner-content\"\n      >\n        <h3 style={{ margin: '0 10px' }}>About</h3>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails style={{ margin: '0px 20px' }}>\n        <KernelTunerAboutText />\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport KernelMaker from '../KernelTuner/KernelMaker';\nimport KernelInspector from '../KernelTuner/KernelInspector';\nimport KernelTunerAbout from '../KernelTuner/KernelTunerAbout';\nimport Container from '@material-ui/core/Container';\n\nfunction KernelTuner(props) {\n  const { kernelSettings, updateKernelSettings } = props;\n  return (\n    <div>\n      <h2>Kernel Tuner</h2>\n      <Container maxWidth=\"md\">\n        <KernelMaker defaultKernelSettings={kernelSettings} updateKernelSettings={updateKernelSettings} />\n      </Container>\n      <Container maxWidth=\"lg\" style={{ marginTop: '40px' }}>\n        <KernelInspector kernelSettings={kernelSettings} />\n      </Container>\n      <Container maxWidth=\"md\" style={{ marginTop: '40px' }}>\n        <hr style={{ border: 0, borderTop: '1px solid #b2b2b2' }}/>\n        <KernelTunerAbout />\n      </Container>\n    </div>\n  );\n}\n\nKernelTuner.propTypes = {\n  kernelSettings: PropTypes.object.isRequired,\n  updateKernelSettings: PropTypes.func.isRequired,\n};\n\nexport default KernelTuner;\n","import React, { useState, useEffect } from 'react';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport grey from '@material-ui/core/colors/grey';\nimport KernelTuner from '../KernelTuner/KernelTuner';\nimport { kernelTypes } from '../../js/kernel';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: grey,\n  },\n});\n\n// Default kernel settings on first page load\nconst defaultKernelSettings = {\n  numComponents: 2, // actual num is 2^numComponents\n  lambda: 4.9,\n  sigma: 3.3,\n  windowSize: 9,\n  types: [kernelTypes[0], kernelTypes[2]]\n};\n// Check the saved kernel settings have not been corrupted somehow\nfunction areValidKernelSettings(kernelSettings) {\n  if (!kernelSettings) {\n    return false;\n  }\n  const { numComponents, lambda, sigma, windowSize, types } = kernelSettings;\n  if (isNaN(numComponents) || isNaN(lambda) || isNaN(sigma) || isNaN(windowSize)) {\n    return false;\n  }\n  if (!Array.isArray(types) || types.length === 0) {\n    return false;\n  }\n  for (const kernelType of types) {\n    if (!kernelTypes.includes(kernelType)) {\n      // invalid type\n      return false;\n    }\n  }\n  return true;\n}\nconst storageKey = 'kernelSettings';\nconst storedSettings = JSON.parse(localStorage.getItem(storageKey));\nconst initialKernelSettings = areValidKernelSettings(storedSettings) ? storedSettings : defaultKernelSettings;\n\nexport default function App() {\n  const [ kernelSettings, updateKernelSettings ] = useState(initialKernelSettings);\n\n  // save kernel settings on change\n  useEffect(() => {\n    localStorage.setItem(storageKey, JSON.stringify(kernelSettings));\n  }, [ kernelSettings ]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <KernelTuner kernelSettings={kernelSettings} updateKernelSettings={updateKernelSettings} />\n    </ThemeProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/Page/App';\n\nReactDOM.render(\n  (<App />),\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}