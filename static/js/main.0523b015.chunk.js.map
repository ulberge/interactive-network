{"version":3,"sources":["serviceWorker.js","components/UI/Array2DView.js","js/sketches/array2DViewSketch.js","components/UI/Array2DViewList.js","js/kernel.js","components/KernelTuner/KernelMakerControls.js","components/KernelTuner/KernelMaker.js","js/conv/convArray.js","js/conv/convLayer.js","js/conv/maxPoolLayer.js","js/conv/network.js","js/smartCanvas.js","components/KernelTuner/KernelInspectorDrawingInput.js","js/sketches/drawingInputSketch.js","js/sketches/colorCodedMapSketch.js","components/KernelTuner/KernelInspectorColorCodedMap.js","js/charts/activationChart.js","components/KernelTuner/KernelInspectorActivationChart.js","components/UI/Array2DViewOverlayList.js","components/KernelTuner/KernelInspectorViewOutputAtPoint.js","components/KernelTuner/KernelInspectorViewOutput.js","components/KernelTuner/KernelInspector.js","components/KernelTuner/KernelTuner.js","components/Page/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Array2DView","props","imgArr","scale","imgRef","useRef","pRef","useEffect","current","p5","p","_draw","_setupDone","h","length","w","height","width","resizeCanvas","canvas","style","clear","flatArr","flat","max","Math","min","map","row","v","loadPixels","y","x","set","color","updatePixels","setTimeout","setup","pixelDensity","createCanvas","stroke","noLoop","noSmooth","ref","Array2DViewList","imgArrs","cols","Grid","container","spacing","i","item","key","breakAfter","kernelTypes","getCosWaveFn","theta","lambda","period","a","PI","cos","sin","getGaussianFn","sigma","exp","getLine","windowSize","wave","gauss","kernel","nj","zeros","assign","tolist","halfWindowSize","floor","yCentered","xCentered","z","getLineEnd","getLs","angle","numKernels","rotationDelta","kernels","b","kernelLineEnd0","kernelLineEnd1","c","push","getDot","size","gaussNeg","gaussPos","scaleKernel","negativeScaleFactor","positiveSum","positiveMax","negativeMin","forEach","positiveScaleFactor","getKernels","numComponents","types","includes","getLines","getLineEnds","kernelLine","kernelLineEnd","zMax","zMin","getTs","kernelLine0","kernelLine1","getXs","kernelLineEndBase","kernelLineEndBranch0","kernelLineEndBranch1","getYs","scaledKernels","console","log","join","KernelMakerControls","memo","ToggleButtonGroup","value","onChange","event","aria-label","borderRadius","margin","className","slice","type","ToggleButton","textTransform","padding","textAlign","Slider","defaultValue","track","aria-labelledby","marks","label","step","valueLabelDisplay","KernelMaker","defaultKernelSettings","updateKernelSettings","useState","kernelSettings","setKernelSettings","updateKernelSettingsCallback","useCallback","field","newKernelSettings","useMemo","ExpansionPanel","defaultExpanded","square","boxShadow","border","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","justify","marginRight","dtype","ConvArray","channels","shape","kernelSize","stride","outerShape","this","_shape","_stride","_pad","_outerBounds","ceil","_channels","_arr","_ids","_max","_dirtyBounds","arr","channel","bounds","_slice","_updateDirtyBounds","outputTensor","ct1","minX","minY","maxX","maxY","times","ct0","Date","now","tf","idsT","argMax","dsync","dataSync","idsUpdate","reshape","flatOutputTensor","flatIdsTensor","layerOffsets","withinLayerOffsets","idLookups","maxT","gather","maxUpdate","reduce","Number","isInteger","sx","sy","ex","ey","dsx","dsy","dex","dey","table","dirtyBounds","limit","minX0","minY0","maxX0","maxY0","minX1","minY1","maxX1","maxY1","limitBounds","dilateBounds","poolSize","selection","ConvLayer","input","output","filters","_kernelSize","_rawFilters","filter","_tflayer","numOutputs","weights","transpose","biases","weightsTensor","conv2d","strides","activation","dataFormat","getConvLayer","updateBounds","dirty","d","data","apply","updateArr","updateShape","update","calcStats","clean","MaxPoolLayer","maxPooling2d","Network","inputShape","layerInfos","arrs","layerInfo","conv","pool","layers","entries","layer","t00","t0","run","t1","t01","acts","ids","safePt","pt","Vector","SmartCanvas","network","_backup","_listeners","forceFullUpdate","init","start","end","makeBackup","_getLineBounds","img","get","line","image","g","pixels","_notifyListeners","fn","indexOf","splice","KernelInspectorDrawingInput","onUpdate","rotation","setRotation","smartCanvasRef","strokeWeight","draw","mouseIsPressed","pmouseX","pmouseY","mouseX","mouseY","_rotationCache","addSegment","angleMode","DEGREES","translate","rotate","pop","getSketch","k","addListener","reset","direction","position","marginTop","Button","marginLeft","variant","onClick","maxWidth","minWidth","colors","colorMap","KernelInspectorColorCodedMap","onSelect","innerHTML","needsRefresh","drawWindow","setData","_scale","maxMax","setKernels","_kernelCache","icon","_getIcon","_colorCodedGraphics","createGraphics","zoomScale","_isMouseInBounds","_drawBackground","x0","y0","x1","y1","slice_ids","array","slice_max","fill","noStroke","rect","_drawIconArray","noFill","pad","mouseClicked","_onSelect","_pt","_getColor","setAlpha","intensity","rectScale","tint","random","renderChart","el","act","name","offsetWidth","d3","domain","range","bandwidth","svg","append","attr","bars","selectAll","enter","exit","remove","flatKernelData","abs","rIndex","colIndex","kIndex","col","weightPixels","pixelSize","renderKernelsOnBars","call","tickSize","node","KernelInspectorActivationChart","chartRef","Array2DViewOverlayList","imgArrsOverlay","overlayOpacity","top","opacity","KernelInspectorViewOutputAtPoint","count","actsAtPt","imgArrAtPt","getImgArrAtPt","s","sort","selectTopIndices","ptDisplay","Array","KernelInspectorViewOutput","defaultPt","setPt","getOutput","KernelInspector","KernelTuner","Container","theme","createMuiTheme","palette","primary","grey","storageKey","storedSettings","JSON","parse","localStorage","getItem","initialKernelSettings","isNaN","isArray","kernelType","areValidKernelSettings","App","setItem","stringify","ThemeProvider","setWasmPath","then","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0523b015.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport p5 from 'p5';\nimport { getSketch } from '../../js/sketches/array2DViewSketch';\n\n// Renders a 2D array as a p5 sketch\nconst Array2DView = props => {\n  const { imgArr, scale } = props;\n  const imgRef = useRef(null);\n  const pRef = useRef(null);\n\n  useEffect(() => {\n    // run once\n    if (!pRef.current) {\n      pRef.current = new p5(getSketch(), imgRef.current);\n    }\n\n    // run every time\n    if (pRef.current) {\n      pRef.current._draw(imgArr, scale);\n    }\n  }, [ imgArr, scale ]);\n\n  return (\n    <div ref={imgRef}></div>\n  );\n};\n\nArray2DView.propTypes = {\n  imgArr: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  scale: PropTypes.number\n};\n\nexport default Array2DView;\n","/**\n * Returns a p5 sketch that can draw a 2D array\n */\nexport function getSketch() {\n  return (p) => {\n    /**\n     * Draw a 2D array at the given scale\n     * @param {Number[][]} imgArr - 2D array to initialize canvas (values between [-1, 1])\n     * @param {Number} scale - Scale at which to render (uses css, hopefully pixelated, but depends on browser)\n     */\n    p._draw = (imgArr, scale=1) => {\n      if (!imgArr) {\n        return;\n      }\n\n      // protect against rendering before sketch ready\n      if (!p._setupDone) {\n        setTimeout(() => p._draw(imgArr, scale), 10);\n        return;\n      }\n\n      const h = imgArr.length;\n      const w = imgArr[0].length;\n      if (h !== p.height || w !== p.width) {\n        p.resizeCanvas(w, h);\n      }\n\n      p.canvas.style.height = (h * scale) + 'px';\n      p.canvas.style.width = (w * scale) + 'px';\n\n      p.clear();\n\n      // normalize to max value (positive or negative)\n      const flatArr = imgArr.flat();\n      let max = Math.max(...flatArr);\n      max = max > 0 ? max : -Math.min(...flatArr);\n      imgArr = imgArr.map(row => row.map(v => v / max));\n\n      // render pixels using image\n      p.loadPixels();\n      for (let y = 0; y < imgArr.length; y += 1) {\n        for (let x = 0; x < imgArr[0].length; x += 1) {\n          const v = imgArr[y][x] * 255;\n          if (v >= 0) {\n            p.set(x, y, p.color(0, 0, 0, v));\n          } else if (v < 0) {\n            p.set(x, y, p.color(214, 30, 30, -v * 0.75));\n          }\n        }\n      }\n      p.updatePixels();\n    }\n\n    p.setup = () => {\n      p.pixelDensity(1);\n      p.createCanvas(1, 1);\n      p.stroke(255);\n      p.noLoop();\n      p.noSmooth();\n    };\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Array2DView from './Array2DView';\n\n// Renders a series of 2D arrays as p5 sketches\nconst Array2DViewList = props => {\n  const { imgArrs, cols, scale } = props;\n  return (\n    <Grid container spacing={1} style={props.style}>\n      { imgArrs.map((imgArr, i) => (\n        <Grid item key={i} style={ cols && ((i % cols) === (cols - 1)) ? { breakAfter: 'always' } : {}} >\n          <Array2DView imgArr={imgArr} scale={scale} />\n        </Grid>\n      )) }\n    </Grid>\n  );\n}\n\nArray2DViewList.propTypes = {\n  imgArrs: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))).isRequired,\n  scale: PropTypes.number.isRequired,\n  cols: PropTypes.number,\n};\n\nexport default Array2DViewList;\n","import nj from 'numjs';\n\n// export const kernelTypes = ['I', 'i', 'L', 'T', 'X', 'Y', '>', '_/', ')', '⭑'];\nexport const kernelTypes = ['I', 'i', 'L', 'T', 'X'];\n\n// Returns a f(x, y) for 2D cosine wave at angle theta of width inverse lambda from -PI to PI, scaled by pos and neg\nfunction getCosWaveFn(theta, lambda, period=1) {\n  return (x, y) => {\n    const a = (2 * Math.PI / lambda) * ((x * Math.cos(theta)) + (y * Math.sin(theta)));\n    if (a > (Math.PI * period) || a < (-Math.PI * period)) {\n      return null;\n    }\n\n    return Math.cos(a);\n  }\n}\n\n// Returns f(x, y) for a 2D Gaussian with spread sigma\nfunction getGaussianFn(sigma) {\n  return (x, y) => {\n    return Math.exp(-.5 * ((x ** 2 / (sigma ** 2)) + (y ** 2 / (sigma ** 2))));\n  }\n}\n\nfunction getLine(windowSize, theta, lambda, sigma) {\n  const wave = getCosWaveFn(theta, lambda);\n  const gauss = getGaussianFn(sigma);\n  const kernel = nj.zeros([windowSize, windowSize]).assign(-1, false).tolist();\n  const halfWindowSize = Math.floor(windowSize / 2);\n\n  for (let y = 0; y < windowSize; y += 1) {\n    const yCentered = y - halfWindowSize;\n    for (let x = 0; x < windowSize; x += 1) {\n      const xCentered = x - halfWindowSize;\n      const z = wave(xCentered, yCentered);\n      if (z !== null) {\n        kernel[y][x] = z;\n      }\n\n      kernel[y][x] = kernel[y][x] * gauss(xCentered, yCentered);\n    }\n  }\n\n  return kernel;\n}\n\nfunction getLines(windowSize, numKernels, lambda, sigma) {\n  const rotationDelta = Math.PI / numKernels; // divide 180 degrees in number\n\n  const kernels = [];\n  for (let i = 0; i < numKernels; i += 1) {\n    const theta = i * rotationDelta; // angle of this cos wave\n    const kernel = getLine(windowSize, theta, lambda, sigma);\n\n    kernels.push(kernel);\n  }\n\n  return kernels;\n}\n\nfunction getLineEnd(windowSize, theta, lambda, sigma) {\n  const wave = getCosWaveFn(theta, lambda);\n  const gauss = getGaussianFn(sigma);\n  const kernel = nj.zeros([windowSize, windowSize]).assign(-1, false).tolist();\n  const halfWindowSize = Math.floor(windowSize / 2);\n\n  for (let y = 0; y < windowSize; y += 1) {\n    const yCentered = y - halfWindowSize;\n    for (let x = 0; x < windowSize; x += 1) {\n      const xCentered = x - halfWindowSize;\n      let z = null;\n      let a = (Math.sin(theta) * xCentered) - (Math.cos(theta) * yCentered); // pos in rotation space\n      if (a < 0.00001) { // rounding error\n        z = wave(xCentered, yCentered);\n      } else if (a < 1.00001) {\n        // special case for after center point\n        z = wave(xCentered, yCentered);\n        z = z > 0 ? (z / 2) : z;\n      }\n      if (z !== null) {\n        kernel[y][x] = z;\n      }\n\n      kernel[y][x] = kernel[y][x] * gauss(xCentered, yCentered);\n    }\n  }\n\n  return kernel;\n}\n\nfunction getLineEnds(windowSize, numKernels, lambda, sigma) {\n  const rotationDelta = 2 * Math.PI / numKernels; // divide 180 degrees in number\n  const kernels = [];\n  for (let i = 0; i < numKernels; i += 1) {\n    const theta = i * rotationDelta; // angle of this cos wave\n    const kernel = getLineEnd(windowSize, theta, lambda, sigma);\n    kernels.push(kernel);\n  }\n\n  return kernels;\n}\n\nfunction getLs(windowSize, angle, numKernels, lambda, sigma) {\n  const rotationDelta = 2 * Math.PI / numKernels; // divide 180 degrees in number\n  const halfWindowSize = Math.floor(windowSize / 2);\n  const kernels = [];\n  for (let i = 0; i < numKernels; i += 1) {\n    const theta = i * rotationDelta; // angle of this cos wave\n    const a = Math.sin(theta + (Math.PI / 2) - (angle / 2));\n    const b = Math.cos(theta + (Math.PI / 2) - (angle / 2));\n\n    // Create two line ends at 90 degrees to each other and merge at diagonal between them\n    const kernelLineEnd0 = getLineEnd(windowSize, theta, lambda, sigma);\n    const kernelLineEnd1 = getLineEnd(windowSize, theta - angle, lambda, sigma);\n    const kernel = nj.zeros([windowSize, windowSize]).tolist();\n\n    for (let y = 0; y < windowSize; y += 1) {\n      const yCentered = y - halfWindowSize;\n      for (let x = 0; x < windowSize; x += 1) {\n        const xCentered = x - halfWindowSize;\n        const c = (a * xCentered) - (b * yCentered); // pos in rotation space\n        if (c < 0.00001) { // rounding error at 0\n          kernel[y][x] = kernelLineEnd0[y][x];\n        } else {\n          kernel[y][x] = kernelLineEnd1[y][x];\n        }\n      }\n    }\n\n    kernels.push(kernel);\n  }\n\n  return kernels;\n}\n\nfunction getTs(windowSize, angle, numKernels, lambda, sigma) {\n  const rotationDelta = 2 * Math.PI / numKernels; // divide 180 degrees in number\n  const halfWindowSize = Math.floor(windowSize / 2);\n  const kernels = [];\n  for (let i = 0; i < numKernels; i += 1) {\n    const theta = i * rotationDelta; // angle of this cos wave\n    const a = Math.sin(theta + (Math.PI / 2));\n    const b = Math.cos(theta + (Math.PI / 2));\n\n    // Create two line ends at 90 degrees to each other and merge at diagonal between them\n    const kernelLine = getLine(windowSize, theta, lambda, sigma);\n    const kernelLineEnd = getLineEnd(windowSize, theta - angle, lambda, sigma);\n    const kernel = nj.zeros([windowSize, windowSize]).tolist();\n    for (let y = 0; y < windowSize; y += 1) {\n      const yCentered = y - halfWindowSize;\n      for (let x = 0; x < windowSize; x += 1) {\n        const xCentered = x - halfWindowSize;\n        const c = (a * xCentered) - (b * yCentered); // pos in rotation space\n        if (c < 0.00001) { // rounding error at 0\n          // use line\n          kernel[y][x] = kernelLine[y][x];\n        } else {\n          // use most extreme towards T line\n          const zMax = Math.max(kernelLine[y][x], kernelLineEnd[y][x]);\n          const zMin = Math.min(kernelLine[y][x], kernelLineEnd[y][x]);\n          kernel[y][x] = zMax > 0 ? zMax : zMin;\n        }\n      }\n    }\n\n    kernels.push(kernel);\n  }\n\n  return kernels;\n}\n\nfunction getXs(windowSize, angle, numKernels, lambda, sigma) {\n  const rotationDelta = (Math.PI / 2) / numKernels; // divide 90 degrees in number\n  const kernels = [];\n  for (let i = 0; i < numKernels; i += 1) {\n    const theta = i * rotationDelta; // angle of this cos wave\n\n    // Create two line ends at 90 degrees to each other and merge at diagonal between them\n    const kernelLine0 = getLine(windowSize, theta, lambda, sigma);\n    const kernelLine1 = getLine(windowSize, theta - angle, lambda, sigma);\n    const kernel = nj.zeros([windowSize, windowSize]).tolist();\n    for (let y = 0; y < windowSize; y += 1) {\n      for (let x = 0; x < windowSize; x += 1) {\n        // use most extreme\n        const zMax = Math.max(kernelLine0[y][x], kernelLine1[y][x]);\n        const zMin = Math.min(kernelLine0[y][x], kernelLine1[y][x]);\n        kernel[y][x] = zMax > 0 ? zMax : zMin;\n      }\n    }\n\n    kernels.push(kernel);\n  }\n\n  return kernels;\n}\n\nfunction getDot(windowSize, lambda, sigma, size=1) {\n  const gaussNeg = getGaussianFn(sigma);\n  const gaussPos = getGaussianFn(size * lambda / 4);\n  const kernel = nj.zeros([windowSize, windowSize]).assign(-1, false).tolist();\n  const halfWindowSize = Math.floor(windowSize / 2);\n\n  for (let y = 0; y < windowSize; y += 1) {\n    const yCentered = y - halfWindowSize;\n    for (let x = 0; x < windowSize; x += 1) {\n      const xCentered = x - halfWindowSize;\n      kernel[y][x] = (gaussPos(xCentered, yCentered) * 8) - gaussNeg(xCentered, yCentered);\n    }\n  }\n\n  // normalize\n  const max = Math.max(...kernel.flat());\n  const kernelNorm = kernel.map(row => row.map(v => v / max));\n\n  return kernelNorm;\n}\n\nfunction getYs(windowSize, angle, numKernels, lambda, sigma) {\n  const rotationDelta = 2 * Math.PI / numKernels; // divide 360 degrees in number\n  const halfWindowSize = Math.floor(windowSize / 2);\n  const kernels = [];\n  for (let i = 0; i < numKernels; i += 1) {\n    const theta = i * rotationDelta; // angle of this cos wave\n\n    // Create line at angle, and two other lines spread from 180 degree from that line by angle\n    const kernelLineEndBase = getLineEnd(windowSize, theta, lambda, sigma);\n    const kernelLineEndBranch0 = getLineEnd(windowSize, theta - Math.PI + angle, lambda, sigma);\n    const kernelLineEndBranch1 = getLineEnd(windowSize, theta - Math.PI - angle, lambda, sigma);\n\n    const a = Math.sin(theta);\n    const b = Math.cos(theta);\n    const kernel = nj.zeros([windowSize, windowSize]).tolist();\n    for (let y = 0; y < windowSize; y += 1) {\n      const yCentered = y - halfWindowSize;\n      for (let x = 0; x < windowSize; x += 1) {\n        const xCentered = x - halfWindowSize;\n        const c = (a * xCentered) - (b * yCentered); // pos in rotation space\n        if (c < -1.00001) { // rounding error at 0\n          // use line\n          kernel[y][x] = kernelLineEndBase[y][x];\n        } else {\n          // use max between all\n          const zMax = Math.max(kernelLineEndBranch0[y][x], kernelLineEndBranch1[y][x], kernelLineEndBase[y][x]);\n          const zMin = Math.min(kernelLineEndBranch0[y][x], kernelLineEndBranch1[y][x], kernelLineEndBase[y][x]);\n          kernel[y][x] = zMax > 0 ? zMax : zMin;\n        }\n      }\n    }\n\n    kernels.push(kernel);\n  }\n\n  return kernels;\n}\n\n// process kernels\nexport function scaleKernel(kernel) {\n  let positiveSum = 0;\n  let positiveMax = 0;\n  let negativeMin = 0;\n  kernel.forEach(row => row.forEach(v => {\n    if (v > 0) {\n      positiveSum += v;\n      if (v > positiveMax) {\n        positiveMax = v;\n      }\n    } else {\n      if (v < negativeMin) {\n        negativeMin = v;\n      }\n    }\n  }));\n\n  let negativeScaleFactor;\n  if (positiveMax === 0 || negativeMin === 0) {\n    negativeScaleFactor = 1;\n  } else {\n    negativeScaleFactor = -negativeMin / (positiveMax / positiveSum);\n  }\n  const positiveScaleFactor = positiveSum;\n\n  kernel = kernel.map(row => row.map(v => {\n    if (v > 0) {\n      // normalize positive weights, such that the total adds up to 1 (ie. max activation is 1 if input max is 1)\n      return v / positiveScaleFactor;\n    } else {\n      // scale negative weights with scale where min is equal negative magnitude of max positive\n      // there may be a lot more negative than positive, but by scaling to match, an equal number\n      // of mismatch pixels will cancel out with positive\n      return v / negativeScaleFactor;\n    }\n  }));\n\n  return kernel;\n}\n\nexport function getKernels(windowSize, numComponents, lambda, sigma, types) {\n  const kernels = [];\n  if (!windowSize || !numComponents) {\n    return kernels;\n  }\n\n  if (types.includes(kernelTypes[0])) {\n    kernels.push(...getLines(windowSize, numComponents, lambda, sigma));\n  }\n  if (types.includes(kernelTypes[1])) {\n    kernels.push(...getLineEnds(windowSize, numComponents, lambda, sigma));\n  }\n  if (types.includes(kernelTypes[2])) {\n    kernels.push(...getLs(windowSize, Math.PI * 0.5, numComponents, lambda, sigma));\n  }\n  if (types.includes(kernelTypes[3])) {\n    kernels.push(...getTs(windowSize, Math.PI * 0.5, numComponents, lambda, sigma));\n  }\n  if (types.includes(kernelTypes[4])) {\n    kernels.push(...getXs(windowSize, Math.PI * 0.5, numComponents / 2, lambda, sigma));\n  }\n  if (types.includes(kernelTypes[5])) {\n    kernels.push(...getYs(windowSize, Math.PI * 0.25, numComponents, lambda, sigma));\n  }\n  if (types.includes(kernelTypes[6])) {\n    kernels.push(...getLs(windowSize, Math.PI * 0.25, numComponents, lambda, sigma));\n  }\n  if (types.includes(kernelTypes[7])) {\n    kernels.push(...getLs(windowSize, Math.PI * 0.75, numComponents, lambda, sigma));\n  }\n  if (types.includes(kernelTypes[8])) {\n    kernels.push(...getLs(windowSize, Math.PI * 0.925, numComponents * 2, lambda, sigma));\n  }\n  if (types.includes(kernelTypes[9])) {\n    kernels.push(getDot(windowSize, lambda, sigma, 0.7));\n    kernels.push(getDot(windowSize, lambda, sigma, 1));\n  }\n\n  // Other potentials\n  // kernels.push(...getTs(windowSize, Math.PI * 0.75, numComponents * 2, lambda, sigma));\n  // kernels.push(...getTs(windowSize, Math.PI * 0.25, numComponents * 2, lambda, sigma));\n  // kernels.push(...getXs(windowSize, Math.PI * 0.25, numComponents, lambda, sigma));\n  // points, small circles, blank, dense intersection, round corners, pinched round corners\n  // look at internal representations in Sketch-A-Net and try to add those\n\n  const scaledKernels = kernels.map(scaleKernel);\n\n  if (types.includes(kernelTypes[9])) {\n    // Blank, full, single pixel\n    // scaledKernels.push(nj.zeros([windowSize, windowSize]).assign(1 / (windowSize * windowSize), false).tolist());\n    // scaledKernels.push(nj.zeros([windowSize, windowSize]).assign(-1 / 4, false).tolist());\n    // const pixel = nj.zeros([windowSize, windowSize]);\n    // pixel.set(Math.floor(windowSize / 2), Math.floor(windowSize / 2), 1);\n    // scaledKernels.push(pixel.tolist());\n  }\n  // console.log(JSON.stringify(scaledKernels.map(k => k.map(r => r.map(v => Number(v.toFixed(5)))))));\n  console.log(scaledKernels.map(kernel => kernel.map(row => row.join(',')).join('\\n')).join('\\n:\\n'));\n\n  return scaledKernels;\n}\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport Slider from '@material-ui/core/Slider';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport { kernelTypes } from '../../js/kernel';\n\n// { ['l', 'i', 'L', 'T', 'X', 'Y', '>', '7', ')', '⭑'].map(type => (\nconst KernelMakerControls = memo(function KernelMakerControls(props) {\n  return (\n    <div>\n      <div>\n        <div>Types</div>\n        <ToggleButtonGroup\n          value={props.types}\n          onChange={(event, types) => types.length > 0 ? props.onChange('types', types) : 0}\n          aria-label=\"types of kernels\"\n          style={{ borderRadius: 0, margin: '12px 0 0 0' }}\n          className=\"toggle-types\"\n        >\n          { kernelTypes.slice(0, 5).map((type, i) => (\n            <ToggleButton\n              key={type}\n              value={type}\n              style={{ borderRadius: 0, height: '28px', width: '28px', textTransform: 'none', padding: '4px', textAlign: 'center' }}\n            >\n              { type }\n            </ToggleButton>\n          )) }\n        </ToggleButtonGroup>\n        <ToggleButtonGroup\n          value={props.types}\n          onChange={(event, types) => types.length > 0 ? props.onChange('types', types) : 0}\n          aria-label=\"types of kernels\"\n          style={{ borderRadius: 0, margin: '2px 0 12px 0' }}\n          className=\"toggle-types\"\n        >\n          { kernelTypes.slice(5, 10).map((type, i) => (\n            <ToggleButton\n              key={type}\n              value={type}\n              style={{ borderRadius: 0, height: '28px', width: '28px', textTransform: 'none', padding: '4px', textAlign: 'center' }}\n            >\n              { type }\n            </ToggleButton>\n          )) }\n        </ToggleButtonGroup>\n      </div>\n      <div>\n        <div>Angles</div>\n        <Slider\n          defaultValue={props.numComponents}\n          track={false}\n          aria-labelledby=\"number of components\"\n          marks={[1, 2, 3].map(value => ({ value, label: (2 ** value) }))}\n          step={1}\n          min={1}\n          max={3}\n          onChange={(event, value) => props.onChange('numComponents', value)}\n        />\n      </div>\n      <div>\n        <div>Size</div>\n        <Slider\n          defaultValue={props.windowSize}\n          track={false}\n          aria-labelledby=\"window size\"\n          valueLabelDisplay=\"auto\"\n          marks={[3, 5, 7, 9, 11].map(value => ({ value, label: value }))}\n          step={2}\n          min={3}\n          max={11}\n          onChange={(event, value) => props.onChange('windowSize', value)}\n        />\n      </div>\n      <div>\n        <div>Width Factor</div>\n        <Slider\n          defaultValue={props.lambda}\n          track={false}\n          aria-labelledby=\"lambda\"\n          valueLabelDisplay=\"auto\"\n          step={0.1}\n          min={1.1}\n          max={10}\n          onChange={(event, value) => props.onChange('lambda', value)}\n          style={{ padding: '24px 0' }}\n        />\n      </div>\n      <div>\n        <div>Gaussian Spread</div>\n        <Slider\n          defaultValue={props.sigma}\n          track={false}\n          aria-labelledby=\"sigma\"\n          valueLabelDisplay=\"auto\"\n          step={0.1}\n          min={0.6}\n          max={8}\n          onChange={(event, value) => props.onChange('sigma', value)}\n          style={{ padding: '24px 0' }}\n        />\n      </div>\n    </div>\n  );\n});\n\nKernelMakerControls.propTypes = {\n  numComponents: PropTypes.number.isRequired,\n  lambda: PropTypes.number.isRequired,\n  sigma: PropTypes.number.isRequired,\n  windowSize: PropTypes.number.isRequired,\n  types: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nexport default KernelMakerControls;\n","import React, { useCallback, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Array2DViewList from '../UI/Array2DViewList';\nimport KernelMakerControls from './KernelMakerControls';\nimport { getKernels } from '../../js/kernel';\n\nfunction KernelMaker(props) {\n  const { defaultKernelSettings, updateKernelSettings } = props;\n  // store the kernel settings as a local state for snappy updates\n  const [ kernelSettings, setKernelSettings ] = useState(defaultKernelSettings);\n  const { numComponents, lambda, sigma, windowSize, types } = kernelSettings;\n\n  const updateKernelSettingsCallback = useCallback((field, value) => {\n    const newKernelSettings = { ...kernelSettings, [field]: value }\n    setKernelSettings(newKernelSettings);\n    updateKernelSettings(newKernelSettings);\n\n  }, [ setKernelSettings, kernelSettings, updateKernelSettings ]);\n\n  const kernels = useMemo(() => {\n    return getKernels(windowSize, 2 ** numComponents, lambda, sigma, types);\n  }, [ numComponents, lambda, sigma, windowSize, types ]);\n\n  return (\n    <ExpansionPanel defaultExpanded={true} square={true} style={{ boxShadow: 'none', border: '1px solid #b2b2b2' }}>\n      <ExpansionPanelSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"kerneltuner-content\"\n      >\n        <h3 style={{ margin: '0 10px' }}>Kernel Maker</h3>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails style={{ margin: '10px 20px' }}>\n        <Grid container justify=\"flex-start\" spacing={4}>\n          <Grid item style={{ marginRight: '20px', width: '165px' }}>\n            <KernelMakerControls\n              numComponents={numComponents}\n              lambda={lambda}\n              sigma={sigma}\n              windowSize={windowSize}\n              types={types}\n              onChange={updateKernelSettingsCallback}\n             />\n          </Grid>\n          <Grid item style={{ width: 'calc(100% - 220px)' }}>\n            <Array2DViewList imgArrs={kernels} scale={4} cols={10} />\n          </Grid>\n        </Grid>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n}\n\nKernelMaker.propTypes = {\n  defaultKernelSettings: PropTypes.object.isRequired,\n  updateKernelSettings: PropTypes.func.isRequired,\n};\n\nexport default KernelMaker;\n","import nj from 'numjs';\nimport * as tf from '@tensorflow/tfjs';\n\nexport const dtype = 'float32';\n\n// A wrapper to simplify the update and retrieval of 2D array slices for convolutions\nexport default class ConvArray {\n  constructor(channels, shape, kernelSize, stride) {\n    // console.log('create ConvArray');\n    // shape of the editable area\n    this._shape = shape;\n    // settings for convolutions that will be applied to this array (necessary for calculating valid slices)\n    this._stride = stride;\n    this._pad = Math.floor(kernelSize / 2);\n    // backing array with extra padding on sides for valid convolution\n    let outerShape;\n    if (this._pad !== 0) {\n      // for conv2d filters with stride===1\n      outerShape = this._shape.map(v => v + (this._pad * 2));\n      this._outerBounds = [ -this._pad, -this._pad, this._shape[1] + this._pad, this._shape[0] + this._pad ];\n    } else {\n      // for maxPool2d filters, need extra padding to width and height to be divisible by pool size\n      outerShape = shape.map(v => Math.ceil(v / this._stride) * this._stride);\n      this._outerBounds = [ 0, 0, outerShape[1], outerShape[0] ];\n    }\n\n    const [ h, w ] = outerShape;\n    this._channels = channels;\n    this._arr = nj.zeros([channels, h, w], dtype);\n\n    // max data\n    this._ids = nj.zeros(this._shape, 'int32').assign(-1, false);\n    this._max = nj.zeros(this._shape, dtype);\n\n    // 4-tuple containing bounds of area that has been changed, coordinates relative to editable area\n    this._dirtyBounds = null;\n  }\n\n  static pool(channels, shape, poolSize) {\n    return new ConvArray(channels, shape, 0, poolSize);\n  }\n\n  static conv(channels, shape, kernelSize, stride=1) {\n    return new ConvArray(channels, shape, kernelSize, stride);\n  }\n\n  /**\n   * Previous layer assigns its calculations to the editable area\n   */\n  assign(arr, channel, bounds) {\n    if (channel === null) {\n      this._slice(bounds).assign(arr, false);\n    } else {\n      this._slice(bounds).slice([channel, channel + 1], null, null).assign(arr, false);\n    }\n    this._updateDirtyBounds(bounds);\n  }\n\n  /**\n   * Clears the dirtyBounds\n   */\n  clean() {\n    this._dirtyBounds = null;\n  }\n\n  /**\n   * Clears the dirtyBounds\n   */\n  calcStats(outputTensor) {\n    if (this._dirtyBounds) {\n      const [ minX, minY, maxX, maxY ] = this._dirtyBounds;\n      const h = maxY - minY;\n      const w = maxX - minX;\n\n      const times = [];\n      let ct0 = Date.now();\n      let ct1;\n\n      times.push(tf.getBackend());\n      const idsT = outputTensor.argMax(1);\n\n      ct1 = Date.now();\n      times.push('argmax -> ');\n      times.push(ct1 - ct0);\n      ct0 = ct1;\n\n      times.push(tf.getBackend());\n      const dsync = idsT.dataSync();\n\n      ct1 = Date.now();\n      times.push('data sync -> ');\n      times.push(ct1 - ct0);\n      ct0 = ct1;\n\n      times.push(tf.getBackend());\n      let idsUpdate = nj['int32'](dsync);\n      idsUpdate = idsUpdate.reshape([ h, w ]);\n      const idsSlice = this._ids.slice([minY, maxY], [minX, maxX]);\n      idsSlice.assign(idsUpdate, false);\n\n      ct1 = Date.now();\n      times.push('update _ids -> ');\n      times.push(ct1 - ct0);\n      ct0 = ct1;\n\n      // gather max\n      times.push(tf.getBackend());\n      const flatOutputTensor = outputTensor.reshape([-1]);\n      const flatIdsTensor = idsT.reshape([-1]);\n      const layerOffsets = tf.mul(flatIdsTensor, tf.scalar(w * h, 'int32'));\n      const withinLayerOffsets = tf.range(0, h * w, 1, 'int32');\n      const idLookups = tf.add(layerOffsets, withinLayerOffsets);\n\n      ct1 = Date.now();\n      times.push('prepare gather -> ');\n      times.push(ct1 - ct0);\n      ct0 = ct1;\n\n      times.push(tf.getBackend());\n      const maxT = flatOutputTensor.gather(idLookups);\n\n      ct1 = Date.now();\n      times.push('gather -> ');\n      times.push(ct1 - ct0);\n      ct0 = ct1;\n\n      times.push(tf.getBackend());\n      const maxUpdate = nj[dtype](maxT.dataSync()).reshape([ h, w ]);\n      const maxSlice = this._max.slice([minY, maxY], [minX, maxX]);\n      maxSlice.assign(maxUpdate, false);\n\n      ct1 = Date.now();\n      times.push('update _max -> ');\n      times.push(ct1 - ct0);\n      ct0 = ct1;\n\n      console.log('calc stats:', 'total time -> ', times.reduce((a, b) => Number.isInteger(b) ? a + b : a, 0), ...times);\n    }\n  }\n\n  /**\n   * Get the dirty area plus padding so that valid convolutions will happen on any convolution that touches\n   * the dirty pixels.\n   */\n  get dirty() {\n    if (!this._dirtyBounds) {\n      return null;\n    }\n    return this._slice(this.dirtyBounds);\n  }\n\n  /**\n   * Gets the dirty bounds with respect to what the next layer cares about\n   */\n  get dirtyBounds() {\n    if (!this._dirtyBounds) {\n      return null;\n    }\n\n    let bounds = this._dirtyBounds;\n\n    // for conv2d kernels with stride=1\n    if (this._pad !== 0) {\n      // at a minimum, expand the bounds by twice the kernel padding\n      bounds = dilateBounds(this._dirtyBounds, this._pad * 2);\n      // limit to the editable area\n      bounds = limitBounds(bounds, this._outerBounds);\n    }\n\n    // for maxPool2d kernels\n    if (this._stride !== 1) {\n      // match the bounds to the beginning and end of a stride (limited by backing array)\n      bounds = bounds.map(b => b / this._stride);\n      const [ sx, sy, ex, ey ] = bounds;\n      bounds = [ Math.floor(sx), Math.floor(sy), Math.ceil(ex), Math.ceil(ey) ];\n      bounds = bounds.map(b => b * this._stride);\n    }\n\n    return bounds;\n  }\n\n  /**\n   * Return the editable array (not including padding around edges)\n   */\n  get arr() {\n    return this._slice([ 0, 0, this._shape[1], this._shape[0] ]);\n  }\n\n  /**\n   * Slice that allows negative values to represent outside of legal area\n   */\n  _slice(bounds=null) {\n    if (!bounds) {\n      bounds = [ 0, 0, ...this._shape ];\n    }\n    const [ sx, sy, ex, ey ] = bounds;\n    return this._arr.slice(null, [ sy + this._pad, ey + this._pad ], [ sx + this._pad, ex + this._pad ]);\n  }\n\n  /**\n   * Expand the dirty bounds to include the given bounds\n   */\n  _updateDirtyBounds(bounds) {\n    if (!this._dirtyBounds) {\n      this._dirtyBounds = bounds;\n    } else {\n      const [ sx, sy, ex, ey ] = bounds;\n      const [ dsx, dsy, dex, dey ] = this._dirtyBounds;\n      this._dirtyBounds = [ Math.min(sx, dsx), Math.min(sy, dsy), Math.max(ex, dex), Math.max(ey, dey) ];\n    }\n  }\n\n  print() {\n    this.arr.tolist().forEach(c => console.table(c));\n  }\n\n  printBacking() {\n    this._arr.tolist().forEach(c => console.table(c));\n  }\n}\n\n// reduce bounds to be within limits\nexport function limitBounds(bounds, limit) {\n  if (!bounds || !limit) {\n    return bounds;\n  }\n\n  // update with most extreme\n  const [ minX0, minY0, maxX0, maxY0 ] = bounds;\n  const [ minX1, minY1, maxX1, maxY1 ] = limit;\n  const minX = Math.max(minX0, minX1);\n  const minY = Math.max(minY0, minY1);\n  const maxX = Math.min(maxX0, maxX1);\n  const maxY= Math.min(maxY0, maxY1);\n  return [ minX, minY, maxX, maxY ];\n}\n\n// Eat away padding amount from 2D array\nexport function dilateBounds(selection, padding) {\n  if (!selection || selection.length === 0 || !padding) {\n    return selection;\n  }\n  let [ minX, minY, maxX, maxY ] = selection;\n\n  return [ minX - padding, minY - padding, maxX + padding, maxY + padding ];\n}\n","import nj from 'numjs';\nimport * as tf from '@tensorflow/tfjs';\nimport { dtype, dilateBounds } from './convArray';\n\nexport default class ConvLayer {\n  constructor(input, output, filters, kernelSize) {\n    this.input = input;\n    this.output = output;\n    this._kernelSize = kernelSize;\n    this._pad = Math.floor(kernelSize / 2);\n    this._rawFilters = filters;\n    this.filters = filters.map(filter => filter.map(kernel => kernel ? nj[dtype]([kernel]) : null));\n    this._tflayer = getConvLayer(nj[dtype](filters.map(filter => filter.map(kernel => kernel ? kernel : nj.zeros([kernelSize, kernelSize], dtype).tolist()))), kernelSize);\n  }\n\n  run() {\n    // updateBounds for this layer will be the dirtyBounds eroded by the padding for convolution\n    const updateBounds = dilateBounds(this.input.dirtyBounds, -this._pad);\n    const [ minX, minY, maxX, maxY ] = updateBounds;\n    const h = maxY - minY;\n    const w = maxX - minX;\n\n    const dirty = this.input.dirty;\n\n    // tf backend\n    const times = [];\n    let ct0 = Date.now();\n    let ct1;\n\n    const d = dirty.reshape([1, ...dirty.shape]).selection;\n    const input = tf.tensor4d(d.data, d.shape);\n\n    ct1 = Date.now();\n    times.push('to tensor -> ');\n    times.push(ct1 - ct0);\n    ct0 = ct1;\n\n    times.push(tf.getBackend());\n    const output = this._tflayer.apply(input);\n\n    ct1 = Date.now();\n    times.push('apply conv -> ');\n    times.push(ct1 - ct0);\n    ct0 = ct1;\n\n    times.push(tf.getBackend());\n    const dsync = output.dataSync();\n\n    ct1 = Date.now();\n    times.push('data sync -> ');\n    times.push(ct1 - ct0);\n    ct0 = ct1;\n\n    times.push(tf.getBackend());\n    const updateArr = nj[dtype](dsync);\n\n    ct1 = Date.now();\n    times.push('to array -> ');\n    times.push(ct1 - ct0);\n    ct0 = ct1;\n\n    console.log('conv stats:', 'total time -> ', times.reduce((a, b) => Number.isInteger(b) ? a + b : a, 0), ...times);\n\n    const updateShape = [ this.output._channels, h, w ];\n    const update = updateArr.reshape(updateShape);\n    this.output.assign(update, null, updateBounds);\n    this.output.calcStats(output);\n    this.input.clean();\n  }\n}\n\nfunction getConvLayer(filters, kernelSize) {\n  // data format in: [out, in, h, w]\n  // data format out: [filter_height, filter_width, in_channels, out_channels]\n  // -> filters: A Tensor. Must have the same type as input. A 4-D tensor of shape\n  const numOutputs = filters.shape[0];\n  const weights = filters.transpose(2, 3, 1, 0).tolist();\n  // create bias such that the ideal input is 1\n  const biases = nj.zeros([numOutputs]).tolist();\n\n  // we only need a bias for all negative weights (the others are balanced to equal 1 on ideal)\n  filters.tolist().forEach((filter, i) => {\n    // for filters that are all negative, give bias of positive 1\n    if (filter.flat().flat().filter(v => v > 0).length === 0) {\n      biases[i] = 64;\n    }\n  });\n\n  const weightsTensor = [tf.tensor4d(weights), tf.tensor1d(biases)];\n  // const weightsTensor = [tf.tensor4d(weights)];\n  const layer = tf.layers.conv2d({\n    filters: numOutputs,\n    kernelSize: kernelSize,\n    strides: 1,\n    padding: 'valid',\n    weights: weightsTensor,\n    activation: 'relu',\n    dataFormat: 'channelsFirst',\n    // useBias: false\n  });\n  return layer;\n}\n","import nj from 'numjs';\nimport * as tf from '@tensorflow/tfjs';\nimport { dtype } from './convArray';\n\nexport default class MaxPoolLayer {\n  constructor(input, output, poolSize) {\n    this.input = input;\n    this.output = output;\n    this.poolSize = poolSize;\n    this._tflayer = tf.layers.maxPooling2d({ poolSize, dataFormat: 'channelsFirst' });\n  }\n\n  run() {\n    // for pool layers, the padding is to the edge of each pool, so update bounds are the reduced dirty bounds\n    const dirty = this.input.dirty;\n    const updateBounds = this.input.dirtyBounds.map(b => Math.ceil(b / this.poolSize));\n    const [ minX, minY, maxX, maxY ] = updateBounds;\n    const h = maxY - minY;\n    const w = maxX - minX;\n\n    const d = dirty.reshape([1, ...dirty.shape]).selection;\n    const input = tf.tensor4d(d.data, d.shape);\n    const output = this._tflayer.apply(input);\n    const updateShape = [ this.output._channels, h, w ];\n    const update = nj[dtype](output.dataSync()).reshape(updateShape);\n\n    this.output.assign(update, null, updateBounds);\n    this.output.calcStats(output);\n    this.input.clean();\n  }\n}\n","import ConvArray from './convArray';\nimport ConvLayer from './convLayer';\nimport MaxPoolLayer from './maxPoolLayer';\n\nexport default class Network {\n  constructor(inputShape, layerInfos) {\n    this.layerInfos = layerInfos;\n\n    // setup input and output data reps\n    this.arrs = []; // should be length = layers.length + 1\n    let channels = 1;\n    let shape = inputShape;\n    for (const layerInfo of layerInfos) {\n      let arr;\n      if (layerInfo.type === 'conv2d') {\n        arr = ConvArray.conv(channels, shape, layerInfo.kernelSize);\n        // next layer will have the channels created by this layer\n        channels = layerInfo.filters.length;\n        // we only allow a stride of 1 on convs for now\n        // shape = ?\n      } else if (layerInfo.type === 'maxPool2d') {\n        arr = ConvArray.pool(channels, shape, layerInfo.poolSize);\n        // pool layers only affect shape of layers in hyper column\n        shape = shape.map(v => Math.ceil(v / layerInfo.poolSize));\n      }\n      this.arrs.push(arr);\n    }\n    // add a final arr for the output\n    this.arrs.push(ConvArray.conv(channels, shape, 0));\n\n    // setup layers\n    this.layers = [];\n    for (const [i, layerInfo] of layerInfos.entries()) {\n      const input = this.arrs[i];\n      const output = this.arrs[i + 1];\n      let layer;\n      if (layerInfo.type === 'conv2d') {\n        layer = new ConvLayer(input, output, layerInfo.filters, layerInfo.kernelSize);\n      } else if (layerInfo.type === 'maxPool2d') {\n        layer = new MaxPoolLayer(input, output, layerInfo.poolSize);\n      }\n      this.layers.push(layer);\n    }\n\n    // prune first layer kernels with no connection going forward?\n  }\n\n  /**\n   * Given a change to the input layer, update all\n   */\n  run(dirty, dirtyBounds) {\n    // update first layer\n    this.arrs[0].assign(dirty, 0, dirtyBounds);\n\n    // propogate through network by running layers\n    const t00 = Date.now();\n    for (const [i, layer] of this.layers.entries()) {\n      const t0 = Date.now();\n      layer.run();\n      const t1 = Date.now();\n      console.log('time for layer ' + i, t1 - t0);\n    }\n    const t01 = Date.now();\n    console.log('total network time', t01 - t00);\n\n    // mark last layer clean (or it will accumlate dirty!)\n    this.arrs[this.arrs.length - 1].clean();\n  }\n\n  getOutput(i) {\n    const { arr: acts, _max: max, _ids: ids } = this.arrs[i + 1];\n    return { acts, max, ids };\n  }\n}\n","import nj from 'numjs';\nimport { dtype } from './conv/convArray';\nimport Network from './conv/network';\nimport p5 from 'p5';\n\nfunction limit(v, min, max) {\n  return v < min ? min : (v >= max ? max - 0.001 : v);\n}\n\nfunction safePt(pt, bounds) {\n  const [ minX, minY, maxX, maxY ] = bounds;\n  const x = limit(pt.x, minX, maxX);\n  const y = limit(pt.y, minY, maxY);\n  return new p5.Vector(x, y);\n}\n\nexport default class SmartCanvas {\n  constructor(p, shape, layerInfos) {\n    // assumes p is blank\n    this.p = p;\n    this.shape = shape;\n    this.layerInfos = layerInfos;\n    this.network = new Network(this.shape, layerInfos);\n    this._dirtyBounds = null;\n    this._backup = null;\n    this._listeners = [];\n  }\n\n  // do full calc once p5 is ready\n  init() {\n    if (!this.p._setupDone) {\n      setTimeout(() => this.init(), 10);\n    } else {\n      this.forceFullUpdate();\n    }\n  }\n\n  reset() {\n    this.p.clear();\n    this.forceFullUpdate();\n  }\n\n  get bounds() {\n    const [ maxY, maxX ] = this.shape;\n    return [ 0, 0, maxX, maxY ];\n  }\n\n  /**\n   * Draw a new line segment and update the dirtyBounds for this SmartCanvas\n   * @param {{x: number, y: number}} start - Start point of line segment\n   * @param {{x: number, y: number}} end - End point of line segment\n   * @param {boolean} makeBackup - If true, store the affected canvas area in the backup cache before change is applied.\n   */\n  addSegment(start, end, makeBackup=false) {\n    // sanitize\n    start = safePt(start, this.bounds);\n    end = safePt(end, this.bounds);\n\n    const bounds = this._getLineBounds(start, end);\n    if (makeBackup) {\n      if (this._backup !== null) {\n        console.log('Overwriting existing backup! Should call restore() first');\n      }\n      this._backup = {\n        img: this.p.get(...bounds),\n        bounds\n      };\n    }\n\n    this.p.line(start.x, start.y, end.x, end.y);\n    this._updateDirtyBounds(bounds);\n  }\n\n  /**\n   * Restore the image are from the backup cache to what it was previously and update dirty bounds to include\n   */\n  restore() {\n    if (this._backup !== null) {\n      const { img, bounds } = this._backup;\n      const [ x, y ] = bounds.slice(0, 2);\n      this.p.image(img, x, y);\n      this._backup = null;\n      this._updateDirtyBounds(bounds);\n    } else {\n      console.log('Backup failed, no backup cache available');\n    }\n  }\n\n  /**\n   * Recalculate the network activations within the current dirty bounds and reset dirty bounds to null\n   */\n  update() {\n    if (this._dirtyBounds) {\n      // get dirty area\n      const [ sx, sy, ex, ey ] = this._dirtyBounds;\n      const g = this.p.get(sx, sy, ex - sx, ey - sy);\n      g.loadPixels();\n      const dirty = nj[dtype](g.pixels).reshape(g.height, g.width, 4).slice(null, null, [3, 4]).reshape(1, g.height, g.width);\n      this.network.run(dirty, this._dirtyBounds);\n      this._notifyListeners({ network: this.network, dirtyBounds: [...this._dirtyBounds] });\n      this._dirtyBounds = null; // reset dirty bounds\n    }\n  }\n\n  forceFullUpdate() {\n    this._dirtyBounds = this.bounds;\n    this.update();\n  }\n\n  /**\n   * Expand the dirty bounds to include the given bounds\n   */\n  _updateDirtyBounds(bounds) {\n    if (!this._dirtyBounds) {\n      this._dirtyBounds = bounds;\n    } else {\n      const [ sx, sy, ex, ey ] = bounds;\n      const [ dsx, dsy, dex, dey ] = this._dirtyBounds;\n      this._dirtyBounds = [ Math.min(sx, dsx), Math.min(sy, dsy), Math.max(ex, dex), Math.max(ey, dey) ];\n    }\n  }\n\n  _getLineBounds(start, end) {\n    const pad = 1; // stroke weight is 2 right now, so pad by 1\n    let minX = Math.min(start.x, end.x) - pad;\n    let minY = Math.min(start.y, end.y) - pad;\n    let maxX = Math.max(start.x, end.x) + pad + 1;\n    let maxY = Math.max(start.y, end.y) + pad + 1;\n    const bounds = [ minX, minY, maxX, maxY ].map(v => Math.floor(v));\n    return bounds;\n  }\n\n  addListener(fn) {\n    this._listeners.push(fn);\n  }\n\n  removeListener(fn) {\n    const i = this._listeners.indexOf(fn);\n    if (i > -1) {\n      this._listeners.splice(i, 1);\n    }\n  }\n\n  _notifyListeners(...params) {\n    for (let fn of this._listeners) {\n      if (fn) {\n        fn(...params);\n      }\n    }\n  }\n}\n","import React, { useEffect, useRef, useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Slider from '@material-ui/core/Slider';\nimport SmartCanvas from '../../js/smartCanvas';\nimport p5 from 'p5';\nimport { getSketch } from '../../js/sketches/drawingInputSketch';\n\nfunction KernelInspectorDrawingInput(props) {\n  const { shape, kernels, onUpdate } = props;\n\n  const [ rotation, setRotation ] = useState(0);\n\n  const imgRef = useRef(null);\n  const pRef = useRef(null);\n  const smartCanvasRef = useRef(null);\n\n  useEffect(() => {\n    if (!pRef.current) {\n      // currently doesn't support updating sketch\n      pRef.current = new p5(getSketch(shape, smartCanvasRef), imgRef.current);\n    }\n  });\n\n  useEffect(() => {\n    // only updates to kernels should actually retrigger this\n    const layerInfos = [\n      {\n        filters: kernels.map(k => [k]),\n        kernelSize: kernels[0].length,\n        type: 'conv2d'\n      }\n    ];\n    smartCanvasRef.current = new SmartCanvas(pRef.current, shape, layerInfos);\n    smartCanvasRef.current.addListener(onUpdate);\n    smartCanvasRef.current.init();\n  }, [ kernels, shape, onUpdate ]);\n\n  useEffect(() => {\n    if (!pRef.current._setupDone) {\n      return;\n    }\n\n    pRef.current.setRotation(rotation);\n    // entire canvas is dirty\n    smartCanvasRef.current.forceFullUpdate();\n  }, [ rotation ]);\n\n  const clear = useCallback(() => smartCanvasRef.current.reset(), []);\n\n  return (\n    <Grid container direction=\"column\" spacing={1} style={{ position: 'relative' }}>\n      <Grid item style={{ margin: '0 auto' }}>\n        <div ref={imgRef} className=\"zoom300\"></div>\n        <div style={{ marginTop: '10px', textAlign: 'center' }}>\n          <span>Make a drawing</span>\n          <Button style={{ marginLeft: '10px' }} variant=\"contained\" size=\"small\" color=\"primary\" aria-label=\"clear\" onClick={clear}>\n            Clear\n          </Button>\n        </div>\n      </Grid>\n      <Grid item style={{ margin: '20px auto', maxWidth: '200px', minWidth: '160px' }}>\n        <div>\n          <Slider\n            defaultValue={rotation}\n            track={false}\n            aria-labelledby=\"drawing rotation\"\n            valueLabelDisplay=\"auto\"\n            marks={[{ value: -360, label: '-360'}, { value: 0, label: '0'}, { value: 360, label: '360'}]}\n            step={1}\n            min={-360}\n            max={360}\n            onChange={(event, value) => setRotation(value)}\n          />\n        </div>\n        <div style={{ marginTop: '10px', textAlign: 'center' }}>Test rotation invariance</div>\n      </Grid>\n    </Grid>\n  );\n}\n\nKernelInspectorDrawingInput.propTypes = {\n  kernels: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))).isRequired,\n  shape: PropTypes.arrayOf(PropTypes.number).isRequired,\n  onUpdate: PropTypes.func,\n};\n\nexport default KernelInspectorDrawingInput;\n","/**\n * return the p5 sketch for the SmartCanvas\n */\nexport function getSketch(shape, smartCanvasRef) {\n  let dirty = false;\n  return (p) => {\n    p.setup = () => {\n      p.pixelDensity(1);\n      const [ w, h ] = shape;\n      p.createCanvas(w, h);\n      p.strokeWeight(2);\n    };\n\n    p.draw = () => {\n      if (p.mouseIsPressed) {\n        // while mouse is pressed, add line segments to canvas\n        const start = { x: p.pmouseX, y: p.pmouseY };\n        const end = { x: p.mouseX, y: p.mouseY };\n        if (!(start.x < 0 || start.y < 0 || end.x < 0 || end.y < 0 || end.x >= p.width || start.x >= p.width || end.y >= p.height || start.y >= p.height)) {\n          // clear cache on draw (multiple new lines and new rotations will degrade image, but can clear)\n          if (p._rotationCache) {\n            p._rotationCache = null;\n          }   // draw new line\n          smartCanvasRef.current.addSegment(start, end);\n          dirty = true;\n        }\n      } else {\n        // at end of mouse press, update LineInfo\n        if (dirty) {\n          smartCanvasRef.current.update();\n          dirty = false;\n        }\n      }\n    };\n\n    p.setRotation = rotation => {\n      // we store the image since redraws will degrade (clears on draw)\n      if (!p._rotationCache) {\n        p._rotationCache = p.get();\n      }\n      p.clear();\n      p.push();\n      p.angleMode(p.DEGREES);\n      console.log(rotation, p._rotationCache);\n\n      p.translate(p.width / 2, p.height / 2);\n      p.rotate(rotation);\n      p.translate(-p.width / 2, -p.height / 2);\n\n      p.image(p._rotationCache, 0, 0);\n      p.pop();\n    };\n  };\n}\n","import nj from 'numjs';\n\n// some good contrast colors to start\nconst colors = ['#e6194b', '#3cb44b', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075'];\n// save colors so that they are consistent between renders\nconst colorMap = {};\n\n/**\n * Returns a p5 sketch that can draw a 2D array\n */\nexport function getSketch(kernels) {\n  // spacing between rectangles\n  let ids = null;\n  let max = null;\n  let scale = 1;\n  let needsRefresh = false;\n  let drawWindow = true;\n  const zoomWindow = 4;\n\n  return (p) => {\n    p.setData = (_ids, _max, _scale=1) => {\n      // save the data for rendering in draw loop\n      ids = _ids;\n      // normalize max 2d array\n      let maxMax = Math.max(..._max.flat());\n      max = _max.map(row => row.map(v => v / maxMax));\n      scale = _scale;\n      needsRefresh = true;\n    }\n\n    p.setKernels = kernels => {\n      // create images based on kernels so we dont have to recalculate\n      p._kernelCache = [];\n      for (const kernel of kernels) {\n        const icon = p._getIcon(kernel);\n        p._kernelCache.push(icon);\n      }\n    }\n\n    p.setup = () => {\n      p.pixelDensity(1);\n      p.createCanvas(300, 300);\n      p.stroke(255);\n      p.noSmooth();\n\n      p._colorCodedGraphics = p.createGraphics(300, 300);\n    };\n\n    p.draw = () => {\n      if (ids && max) {\n        // check if we need to resize\n        const h = ids.length * scale;\n        const w = ids[0].length * scale;\n        if (h !== p.height || w !== p.width) {\n          p.resizeCanvas(w, h);\n          p._colorCodedGraphics = p.createGraphics(ids[0].length, ids.length);\n        }\n\n        // check if mouse is in canvas (with padding of zoomWindow)\n        const x = Math.floor(p.mouseX / scale);\n        const y = Math.floor(p.mouseY / scale);\n        const zoomScale = scale * 4;\n        const isMouseInBounds = p._isMouseInBounds();\n        if (isMouseInBounds && drawWindow) {\n          // if so, we need to redraw with overlay\n          p.clear();\n          p._drawBackground(ids, max, scale);\n\n          // get zoomed in version\n          const bounds = [\n            Math.max(0, x - zoomWindow),\n            Math.max(0, y - zoomWindow),\n            Math.min(w / scale, x + zoomWindow + 1),\n            Math.min(h / scale, y + zoomWindow + 1)\n          ];\n          const [ x0, y0, x1, y1 ] = bounds;\n          const slice_ids = nj.array(ids).slice([y0, y1], [x0, x1]).tolist();\n          const slice_max = nj.array(max).slice([y0, y1], [x0, x1]).tolist();\n\n          // draw zoomed in version as overlay\n          p.push();\n          p.translate((x * scale) - ((zoomWindow + 0.5) * zoomScale), (y * scale) - ((zoomWindow + 0.5) * zoomScale));\n          // blank out background\n          p.push();\n          p.fill(255);\n          p.noStroke();\n          p.rect(0, 0, slice_ids[0].length * zoomScale, slice_ids.length * zoomScale);\n          p.pop();\n          // draw zoom\n          p._drawIconArray(slice_ids, slice_max, zoomScale);\n          // draw outline\n          p.push();\n          p.noFill();\n          p.strokeWeight(1);\n          p.stroke('#b2b2b2');\n          p.rect(0, 0, slice_ids[0].length * zoomScale, slice_ids.length * zoomScale);\n          p.pop();\n          // outline the center of the zoom\n          p.push();\n          p.noFill();\n          p.stroke('#b2b2b2');\n          p.strokeWeight(1);\n          p.rect(zoomWindow * zoomScale, zoomWindow * zoomScale, zoomScale, zoomScale);\n          p.pop();\n          p.pop();\n\n          needsRefresh = true;\n        } else {\n          // Only redraw once when zoom leaves, because then it is static\n          if (needsRefresh) {\n            p.clear();\n            p._drawBackground(ids, max, scale);\n            needsRefresh = false;\n          }\n        }\n      }\n    };\n\n    // check if legal mouse position\n    p._isMouseInBounds = () => {\n      const h = p.height;\n      const w = p.width;\n      const x = p.mouseX;\n      const y = p.mouseY;\n      const pad = zoomWindow * scale;\n      return x > pad && y > pad && x < w - pad && y < h - pad;\n    }\n\n    p.mouseClicked = () => {\n      if (ids && scale) {\n        if (p._isMouseInBounds()) {\n          const x = Math.floor(p.mouseX / scale);\n          const y = Math.floor(p.mouseY / scale);\n          if (p._onSelect) {\n            p._onSelect({ x, y });\n            // close zoom window for a brief moment like a camera shutter\n            drawWindow = false;\n            setTimeout(() => {\n              drawWindow = true;\n            }, 150);\n          }\n          p._pt = { x, y };\n        }\n      }\n    };\n\n    p._drawBackground = (ids, max, scale=1) => {\n      const g = p._colorCodedGraphics;\n      g.clear();\n      g.loadPixels();\n      for (let y = 0; y < ids.length; y += 1) {\n        for (let x = 0; x < ids[0].length; x += 1) {\n          // for performance reasons only draw ones that are dark enough\n          if (max[y][x] >= 0.1) {\n            let key = ids[y][x];\n            if (key >= 0) {\n              let c = p._getColor(key);\n              c.setAlpha(max[y][x] * 255);\n              g.set(x, y, c);\n            }\n          }\n        }\n      }\n      g.updatePixels();\n      p.push();\n      p.scale(scale);\n      p.image(g.get(), 0, 0);\n      p.pop();\n\n      if (p._pt) {\n        const { x, y } = p._pt;\n        // draw triangle\n        // p.push();\n        // p.scale(scale);\n        // p.fill(0);\n        // p.noStroke();\n        // const zoomScale = 6 / scale;\n        // p.translate(0.5, 0);\n        // p.triangle(x, y, x + (zoomScale * 0.75), y - (zoomScale * 2), x - (zoomScale * 0.75), y - (zoomScale * 2));\n        // p.pop();\n\n\n        // draw selected point\n        const key = ids[y][x];\n        const intensity = max[y][x];\n        const rectScale = 10;\n\n        p.push();\n        p.translate(((x + 0.5) - (rectScale / 2)) * scale, ((y + 0.5) - (rectScale / 2)) * scale);\n        if (intensity > 0.1) {\n          p.fill(255);\n          p.noStroke();\n          p.rect(0, 0, scale * rectScale, scale * rectScale);\n          const kernel = p._kernelCache[key];\n          // p.tint(255, intensity * 255 * );\n          p.image(kernel, 0, 0, scale * rectScale, scale * rectScale);\n          p.noFill();\n          p.stroke(0);\n          p.rect(0, 0, scale * rectScale, scale * rectScale);\n        } else {\n          p.fill(255);\n          p.stroke(0);\n          p.rect(0, 0, scale * rectScale, scale * rectScale);\n        }\n        p.pop();\n\n        // const c = (intensity > 0.1) ? p._getColor(key) : p.color(255, 255, 255);\n        // const rectScale = 5;\n        // c.setAlpha(255);\n        // p.push();\n        // p.fill(c);\n        // p.stroke(0);\n        // p.translate(((x + 0.5) - (rectScale / 2)) * scale, ((y + 0.5) - (rectScale / 2)) * scale);\n        // p.rect(0, 0, scale * rectScale, scale * rectScale);\n        // p.pop();\n\n\n      }\n    };\n\n    p._drawIconArray = (ids, max, scale=1) => {\n      for (let y = 0; y < ids.length; y += 1) {\n        for (let x = 0; x < ids[0].length; x += 1) {\n          let intensity = max[y][x];\n          if (intensity > 0.1) {\n            let key = ids[y][x];\n            if (key >= 0) {\n              const kernel = p._kernelCache[key];\n              p.push();\n              p.tint(255, intensity * 255);\n              p.image(kernel, x * scale, y * scale, scale, scale);\n              p.pop();\n            }\n          }\n        }\n      }\n    };\n\n    p._getColor = i => {\n      let c = colorMap[i];\n      if (!c) {\n        if (colors[i]) {\n          c = p.color(colors[i]);\n        } else {\n          c = p.color([ Math.random() * 155, Math.random() * 155, Math.random() * 155 ]);\n        }\n        colorMap[i] = c;\n      }\n      return c;\n    };\n\n    p._getIcon = imgArr => {\n      const kernelSize = imgArr.length;\n      const g = p.createGraphics(kernelSize, kernelSize);\n      // normalize to max value (positive or negative)\n      const flatArr = imgArr.flat();\n      let max = Math.max(...flatArr);\n      max = max > 0 ? max : -Math.min(...flatArr);\n      imgArr = imgArr.map(row => row.map(v => v / max));\n\n      g.loadPixels();\n      for (let y = 0; y < imgArr.length; y += 1) {\n        for (let x = 0; x < imgArr[0].length; x += 1) {\n          const v = imgArr[y][x] * 255;\n          if (v > 0) {\n            g.set(x, y, p.color(0, 0, 0, v));\n          } else if (v < 0) {\n            g.set(x, y, p.color(214, 30, 30, -v * 0.75));\n          }\n        }\n      }\n      g.updatePixels();\n      return g.get();\n    };\n  };\n}\n","import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport p5 from 'p5';\nimport { getSketch } from '../../js/sketches/colorCodedMapSketch';\n\nconst KernelInspectorColorCodedMap = props => {\n  const { kernels, pt, ids, max, scale, onSelect } = props;\n  const imgRef = useRef(null);\n  const pRef = useRef(null);\n\n  useEffect(() => {\n    if (imgRef.current) {\n      imgRef.current.innerHTML = '';\n      pRef.current = new p5(getSketch(), imgRef.current);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (pRef.current) {\n      pRef.current.setKernels(kernels);\n    }\n  }, [ kernels ]);\n\n  useEffect(() => {\n    if (pRef.current) {\n      pRef.current._pt = pt;\n    }\n  }, [ pt ]);\n\n  useEffect(() => {\n    if (pRef.current && ids && max) {\n      pRef.current.setData(ids, max, scale);\n    }\n  }, [ ids, max, scale ]);\n\n  useEffect(() => {\n    if (pRef.current) {\n      pRef.current._onSelect = onSelect;\n    }\n  }, [ onSelect ]);\n\n  return (\n    <div ref={imgRef} className=\"zoom300\"></div>\n  );\n};\n\nKernelInspectorColorCodedMap.propTypes = {\n  ids: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  max: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  kernels: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n  scale: PropTypes.number,\n  pt: PropTypes.object,\n  onSelect: PropTypes.func,\n};\n\nexport default KernelInspectorColorCodedMap;\n","import * as d3 from 'd3';\n\n// render the kernels using d3 on top of the x bars\nfunction renderKernelsOnBars(el, x, kernels) {\n  // flatten kernels into a data set with each individual weight as an entry\n  const flatKernelData = [];\n  kernels.forEach((kernel, i) => {\n    // normalize\n    let max = Math.max(...kernel.map(row => Math.max(...row.map(v => Math.abs(v)))));\n    kernel.forEach((row, rIndex) => row.forEach((v, colIndex) => {\n      flatKernelData.push({ kIndex: i, row: rIndex, col: colIndex, v: v / max });\n    }));\n  });\n\n  // render flat kernel data\n  const weightPixels = el.append('g').selectAll('.pixel').data(flatKernelData).enter();\n  const pixelSize = x.bandwidth() / kernels[0].length;\n  weightPixels.append('rect')\n    .attr('fill', d => {\n      if (d.v >= 0) {\n        return 'rgba(0, 0, 0, ' + (d.v) + ')';\n      } else {\n        return 'rgba(214, 30, 30, ' + (-d.v * 0.75) + ')';\n      }\n    })\n    .style('stroke-width', 0)\n    .attr('x', d => x(d.kIndex) + (pixelSize * d.col))\n    .attr('y', d => (pixelSize * d.row))\n    .attr('height', pixelSize)\n    .attr('width', pixelSize);\n\n  // render outlines of kernels\n  const kernelOutlines = el.append('g').selectAll('.outline').data(kernels).enter();\n  kernelOutlines.append('rect')\n    .attr('x', (d, i) => x(i))\n    .attr('y', 0)\n    .attr('height', x.bandwidth())\n    .attr('width', x.bandwidth())\n    .style('stroke', '#b2b2b2')\n    .style('fill', 'none')\n    .style('stroke-width', 1);\n}\n\n// render bar chart of activations with the kernel icon on top of each bar\nexport function renderChart(el, kernels, acts) {\n  // format data for d3\n  const data = acts.map((act, i) => ({ name: i, value: act / 255 }));\n\n  // setup styles\n  const margin = {top: 4, right: 4, bottom: 4, left: 4};\n  const width = el.offsetWidth - margin.left - margin.right;\n  const height = width * 0.5;\n\n  // setup bands\n  const x = d3.scaleBand()\n    .domain(data.map(d => d.name))\n    .range([margin.left, width - margin.right])\n    .padding(0.1);\n  const y = d3.scaleLinear()\n    .domain([0, 1])\n    .range([height - margin.bottom, margin.top + x.bandwidth()]);\n\n  // create parent el\n  const svg = d3.select(el).append('svg')\n    .attr('width', width)\n    .attr('height', height);\n\n  // draw bars\n  const bars = svg.append('g').selectAll('.bar').data(data).enter();\n  bars.append('rect')\n      .attr('fill', '#e0e0e0')\n      .attr('stroke', '#b2b2b2')\n      .style('stroke-width', 1)\n      .attr('x', d => x(d.name))\n      .attr('y', d => y(d.value ? d.value : 0))\n      .attr('height', d => y(0) - y(d.value ? d.value : 0))\n      .attr('width', x.bandwidth())\n  bars.exit().remove();\n  renderKernelsOnBars(svg, x, kernels);\n\n  // draw x axis ticks\n  const xAxis = g => g\n    .attr('transform', `translate(0,${height - margin.bottom})`)\n    .attr('color', '#b2b2b2')\n    .call(d3.axisBottom(x).tickSize(0));\n  svg.append('g')\n    .style('font-size', '0')\n    .call(xAxis);\n\n  // // draw y axis percent labels\n  // const yAxis = g => g\n  //   .attr('transform', `translate(${margin.left},0)`)\n  //   .call(d3.axisLeft(y).tickFormat(d3.format('.0%')))\n  //   .call(g => g.select('.domain').remove());\n  // svg.append('g')\n  //   .style('font-size', '10px')\n  //   .call(yAxis);\n\n  return svg.node();\n}\n","import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { renderChart } from '../../js/charts/activationChart';\n\nconst KernelInspectorActivationChart = props => {\n  const chartRef = useRef(null);\n\n  const { kernels, acts } = props;\n  useEffect(() => {\n    // clear the previous chart\n    chartRef.current.innerHTML = '';\n    if (kernels && acts) {\n      renderChart(chartRef.current, kernels, acts);\n    }\n  }, [ kernels, acts ]);\n\n  return (\n    <div ref={chartRef} style={props.style}></div>\n  );\n};\n\nKernelInspectorActivationChart.propTypes = {\n  kernels: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))).isRequired,\n  acts: PropTypes.arrayOf(PropTypes.number),\n};\n\nexport default KernelInspectorActivationChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Array2DViewList from '../UI/Array2DViewList';\n\n// Renders two lists of 2D arrays as p5 sketches with one overlaid and transparent\nconst Array2DViewOverlayList = props => {\n  const { imgArrs, imgArrsOverlay, scale, overlayOpacity } = props;\n  return (\n    <div style={{ ...props.style, position: 'relative' }}>\n      <Array2DViewList\n        imgArrs={imgArrs}\n        scale={scale}\n      />\n      <Array2DViewList\n        imgArrs={imgArrsOverlay}\n        scale={scale}\n        style={{ position: 'absolute', top: '4px', opacity: overlayOpacity || 0.75 }}\n      />\n    </div>\n  );\n}\n\nArray2DViewOverlayList.propTypes = {\n  imgArrs: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n  imgArrsOverlay: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n  scale: PropTypes.number,\n  overlayOpacity: PropTypes.number,\n};\n\nexport default Array2DViewOverlayList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport KernelInspectorActivationChart from './KernelInspectorActivationChart';\nimport Array2DViewOverlayList from '../UI/Array2DViewOverlayList';\nimport nj from 'numjs';\n\n// get indices of kernels with top activations\nfunction selectTopIndices(acts, count) {\n  return acts.map((s, i) => [i, s]).sort((a, b) => (a[1] > b[1]) ? -1 : 1).slice(0, count).map(d => d[0]);\n}\n\nfunction getImgArrAtPt(imgArr, pt, pad) {\n  const { x, y } = pt;\n  const bounds = [ x - pad, y - pad, x + pad + 1, y + pad + 1 ];\n  const [ x0, y0, x1, y1 ] = bounds;\n  if (x0 < 0 || y0 < 0 || x1 > imgArr[0].length || y1 > imgArr.length) {\n    return null;\n  }\n  const imgArrSlice = nj.array(imgArr).slice([y0, y1], [x0, x1]).tolist();\n  return imgArrSlice;\n}\n\nconst KernelInspectorViewOutputAtPoint = props => {\n  let { acts, kernels, count, imgArr, pt } = props;\n\n  if (!acts || !pt || !kernels || kernels.length !== acts.length) {\n    return null;\n  }\n\n  // select the activations and img data at the selected pt\n  const { x, y } = pt;\n  let actsAtPt = acts.map(channel => channel[y][x]);\n  const pad = (kernels[0].length - 1) / 2;\n  const imgArrAtPt = getImgArrAtPt(imgArr, pt, pad);\n\n  // get the indices of the top activations at the given pt\n  const top = selectTopIndices(actsAtPt, count);\n\n  // map the top indices to the corresponding activations and kernels\n  kernels = top.map(i => kernels[i]);\n  actsAtPt = top.map(i => actsAtPt[i]);\n\n  const ptDisplay = `(${pt.x}, ${pt.y})`;\n\n  return (\n    <div style={{ width: '200px' }}>\n      <div>\n        <KernelInspectorActivationChart kernels={kernels} acts={actsAtPt} style={{ margin: '10px auto' }}/>\n        <div style={{ margin: '5px 0 25px 0', textAlign: 'center' }}>\n          Top activations at {ptDisplay}\n        </div>\n      </div>\n      { imgArrAtPt &&\n        <div>\n          <Array2DViewOverlayList\n            imgArrs={new Array(kernels.length).fill(imgArrAtPt)}\n            imgArrsOverlay={kernels}\n            scale={4.5}\n            overlayOpacity={0.8}\n            style={{ margin: '10px auto' }}\n          />\n          <div style={{ margin: '10px 0', textAlign: 'center' }}>\n            Kernel overlays at {ptDisplay}\n          </div>\n        </div>\n      }\n    </div>\n  );\n};\n\nKernelInspectorViewOutputAtPoint.propTypes = {\n  acts: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n  kernels: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n  imgArr: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  pt: PropTypes.object,\n  count: PropTypes.number.isRequired,\n};\n\nexport default KernelInspectorViewOutputAtPoint;\n","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport KernelInspectorColorCodedMap from './KernelInspectorColorCodedMap';\nimport KernelInspectorViewOutputAtPoint from './KernelInspectorViewOutputAtPoint';\n\nfunction KernelInspectorViewOutput(props) {\n  const { data, kernels, defaultPt } = props;\n  // store selected point on color-coded map\n  const [ pt, setPt ] = useState(defaultPt);\n\n  // format data coming from network on updates\n  const { imgArr, acts, max, ids } = useMemo(() => {\n    if (data && data.network) {\n      const { acts: imgArr } = data.network.getOutput(-1); // get input\n      const { acts, max, ids } = data.network.getOutput(0); // get output\n      // unwrap ndarrays into arrays\n      return { imgArr: imgArr.tolist()[0], acts: acts.tolist(), max: max.tolist(), ids: ids.tolist() };\n    }\n    return {};\n  }, [ data ]);\n\n  return (\n    <Grid container spacing={4} justify=\"center\" style={props.style}>\n      <Grid item>\n        <div>\n          <KernelInspectorColorCodedMap\n            kernels={kernels}\n            max={max}\n            ids={ids}\n            scale={3}\n            onSelect={setPt}\n            pt={pt}\n          />\n          <div style={{ textAlign: 'center' }}>\n            <div style={{ marginTop: '10px' }}>Select to inspect</div>\n          </div>\n        </div>\n      </Grid>\n      <Grid item>\n        <KernelInspectorViewOutputAtPoint\n          kernels={kernels}\n          imgArr={imgArr}\n          acts={acts}\n          pt={pt}\n          count={Math.min(8, kernels.length)}\n          style={{ width: '400px' }}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n\nKernelInspectorViewOutput.propTypes = {\n  data: PropTypes.object.isRequired,\n  kernels: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))).isRequired,\n  defaultPt: PropTypes.object.isRequired,\n};\n\nexport default KernelInspectorViewOutput;\n","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport KernelInspectorDrawingInput from './KernelInspectorDrawingInput';\nimport KernelInspectorViewOutput from './KernelInspectorViewOutput';\nimport { getKernels } from '../../js/kernel';\n\n// shape of the drawing area\nconst shape = [ 60, 60 ];\n// const shape = [ 256, 256 ];\nconst defaultPt = { x: Math.floor(shape[0] / 2) - 1, y: Math.floor(shape[1] / 2) - 1 }\n\nfunction KernelInspector(props) {\n  // store up-to-date data from network, use this object to trigger updates\n  const [ data, setData ] = useState(null);\n\n  // get the kernels\n  const { numComponents, lambda, sigma, windowSize, types } = props.kernelSettings;\n  const kernels = useMemo(() => {\n    return getKernels(windowSize, 2 ** numComponents, lambda, sigma, types);\n  }, [ numComponents, lambda, sigma, windowSize, types ]);\n\n  return (\n    <div style={props.style}>\n      <Grid container spacing={4} justify=\"center\">\n        <Grid item>\n          <KernelInspectorDrawingInput\n            kernels={kernels}\n            shape={shape}\n            onUpdate={setData}\n          />\n        </Grid>\n        <Grid item>\n          { data && <KernelInspectorViewOutput kernels={kernels} data={data} defaultPt={defaultPt} /> }\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nKernelInspector.propTypes = {\n  kernelSettings: PropTypes.object.isRequired,\n};\n\nexport default KernelInspector;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport KernelMaker from '../KernelTuner/KernelMaker';\nimport KernelInspector from '../KernelTuner/KernelInspector';\nimport Container from '@material-ui/core/Container';\n\nfunction KernelTuner(props) {\n  const { kernelSettings, updateKernelSettings } = props;\n  return (\n    <div>\n      <h2>Kernel Tuner</h2>\n      <Container maxWidth=\"md\">\n        <KernelMaker defaultKernelSettings={kernelSettings} updateKernelSettings={updateKernelSettings} />\n      </Container>\n      <Container maxWidth=\"lg\" style={{ marginTop: '40px' }}>\n        <KernelInspector kernelSettings={kernelSettings} />\n      </Container>\n    </div>\n  );\n}\n\nKernelTuner.propTypes = {\n  kernelSettings: PropTypes.object.isRequired,\n  updateKernelSettings: PropTypes.func.isRequired,\n};\n\nexport default KernelTuner;\n","import React, { useState, useEffect } from 'react';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport grey from '@material-ui/core/colors/grey';\nimport KernelTuner from '../KernelTuner/KernelTuner';\nimport { kernelTypes } from '../../js/kernel';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: grey,\n  },\n});\n\n// Default kernel settings on first page load\nconst defaultKernelSettings = {\n  numComponents: 2, // actual num is 2^numComponents\n  lambda: 4.9,\n  sigma: 3.3,\n  windowSize: 7,\n  types: [kernelTypes[0], kernelTypes[1]]\n};\n// Check the saved kernel settings have not been corrupted somehow\nfunction areValidKernelSettings(kernelSettings) {\n  if (!kernelSettings) {\n    return false;\n  }\n  const { numComponents, lambda, sigma, windowSize, types } = kernelSettings;\n  if (isNaN(numComponents) || isNaN(lambda) || isNaN(sigma) || isNaN(windowSize)) {\n    return false;\n  }\n  if (!Array.isArray(types) || types.length === 0) {\n    return false;\n  }\n  for (const kernelType of types) {\n    if (!kernelTypes.includes(kernelType)) {\n      // invalid type\n      return false;\n    }\n  }\n  return true;\n}\nconst storageKey = 'kernelSettings';\nconst storedSettings = JSON.parse(localStorage.getItem(storageKey));\nconst initialKernelSettings = areValidKernelSettings(storedSettings) ? storedSettings : defaultKernelSettings;\n\nexport default function App() {\n  const [ kernelSettings, updateKernelSettings ] = useState(initialKernelSettings);\n\n  // save kernel settings on change\n  useEffect(() => {\n    localStorage.setItem(storageKey, JSON.stringify(kernelSettings));\n  }, [ kernelSettings ]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <KernelTuner kernelSettings={kernelSettings} updateKernelSettings={updateKernelSettings} />\n    </ThemeProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/Page/App';\n\n// console.log = function(){};\n\n// Import @tensorflow/tfjs or @tensorflow/tfjs-core\nimport * as tf from '@tensorflow/tfjs';\n// Adds the WASM backend to the global backend registry.\nimport {setWasmPath} from '@tensorflow/tfjs-backend-wasm';\nsetWasmPath('/tfjs-backend-wasm.wasm'); // or tf.wasm.setWasmPath when using <script> tags.\n\ntf.enableProdMode();\ntf.setBackend('wasm').then(() => main());\n\nfunction main() {\n  ReactDOM.render(\n    (<App />),\n    document.getElementById('root')\n  );\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  serviceWorker.unregister();\n}\n"],"sourceRoot":""}