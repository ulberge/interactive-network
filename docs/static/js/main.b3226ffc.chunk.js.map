{"version":3,"sources":["serviceWorker.js","components/UI/Array2DView.js","js/sketches/array2DViewSketch.js","components/UI/Array2DViewList.js","components/KernelTuner/KernelTunerControls.js","js/kernel.js","components/KernelTuner/KernelTuner.js","js/conv/convArray.js","js/conv/convLayer.js","js/conv/maxPoolLayer.js","js/conv/network.js","js/smartCanvas.js","components/KernelInspector/KernelInspectorDrawingInput.js","js/sketches/drawingInputSketch.js","js/sketches/colorCodedMapSketch.js","components/KernelInspector/KernelInspectorColorCodedMap.js","js/charts/activationChart.js","components/KernelInspector/KernelInspectorActivationChart.js","components/UI/Array2DViewOverlayList.js","components/KernelInspector/KernelInspectorViewOutputAtPoint.js","components/KernelInspector/KernelInspectorViewOutput.js","components/KernelInspector/KernelInspector.js","components/Page/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Array2DView","props","imgArr","scale","imgRef","useRef","pRef","useEffect","current","p5","p","_draw","_setupDone","h","length","w","height","width","resizeCanvas","_img","createGraphics","clear","max","Math","flat","map","row","v","loadPixels","y","x","set","color","updatePixels","image","setTimeout","setup","pixelDensity","createCanvas","stroke","noLoop","noSmooth","ref","Array2DViewList","imgArrs","cols","Grid","container","spacing","style","i","item","key","breakAfter","KernelTunerControls","memo","ToggleButtonGroup","value","types","onChange","event","aria-label","borderRadius","margin","className","type","ToggleButton","textTransform","Slider","defaultValue","numComponents","track","aria-labelledby","marks","label","step","min","windowSize","valueLabelDisplay","lambda","padding","sigma","getCosWaveFn","theta","period","a","PI","cos","sin","getGaussianFn","exp","getLine","wave","gauss","kernel","nj","zeros","assign","tolist","halfWindowSize","floor","yCentered","xCentered","z","getLineEnd","scaleKernel","negativeScaleFactor","positiveSum","positiveMax","negativeMin","forEach","positiveScaleFactor","getKernels","kernels","includes","push","numKernels","rotationDelta","getLines","getLineEnds","angle","b","kernelLineEnd0","kernelLineEnd1","c","getLs","kernelLine","kernelLineEnd","zMax","zMin","getTs","kernelLine0","kernelLine1","getXs","kernelLineEndBase","kernelLineEndBranch0","kernelLineEndBranch1","getYs","KernelTuner","defaultKernelSettings","updateKernelSettings","useState","kernelSettings","setKernelSettings","timerRef","updateKernelSettingsCallback","useCallback","field","newKernelSettings","clearTimeout","useMemo","ExpansionPanel","defaultExpanded","square","boxShadow","border","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","justify","marginRight","dtype","ConvArray","channels","shape","kernelSize","stride","outerShape","this","_shape","_stride","_pad","_outerBounds","ceil","_channels","_arr","_ids","_max","_dirtyBounds","arr","channel","bounds","_slice","slice","_updateDirtyBounds","outputTensor","backend","_backend","tf","ct1","minX","minY","maxX","maxY","times","ct0","Date","now","idsT","argMax","dsync","dataSync","idsUpdate","reshape","idsSlice","flatOutputTensor","flatIdsTensor","layerOffsets","withinLayerOffsets","idLookups","maxT","gather","maxUpdate","maxSlice","console","log","reduce","Number","isInteger","sx","sy","ex","ey","dsx","dsy","dex","dey","table","dirtyBounds","limit","minX0","minY0","maxX0","maxY0","minX1","minY1","maxX1","maxY1","limitBounds","dilateBounds","poolSize","selection","ConvLayer","input","output","filters","_kernelSize","_rawFilters","filter","_tflayer","numOutputs","weights","transpose","weightsTensor","conv2d","strides","activation","dataFormat","useBias","getConvLayer","dirty","d","data","apply","updateArr","updateBounds","size","result","useWebGL","sizeDisplay","runWith","updateShape","update","calcStats","clean","MaxPoolLayer","maxPooling2d","Network","inputShape","layerInfos","arrs","layerInfo","conv","pool","layers","entries","layer","t00","t0","run","t1","t01","acts","ids","safePt","pt","Vector","SmartCanvas","network","_backup","_listeners","forceFullUpdate","init","start","end","makeBackup","_getLineBounds","img","get","line","g","pixels","_notifyListeners","fn","indexOf","splice","KernelInspectorDrawingInput","onUpdate","smartCanvasRef","strokeWeight","draw","mouseIsPressed","pmouseX","pmouseY","mouseX","mouseY","addSegment","getSketch","k","addListener","colors","colorMap","KernelInspectorColorCodedMap","onSelect","innerHTML","needsRefresh","setData","_scale","maxMax","setKernels","_kernelCache","icon","_getIcon","zoomScale","_drawBackground","x0","y0","x1","y1","slice_ids","array","slice_max","translate","fill","noStroke","rect","pop","_drawIconArray","noFill","mouseClicked","_onSelect","_pt","_getColor","setAlpha","triangle","intensity","tint","random","renderChart","el","act","name","offsetWidth","d3","domain","range","bandwidth","svg","append","attr","bars","selectAll","enter","exit","remove","flatKernelData","abs","rIndex","colIndex","kIndex","col","weightPixels","pixelSize","renderKernelsOnBars","call","tickSize","node","KernelInspectorActivationChart","chartRef","Array2DViewOverlayList","imgArrsOverlay","overlayOpacity","position","top","opacity","KernelInspectorViewOutputAtPoint","count","actsAtPt","imgArrAtPt","pad","getImgArrAtPt","s","sort","selectTopIndices","ptDisplay","textAlign","Array","KernelInspectorViewOutput","defaultPt","setPt","getOutput","marginTop","KernelInspector","theme","createMuiTheme","palette","primary","grey","storageKey","storedSettings","JSON","parse","localStorage","getItem","initialKernelSettings","isNaN","isArray","areValidKernelSettings","ReactDOM","render","setItem","stringify","ThemeProvider","Container","maxWidth","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3226ffc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport p5 from 'p5';\nimport { getSketch } from '../../js/sketches/array2DViewSketch';\n\n// Renders a 2D array as a p5 sketch\nconst Array2DView = props => {\n  const { imgArr, scale } = props;\n  const imgRef = useRef(null);\n  const pRef = useRef(null);\n\n  useEffect(() => {\n    // run once\n    if (!pRef.current) {\n      pRef.current = new p5(getSketch(), imgRef.current);\n    }\n\n    // run every time\n    if (pRef.current) {\n      pRef.current._draw(imgArr, scale);\n    }\n  }, [ imgArr, scale ]);\n\n  return (\n    <div ref={imgRef}></div>\n  );\n};\n\nArray2DView.propTypes = {\n  imgArr: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  scale: PropTypes.number\n};\n\nexport default Array2DView;\n","/**\n * Returns a p5 sketch that can draw a 2D array\n */\nexport function getSketch() {\n  return (p) => {\n    /**\n     * Draw a 2D array at the given scale\n     * @param {Number[][]} imgArr - 2D array to initialize canvas (values between [-1, 1])\n     * @param {Number} scale - Scale to draw the canvas\n     */\n    p._draw = (imgArr, scale=1) => {\n      if (!imgArr) {\n        return;\n      }\n\n      // protect against rendering before sketch ready\n      if (!p._setupDone) {\n        setTimeout(() => p._draw(imgArr, scale), 10);\n        return;\n      }\n\n      const h = imgArr.length * scale;\n      const w = imgArr[0].length * scale;\n      if (h !== p.height || w !== p.width) {\n        p.resizeCanvas(w, h);\n        p._img = p.createGraphics(imgArr.length, imgArr[0].length);\n      }\n\n      p.clear();\n\n      // normalize to max value (positive or negative)\n      let max = Math.max(...imgArr.flat());\n      imgArr = imgArr.map(row => row.map(v => v / (max || 1)));\n\n      // render pixels using image\n      p._img.clear();\n      p._img.loadPixels();\n      for (let y = 0; y < imgArr.length; y += 1) {\n        for (let x = 0; x < imgArr[0].length; x += 1) {\n          const v = imgArr[y][x] * 255;\n          if (v > 0) {\n            p._img.set(x, y, p.color(0, 0, 0, v));\n          } else if (v < 0) {\n            p._img.set(x, y, p.color(214, 30, 30, -v * 0.75));\n          }\n        }\n      }\n      p._img.updatePixels();\n      p.image(p._img, 0, 0, w, h);\n\n      // // render pixels as rects\n      // const gridWeight = 0.08;\n      // p.strokeWeight(scale * gridWeight);\n      // for (let y = 0; y < imgArr.length; y += 1) {\n      //   for (let x = 0; x < imgArr[0].length; x += 1) {\n      //     const v = imgArr[y][x] * 255;\n      //     if (v > 0) {\n      //       p.fill(0, 0, 0, v);\n      //       p.rect(x * scale, y * scale, scale, scale);\n      //     } else if (v < 0) {\n      //       p.fill(214, 30, 30, -v / 2);\n      //       p.rect(x * scale, y * scale, scale, scale);\n      //     }\n      //   }\n      // }\n    }\n\n    p.setup = () => {\n      p.pixelDensity(1);\n      p.createCanvas(1, 1);\n      p.stroke(255);\n      p.noLoop();\n      p.noSmooth();\n    };\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Array2DView from './Array2DView';\n\n// Renders a series of 2D arrays as p5 sketches\nconst Array2DViewList = props => {\n  const { imgArrs, cols, scale } = props;\n  return (\n    <Grid container spacing={1} style={props.style}>\n      { imgArrs.map((imgArr, i) => (\n        <Grid item key={i} style={ cols && ((i % cols) === (cols - 1)) ? { breakAfter: 'always' } : {}} >\n          <Array2DView imgArr={imgArr} scale={scale} />\n        </Grid>\n      )) }\n    </Grid>\n  );\n}\n\nArray2DViewList.propTypes = {\n  imgArrs: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))).isRequired,\n  scale: PropTypes.number.isRequired,\n  cols: PropTypes.number,\n};\n\nexport default Array2DViewList;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport Slider from '@material-ui/core/Slider';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nconst KernelTunerControls = memo(function KernelTunerControls(props) {\n  return (\n    <div>\n      <div>\n        <div>Types</div>\n        <ToggleButtonGroup\n          value={props.types}\n          onChange={(event, types) => types.length > 0 ? props.onChange('types', types) : 0}\n          aria-label=\"types of kernels\"\n          style={{ borderRadius: 0, margin: '12px 0' }}\n          className=\"toggle-types\"\n        >\n          { ['l', 'i', 'L', 'T', 'X', 'Y'].map(type => (\n            <ToggleButton\n              key={type}\n              value={type}\n              style={{ borderRadius: 0, height: '28px', width: '28px', textTransform: 'none' }}\n            >\n              { type }\n            </ToggleButton>\n          )) }\n        </ToggleButtonGroup>\n      </div>\n      <div>\n        <div>Angles</div>\n        <Slider\n          defaultValue={props.numComponents}\n          track={false}\n          aria-labelledby=\"number of components\"\n          marks={[1, 2, 3, 4, 5].map(value => ({ value, label: (2 ** value) }))}\n          step={1}\n          min={1}\n          max={5}\n          onChange={(event, value) => props.onChange('numComponents', value)}\n        />\n      </div>\n      <div>\n        <div>Size</div>\n        <Slider\n          defaultValue={props.windowSize}\n          track={false}\n          aria-labelledby=\"window size\"\n          valueLabelDisplay=\"auto\"\n          marks={[3, 5, 7, 9, 11, 13, 15].map(value => ({ value, label: value }))}\n          step={2}\n          min={3}\n          max={15}\n          onChange={(event, value) => props.onChange('windowSize', value)}\n        />\n      </div>\n      <div>\n        <div>Width Factor</div>\n        <Slider\n          defaultValue={props.lambda}\n          track={false}\n          aria-labelledby=\"lambda\"\n          valueLabelDisplay=\"auto\"\n          step={0.1}\n          min={1.1}\n          max={10}\n          onChange={(event, value) => props.onChange('lambda', value)}\n          style={{ padding: '24px 0' }}\n        />\n      </div>\n      <div>\n        <div>Gaussian Spread</div>\n        <Slider\n          defaultValue={props.sigma}\n          track={false}\n          aria-labelledby=\"sigma\"\n          valueLabelDisplay=\"auto\"\n          step={0.1}\n          min={0.1}\n          max={8}\n          onChange={(event, value) => props.onChange('sigma', value)}\n          style={{ padding: '24px 0' }}\n        />\n      </div>\n    </div>\n  );\n});\n\nKernelTunerControls.propTypes = {\n  numComponents: PropTypes.number.isRequired,\n  lambda: PropTypes.number.isRequired,\n  sigma: PropTypes.number.isRequired,\n  windowSize: PropTypes.number.isRequired,\n  types: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nexport default KernelTunerControls;\n","import nj from 'numjs';\n\n// Returns a f(x, y) for 2D cosine wave at angle theta of width inverse lambda from -PI to PI, scaled by pos and neg\nfunction getCosWaveFn(theta, lambda, period=1) {\n  return (x, y) => {\n    const a = (2 * Math.PI / lambda) * ((x * Math.cos(theta)) + (y * Math.sin(theta)));\n    if (a > (Math.PI * period) || a < (-Math.PI * period)) {\n      return null;\n    }\n\n    return Math.cos(a);\n  }\n}\n\n// Returns f(x, y) for a 2D Gaussian with spread sigma\nfunction getGaussianFn(sigma) {\n  return (x, y) => {\n    return Math.exp(-.5 * ((x ** 2 / (sigma ** 2)) + (y ** 2 / (sigma ** 2))));\n  }\n}\n\nfunction getLine(windowSize, theta, lambda, sigma) {\n  const wave = getCosWaveFn(theta, lambda);\n  const gauss = getGaussianFn(sigma);\n  const kernel = nj.zeros([windowSize, windowSize]).assign(-1).tolist();\n  const halfWindowSize = Math.floor(windowSize / 2);\n\n  for (let y = 0; y < windowSize; y += 1) {\n    const yCentered = y - halfWindowSize;\n    for (let x = 0; x < windowSize; x += 1) {\n      const xCentered = x - halfWindowSize;\n      const z = wave(xCentered, yCentered);\n      if (z !== null) {\n        kernel[y][x] = z;\n      }\n\n      kernel[y][x] = kernel[y][x] * gauss(xCentered, yCentered);\n    }\n  }\n\n  return kernel;\n}\n\nfunction getLines(windowSize, numKernels, lambda, sigma) {\n  const rotationDelta = Math.PI / numKernels; // divide 180 degrees in number\n\n  const kernels = [];\n  for (let i = 0; i < numKernels; i += 1) {\n    const theta = i * rotationDelta; // angle of this cos wave\n    const kernel = getLine(windowSize, theta, lambda, sigma);\n\n    kernels.push(kernel);\n  }\n\n  return kernels;\n}\n\nfunction getLineEnd(windowSize, theta, lambda, sigma) {\n  const wave = getCosWaveFn(theta, lambda);\n  const gauss = getGaussianFn(sigma);\n  const kernel = nj.zeros([windowSize, windowSize]).assign(-1).tolist();\n  const halfWindowSize = Math.floor(windowSize / 2);\n\n  for (let y = 0; y < windowSize; y += 1) {\n    const yCentered = y - halfWindowSize;\n    for (let x = 0; x < windowSize; x += 1) {\n      const xCentered = x - halfWindowSize;\n      let z = null;\n      let a = (Math.sin(theta) * xCentered) - (Math.cos(theta) * yCentered); // pos in rotation space\n      if (a < 0.00001) { // rounding error\n        z = wave(xCentered, yCentered);\n      } else if (a < 1.00001) {\n        // special case for after center point\n        z = wave(xCentered, yCentered);\n        z = z > 0 ? (z / 2) : z;\n      }\n      if (z !== null) {\n        kernel[y][x] = z;\n      }\n\n      kernel[y][x] = kernel[y][x] * gauss(xCentered, yCentered);\n    }\n  }\n\n  return kernel;\n}\n\nfunction getLineEnds(windowSize, numKernels, lambda, sigma) {\n  const rotationDelta = 2 * Math.PI / numKernels; // divide 180 degrees in number\n  const kernels = [];\n  for (let i = 0; i < numKernels; i += 1) {\n    const theta = i * rotationDelta; // angle of this cos wave\n    const kernel = getLineEnd(windowSize, theta, lambda, sigma);\n    kernels.push(kernel);\n  }\n\n  return kernels;\n}\n\nfunction getLs(windowSize, angle, numKernels, lambda, sigma) {\n  const rotationDelta = 2 * Math.PI / numKernels; // divide 180 degrees in number\n  const halfWindowSize = Math.floor(windowSize / 2);\n  const kernels = [];\n  for (let i = 0; i < numKernels; i += 1) {\n    const theta = i * rotationDelta; // angle of this cos wave\n    const a = Math.sin(theta + (Math.PI / 2) - (angle / 2));\n    const b = Math.cos(theta + (Math.PI / 2) - (angle / 2));\n\n    // Create two line ends at 90 degrees to each other and merge at diagonal between them\n    const kernelLineEnd0 = getLineEnd(windowSize, theta, lambda, sigma);\n    const kernelLineEnd1 = getLineEnd(windowSize, theta - angle, lambda, sigma);\n    const kernel = nj.zeros([windowSize, windowSize]).tolist();\n\n    for (let y = 0; y < windowSize; y += 1) {\n      const yCentered = y - halfWindowSize;\n      for (let x = 0; x < windowSize; x += 1) {\n        const xCentered = x - halfWindowSize;\n        const c = (a * xCentered) - (b * yCentered); // pos in rotation space\n        if (c < 0.00001) { // rounding error at 0\n          kernel[y][x] = kernelLineEnd0[y][x];\n        } else {\n          kernel[y][x] = kernelLineEnd1[y][x];\n        }\n      }\n    }\n\n    kernels.push(kernel);\n  }\n\n  return kernels;\n}\n\nfunction getTs(windowSize, angle, numKernels, lambda, sigma) {\n  const rotationDelta = 2 * Math.PI / numKernels; // divide 180 degrees in number\n  const halfWindowSize = Math.floor(windowSize / 2);\n  const kernels = [];\n  for (let i = 0; i < numKernels; i += 1) {\n    const theta = i * rotationDelta; // angle of this cos wave\n    const a = Math.sin(theta + (Math.PI / 2));\n    const b = Math.cos(theta + (Math.PI / 2));\n\n    // Create two line ends at 90 degrees to each other and merge at diagonal between them\n    const kernelLine = getLine(windowSize, theta, lambda, sigma);\n    const kernelLineEnd = getLineEnd(windowSize, theta - angle, lambda, sigma);\n    const kernel = nj.zeros([windowSize, windowSize]).tolist();\n    for (let y = 0; y < windowSize; y += 1) {\n      const yCentered = y - halfWindowSize;\n      for (let x = 0; x < windowSize; x += 1) {\n        const xCentered = x - halfWindowSize;\n        const c = (a * xCentered) - (b * yCentered); // pos in rotation space\n        if (c < 0.00001) { // rounding error at 0\n          // use line\n          kernel[y][x] = kernelLine[y][x];\n        } else {\n          // use most extreme towards T line\n          const zMax = Math.max(kernelLine[y][x], kernelLineEnd[y][x]);\n          const zMin = Math.min(kernelLine[y][x], kernelLineEnd[y][x]);\n          kernel[y][x] = zMax > 0 ? zMax : zMin;\n        }\n      }\n    }\n\n    kernels.push(kernel);\n  }\n\n  return kernels;\n}\n\nfunction getXs(windowSize, angle, numKernels, lambda, sigma) {\n  const rotationDelta = (Math.PI / 2) / numKernels; // divide 90 degrees in number\n  const kernels = [];\n  for (let i = 0; i < numKernels; i += 1) {\n    const theta = i * rotationDelta; // angle of this cos wave\n\n    // Create two line ends at 90 degrees to each other and merge at diagonal between them\n    const kernelLine0 = getLine(windowSize, theta, lambda, sigma);\n    const kernelLine1 = getLine(windowSize, theta - angle, lambda, sigma);\n    const kernel = nj.zeros([windowSize, windowSize]).tolist();\n    for (let y = 0; y < windowSize; y += 1) {\n      for (let x = 0; x < windowSize; x += 1) {\n        // use most extreme\n        const zMax = Math.max(kernelLine0[y][x], kernelLine1[y][x]);\n        const zMin = Math.min(kernelLine0[y][x], kernelLine1[y][x]);\n        kernel[y][x] = zMax > 0 ? zMax : zMin;\n      }\n    }\n\n    kernels.push(kernel);\n  }\n\n  return kernels;\n}\n\nfunction getYs(windowSize, angle, numKernels, lambda, sigma) {\n  const rotationDelta = 2 * Math.PI / numKernels; // divide 360 degrees in number\n  const halfWindowSize = Math.floor(windowSize / 2);\n  const kernels = [];\n  for (let i = 0; i < numKernels; i += 1) {\n    const theta = i * rotationDelta; // angle of this cos wave\n\n    // Create line at angle, and two other lines spread from 180 degree from that line by angle\n    const kernelLineEndBase = getLineEnd(windowSize, theta, lambda, sigma);\n    const kernelLineEndBranch0 = getLineEnd(windowSize, theta - Math.PI + angle, lambda, sigma);\n    const kernelLineEndBranch1 = getLineEnd(windowSize, theta - Math.PI - angle, lambda, sigma);\n\n    const a = Math.sin(theta);\n    const b = Math.cos(theta);\n    const kernel = nj.zeros([windowSize, windowSize]).tolist();\n    for (let y = 0; y < windowSize; y += 1) {\n      const yCentered = y - halfWindowSize;\n      for (let x = 0; x < windowSize; x += 1) {\n        const xCentered = x - halfWindowSize;\n        const c = (a * xCentered) - (b * yCentered); // pos in rotation space\n        if (c < -1.00001) { // rounding error at 0\n          // use line\n          kernel[y][x] = kernelLineEndBase[y][x];\n        } else {\n          // use max between all\n          const zMax = Math.max(kernelLineEndBranch0[y][x], kernelLineEndBranch1[y][x], kernelLineEndBase[y][x]);\n          const zMin = Math.min(kernelLineEndBranch0[y][x], kernelLineEndBranch1[y][x], kernelLineEndBase[y][x]);\n          kernel[y][x] = zMax > 0 ? zMax : zMin;\n        }\n      }\n    }\n\n    kernels.push(kernel);\n  }\n\n  return kernels;\n}\n\n// process kernels\nexport function scaleKernel(kernel) {\n  let positiveSum = 0;\n  let positiveMax = 0;\n  let negativeMin = 0;\n  kernel.forEach(row => row.forEach(v => {\n    if (v > 0) {\n      positiveSum += v;\n      if (v > positiveMax) {\n        positiveMax = v;\n      }\n    } else {\n      if (v < negativeMin) {\n        negativeMin = v;\n      }\n    }\n  }));\n\n  let negativeScaleFactor;\n  if (positiveMax === 0 || negativeMin === 0) {\n    negativeScaleFactor = 1;\n  } else {\n    negativeScaleFactor = -negativeMin / (positiveMax / positiveSum);\n  }\n  const positiveScaleFactor = positiveSum;\n\n  kernel = kernel.map(row => row.map(v => {\n    if (v > 0) {\n      // normalize positive weights, such that the total adds up to 1 (ie. max activation is 1 if input max is 1)\n      return v / positiveScaleFactor;\n    } else {\n      // scale negative weights with scale where min is equal negative magnitude of max positive\n      // there may be a lot more negative than positive, but by scaling to match, an equal number\n      // of mismatch pixels will cancel out with positive\n      return v / negativeScaleFactor;\n    }\n  }));\n\n  return kernel;\n}\n\nexport function getKernels(windowSize, numComponents, lambda, sigma, types) {\n  const kernels = [];\n  if (!windowSize || !numComponents) {\n    return kernels;\n  }\n\n  if (types.includes('l')) {\n    kernels.push(...getLines(windowSize, numComponents, lambda, sigma));\n  }\n  if (types.includes('i')) {\n    kernels.push(...getLineEnds(windowSize, numComponents * 2, lambda, sigma));\n  }\n  if (types.includes('L')) {\n    kernels.push(...getLs(windowSize, Math.PI * 0.5, numComponents * 2, lambda, sigma));\n  }\n  if (types.includes('T')) {\n    kernels.push(...getTs(windowSize, Math.PI * 0.5, numComponents * 2, lambda, sigma));\n  }\n  if (types.includes('X')) {\n    kernels.push(...getXs(windowSize, Math.PI * 0.5, numComponents / 2, lambda, sigma));\n  }\n  if (types.includes('Y')) {\n    kernels.push(...getYs(windowSize, Math.PI * 0.25, numComponents * 2, lambda, sigma));\n  }\n\n  // Other potentials\n  // kernels.push(...getLs(windowSize, Math.PI * 0.925, numComponents * 2, lambda, sigma));\n  // kernels.push(...getLs(windowSize, Math.PI * 0.75, numComponents * 2, lambda, sigma));\n  // kernels.push(...getLs(windowSize, Math.PI * 0.25, numComponents * 2, lambda, sigma));\n  // kernels.push(...getTs(windowSize, Math.PI * 0.75, numComponents * 2, lambda, sigma));\n  // kernels.push(...getTs(windowSize, Math.PI * 0.25, numComponents * 2, lambda, sigma));\n  // kernels.push(...getXs(windowSize, Math.PI * 0.25, numComponents, lambda, sigma));\n  // points, small circles, blank, dense intersection, round corners, pinched round corners\n  // look at internal representations in Sketch-A-Net and try to add those\n\n  const scaledKernels = kernels.map(scaleKernel);\n  // console.log(JSON.stringify(scaledKernels.map(k => k.map(r => r.map(v => Number(v.toFixed(5)))))));\n  return scaledKernels;\n}\n","import React, { useCallback, useMemo, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Array2DViewList from '../UI/Array2DViewList';\nimport KernelTunerControls from './KernelTunerControls';\nimport { getKernels } from '../../js/kernel';\n\nfunction KernelTuner(props) {\n  const { defaultKernelSettings, updateKernelSettings } = props;\n  // store the kernel settings as a local state for snappy updates\n  const [ kernelSettings, setKernelSettings ] = useState(defaultKernelSettings);\n  const { numComponents, lambda, sigma, windowSize, types } = kernelSettings;\n\n  const timerRef = useRef(null);\n  const updateKernelSettingsCallback = useCallback((field, value) => {\n    const newKernelSettings = { ...kernelSettings, [field]: value }\n    setKernelSettings(newKernelSettings);\n\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n    }\n    // delay global update to make the kernel tuner UI update smoothly\n    timerRef.current = setTimeout(() => {\n      updateKernelSettings(newKernelSettings);\n    }, 100);\n  }, [ setKernelSettings, kernelSettings, updateKernelSettings ]);\n\n  const kernels = useMemo(() => {\n    return getKernels(windowSize, 2 ** numComponents, lambda, sigma, types);\n  }, [ numComponents, lambda, sigma, windowSize, types ]);\n\n  return (\n    <ExpansionPanel defaultExpanded={true} square={true} style={{ boxShadow: 'none', border: '1px solid #b2b2b2' }}>\n      <ExpansionPanelSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"kerneltuner-content\"\n      >\n        <h3 style={{ margin: '0 10px' }}>Kernel Tuner</h3>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails style={{ margin: '10px 20px' }}>\n        <Grid container justify=\"flex-start\" spacing={4}>\n          <Grid item style={{ marginRight: '20px', width: '200px' }}>\n            <KernelTunerControls\n              numComponents={numComponents}\n              lambda={lambda}\n              sigma={sigma}\n              windowSize={windowSize}\n              types={types}\n              onChange={updateKernelSettingsCallback}\n             />\n          </Grid>\n          <Grid item style={{ width: 'calc(100% - 220px)' }}>\n            <Array2DViewList imgArrs={kernels} scale={4} cols={8} />\n          </Grid>\n        </Grid>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n}\n\nKernelTuner.propTypes = {\n  defaultKernelSettings: PropTypes.object.isRequired,\n  updateKernelSettings: PropTypes.func.isRequired,\n};\n\nexport default KernelTuner;\n","import nj from 'numjs';\nimport * as tf from '@tensorflow/tfjs';\n\nexport const dtype = 'float32';\n\n// A wrapper to simplify the update and retrieval of 2D array slices for convolutions\nexport default class ConvArray {\n  constructor(channels, shape, kernelSize, stride) {\n    // console.log('create ConvArray');\n    // shape of the editable area\n    this._shape = shape;\n    // settings for convolutions that will be applied to this array (necessary for calculating valid slices)\n    this._stride = stride;\n    this._pad = Math.floor(kernelSize / 2);\n    // backing array with extra padding on sides for valid convolution\n    let outerShape;\n    if (this._pad !== 0) {\n      // for conv2d filters with stride===1\n      outerShape = this._shape.map(v => v + (this._pad * 2));\n      this._outerBounds = [ -this._pad, -this._pad, this._shape[1] + this._pad, this._shape[0] + this._pad ];\n    } else {\n      // for maxPool2d filters, need extra padding to width and height to be divisible by pool size\n      outerShape = shape.map(v => Math.ceil(v / this._stride) * this._stride);\n      this._outerBounds = [ 0, 0, outerShape[1], outerShape[0] ];\n    }\n\n    const [ h, w ] = outerShape;\n    this._channels = channels;\n    this._arr = nj.zeros([channels, h, w], dtype);\n\n    // max data\n    this._ids = nj.zeros(this._shape, 'int32').assign(-1, false);\n    this._max = nj.zeros(this._shape, dtype);\n\n    // 4-tuple containing bounds of area that has been changed, coordinates relative to editable area\n    this._dirtyBounds = null;\n  }\n\n  static pool(channels, shape, poolSize) {\n    return new ConvArray(channels, shape, 0, poolSize);\n  }\n\n  static conv(channels, shape, kernelSize, stride=1) {\n    return new ConvArray(channels, shape, kernelSize, stride);\n  }\n\n  /**\n   * Previous layer assigns its calculations to the editable area\n   */\n  assign(arr, channel, bounds) {\n    if (channel === null) {\n      this._slice(bounds).assign(arr, false);\n    } else {\n      this._slice(bounds).slice([channel, channel + 1], null, null).assign(arr, false);\n    }\n    this._updateDirtyBounds(bounds);\n  }\n\n  /**\n   * Clears the dirtyBounds\n   */\n  clean() {\n    this._dirtyBounds = null;\n  }\n\n  /**\n   * Clears the dirtyBounds\n   */\n  calcStats(outputTensor, backend='cpu') {\n    if (this._dirtyBounds) {\n      let _backend;\n      if (backend) {\n        // save original backend for reset\n        _backend = tf.getBackend();\n      }\n\n      const [ minX, minY, maxX, maxY ] = this._dirtyBounds;\n      const h = maxY - minY;\n      const w = maxX - minX;\n\n      const times = [];\n      let ct0 = Date.now();\n      let ct1;\n\n      if (backend) {\n        tf.setBackend(backend);\n      }\n\n      times.push(tf.getBackend());\n      const idsT = outputTensor.argMax(1);\n\n      if (backend) {\n        // reset backend\n        tf.setBackend(_backend);\n      }\n\n      ct1 = Date.now();\n      times.push('argmax -> ');\n      times.push(ct1 - ct0);\n      ct0 = ct1;\n\n      times.push(tf.getBackend());\n      const dsync = idsT.dataSync();\n\n      ct1 = Date.now();\n      times.push('data sync -> ');\n      times.push(ct1 - ct0);\n      ct0 = ct1;\n\n      times.push(tf.getBackend());\n      let idsUpdate = nj['int32'](dsync);\n      idsUpdate = idsUpdate.reshape([ h, w ]);\n      const idsSlice = this._ids.slice([minY, maxY], [minX, maxX]);\n      idsSlice.assign(idsUpdate, false);\n\n      ct1 = Date.now();\n      times.push('update _ids -> ');\n      times.push(ct1 - ct0);\n      ct0 = ct1;\n\n      // gather max\n      times.push(tf.getBackend());\n      const flatOutputTensor = outputTensor.reshape([-1]);\n      const flatIdsTensor = idsT.reshape([-1]);\n      const layerOffsets = tf.mul(flatIdsTensor, tf.scalar(w * h, 'int32'));\n      const withinLayerOffsets = tf.range(0, h * w, 1, 'int32');\n      const idLookups = tf.add(layerOffsets, withinLayerOffsets);\n\n      ct1 = Date.now();\n      times.push('prepare gather -> ');\n      times.push(ct1 - ct0);\n      ct0 = ct1;\n\n      if (backend) {\n        tf.setBackend(backend);\n      }\n\n      times.push(tf.getBackend());\n      const maxT = flatOutputTensor.gather(idLookups);\n\n      if (backend) {\n        // reset backend\n        tf.setBackend(_backend);\n      }\n\n      ct1 = Date.now();\n      times.push('gather -> ');\n      times.push(ct1 - ct0);\n      ct0 = ct1;\n\n      times.push(tf.getBackend());\n      const maxUpdate = nj[dtype](maxT.dataSync()).reshape([ h, w ]);\n      const maxSlice = this._max.slice([minY, maxY], [minX, maxX]);\n      maxSlice.assign(maxUpdate, false);\n\n      ct1 = Date.now();\n      times.push('update _max -> ');\n      times.push(ct1 - ct0);\n      ct0 = ct1;\n\n      console.log('calc stats:', backend, 'total time -> ', times.reduce((a, b) => Number.isInteger(b) ? a + b : a, 0), ...times);\n    }\n  }\n\n  /**\n   * Get the dirty area plus padding so that valid convolutions will happen on any convolution that touches\n   * the dirty pixels.\n   */\n  get dirty() {\n    if (!this._dirtyBounds) {\n      return null;\n    }\n    return this._slice(this.dirtyBounds);\n  }\n\n  /**\n   * Gets the dirty bounds with respect to what the next layer cares about\n   */\n  get dirtyBounds() {\n    if (!this._dirtyBounds) {\n      return null;\n    }\n\n    let bounds = this._dirtyBounds;\n\n    // for conv2d kernels with stride=1\n    if (this._pad !== 0) {\n      // at a minimum, expand the bounds by twice the kernel padding\n      bounds = dilateBounds(this._dirtyBounds, this._pad * 2);\n      // limit to the editable area\n      bounds = limitBounds(bounds, this._outerBounds);\n    }\n\n    // for maxPool2d kernels\n    if (this._stride !== 1) {\n      // match the bounds to the beginning and end of a stride (limited by backing array)\n      bounds = bounds.map(b => b / this._stride);\n      const [ sx, sy, ex, ey ] = bounds;\n      bounds = [ Math.floor(sx), Math.floor(sy), Math.ceil(ex), Math.ceil(ey) ];\n      bounds = bounds.map(b => b * this._stride);\n    }\n\n    return bounds;\n  }\n\n  /**\n   * Return the editable array (not including padding around edges)\n   */\n  get arr() {\n    return this._slice([ 0, 0, this._shape[1], this._shape[0] ]);\n  }\n\n  /**\n   * Slice that allows negative values to represent outside of legal area\n   */\n  _slice(bounds=null) {\n    if (!bounds) {\n      bounds = [ 0, 0, ...this._shape ];\n    }\n    const [ sx, sy, ex, ey ] = bounds;\n    return this._arr.slice(null, [ sy + this._pad, ey + this._pad ], [ sx + this._pad, ex + this._pad ]);\n  }\n\n  /**\n   * Expand the dirty bounds to include the given bounds\n   */\n  _updateDirtyBounds(bounds) {\n    if (!this._dirtyBounds) {\n      this._dirtyBounds = bounds;\n    } else {\n      const [ sx, sy, ex, ey ] = bounds;\n      const [ dsx, dsy, dex, dey ] = this._dirtyBounds;\n      this._dirtyBounds = [ Math.min(sx, dsx), Math.min(sy, dsy), Math.max(ex, dex), Math.max(ey, dey) ];\n    }\n  }\n\n  print() {\n    this.arr.tolist().forEach(c => console.table(c));\n  }\n\n  printBacking() {\n    this._arr.tolist().forEach(c => console.table(c));\n  }\n}\n\n// reduce bounds to be within limits\nexport function limitBounds(bounds, limit) {\n  if (!bounds || !limit) {\n    return bounds;\n  }\n\n  // update with most extreme\n  const [ minX0, minY0, maxX0, maxY0 ] = bounds;\n  const [ minX1, minY1, maxX1, maxY1 ] = limit;\n  const minX = Math.max(minX0, minX1);\n  const minY = Math.max(minY0, minY1);\n  const maxX = Math.min(maxX0, maxX1);\n  const maxY= Math.min(maxY0, maxY1);\n  return [ minX, minY, maxX, maxY ];\n}\n\n// Eat away padding amount from 2D array\nexport function dilateBounds(selection, padding) {\n  if (!selection || selection.length === 0 || !padding) {\n    return selection;\n  }\n  let [ minX, minY, maxX, maxY ] = selection;\n\n  return [ minX - padding, minY - padding, maxX + padding, maxY + padding ];\n}\n","import nj from 'numjs';\nimport * as tf from '@tensorflow/tfjs';\nimport { dtype, dilateBounds } from './convArray';\n\nexport default class ConvLayer {\n  constructor(input, output, filters, kernelSize) {\n    this.input = input;\n    this.output = output;\n    this._kernelSize = kernelSize;\n    this._pad = Math.floor(kernelSize / 2);\n    this._rawFilters = filters;\n    this.filters = filters.map(filter => filter.map(kernel => kernel ? nj[dtype]([kernel]) : null));\n    this._tflayer = getConvLayer(nj[dtype](filters.map(filter => filter.map(kernel => kernel ? kernel : nj.zeros([kernelSize, kernelSize], dtype).tolist()))), kernelSize);\n  }\n\n  runWith(backend) {\n    const dirty = this.input.dirty;\n\n    // tf backend\n    const times = [];\n    let ct0 = Date.now();\n    let ct1;\n\n    const d = dirty.reshape([1, ...dirty.shape]).selection;\n    const input = tf.tensor4d(d.data, d.shape);\n\n    ct1 = Date.now();\n    times.push('to tensor -> ');\n    times.push(ct1 - ct0);\n    ct0 = ct1;\n\n    let _backend;\n    if (backend) {\n      // save original backend for reset\n      _backend = tf.getBackend();\n      tf.setBackend(backend);\n    }\n\n    times.push(tf.getBackend());\n    const output = this._tflayer.apply(input);\n\n    if (backend) {\n      // reset backend\n      tf.setBackend(_backend);\n    }\n\n    ct1 = Date.now();\n    times.push('apply conv -> ');\n    times.push(ct1 - ct0);\n    ct0 = ct1;\n\n    times.push(tf.getBackend());\n    const dsync = output.dataSync();\n\n    ct1 = Date.now();\n    times.push('data sync -> ');\n    times.push(ct1 - ct0);\n    ct0 = ct1;\n\n    times.push(tf.getBackend());\n    const updateArr = nj[dtype](dsync);\n\n    ct1 = Date.now();\n    times.push('to array -> ');\n    times.push(ct1 - ct0);\n    ct0 = ct1;\n\n    console.log('conv stats:', backend, 'total time -> ', times.reduce((a, b) => Number.isInteger(b) ? a + b : a, 0), ...times);\n\n    return { output, updateArr };\n  }\n\n  run() {\n    // updateBounds for this layer will be the dirtyBounds eroded by the padding for convolution\n    const updateBounds = dilateBounds(this.input.dirtyBounds, -this._pad);\n    const [ minX, minY, maxX, maxY ] = updateBounds;\n    const h = maxY - minY;\n    const w = maxX - minX;\n    const size = h * w * this._kernelSize * this._rawFilters.length;\n\n    // the default for calculations is cpu\n    tf.setBackend('cpu');\n\n    // over a certain size, webgl is faster\n    // at small sizes, the penalty for syncing data makes cpu faster\n    const useWebGL = ((h * w) >= (150 * 150)) || size > 8000000;\n\n    let result;\n    const sizeDisplay = `${w} x ${h} x ${this._kernelSize} x ${this._rawFilters.length} = ${size}`;\n    if (useWebGL) {\n      console.log('dirty size x kernel x kernels -> ', sizeDisplay, ' -> electing webgl backend');\n      result = this.runWith('webgl');\n    } else {\n      console.log('dirty size x kernel x kernels -> ', sizeDisplay, ' -> electing cpu backend');\n      result = this.runWith('cpu');\n    }\n    const { output, updateArr } = result;\n\n    const updateShape = [ this.output._channels, h, w ];\n    const update = updateArr.reshape(updateShape);\n    this.output.assign(update, null, updateBounds);\n\n    if (useWebGL) {\n      this.output.calcStats(output, 'webgl');\n    } else {\n      this.output.calcStats(output, 'cpu');\n    }\n\n    this.input.clean();\n  }\n}\n\nfunction getConvLayer(filters, kernelSize) {\n  // data format in: [out, in, h, w]\n  // data format out: [filter_height, filter_width, in_channels, out_channels]\n  // -> filters: A Tensor. Must have the same type as input. A 4-D tensor of shape\n  const numOutputs = filters.shape[0];\n  const weights = filters.transpose(2, 3, 1, 0).tolist();\n  // const biases = nj.zeros([numOutputs]).tolist();\n  // const weightsTensor = [tf.tensor4d(weights), tf.tensor1d(biases)];\n  const weightsTensor = [tf.tensor4d(weights)];\n  const layer = tf.layers.conv2d({\n    filters: numOutputs,\n    kernelSize: kernelSize,\n    strides: 1,\n    padding: 'valid',\n    weights: weightsTensor,\n    activation: 'relu',\n    dataFormat: 'channelsFirst',\n    useBias: false\n  });\n  return layer;\n}\n","import nj from 'numjs';\nimport * as tf from '@tensorflow/tfjs';\nimport { dtype } from './convArray';\n\nexport default class MaxPoolLayer {\n  constructor(input, output, poolSize) {\n    this.input = input;\n    this.output = output;\n    this.poolSize = poolSize;\n    this._tflayer = tf.layers.maxPooling2d({ poolSize, dataFormat: 'channelsFirst' });\n  }\n\n  run() {\n    // for pool layers, the padding is to the edge of each pool, so update bounds are the reduced dirty bounds\n    const dirty = this.input.dirty;\n    const updateBounds = this.input.dirtyBounds.map(b => Math.ceil(b / this.poolSize));\n    const [ minX, minY, maxX, maxY ] = updateBounds;\n    const h = maxY - minY;\n    const w = maxX - minX;\n\n    const size = h * w;\n    const sizeThreshold = 3000;\n    if (size > sizeThreshold) {\n      tf.setBackend('webgl');\n      console.log('opting to use webgl');\n    } else {\n      tf.setBackend('cpu');\n    }\n\n    // tf backend\n    const d = dirty.reshape([1, ...dirty.shape]).selection;\n    const input = tf.tensor4d(d.data, d.shape);\n    const output = this._tflayer.apply(input);\n    const updateShape = [ this.output._channels, h, w ];\n    const update = nj[dtype](output.dataSync()).reshape(updateShape);\n\n    tf.setBackend('cpu');\n\n    this.output.assign(update, null, updateBounds);\n\n    if (size > sizeThreshold) {\n      this.output.calcStats(output, 'webgl');\n    } else {\n      this.output.calcStats(output, 'cpu');\n    }\n\n    this.input.clean();\n  }\n}\n","import ConvArray from './convArray';\nimport ConvLayer from './convLayer';\nimport MaxPoolLayer from './maxPoolLayer';\n\nexport default class Network {\n  constructor(inputShape, layerInfos) {\n    this.layerInfos = layerInfos;\n\n    // setup input and output data reps\n    this.arrs = []; // should be length = layers.length + 1\n    let channels = 1;\n    let shape = inputShape;\n    for (const layerInfo of layerInfos) {\n      let arr;\n      if (layerInfo.type === 'conv2d') {\n        arr = ConvArray.conv(channels, shape, layerInfo.kernelSize);\n        // next layer will have the channels created by this layer\n        channels = layerInfo.filters.length;\n        // we only allow a stride of 1 on convs for now\n        // shape = ?\n      } else if (layerInfo.type === 'maxPool2d') {\n        arr = ConvArray.pool(channels, shape, layerInfo.poolSize);\n        // pool layers only affect shape of layers in hyper column\n        shape = shape.map(v => Math.ceil(v / layerInfo.poolSize));\n      }\n      this.arrs.push(arr);\n    }\n    // add a final arr for the output\n    this.arrs.push(ConvArray.conv(channels, shape, 0));\n\n    // setup layers\n    this.layers = [];\n    for (const [i, layerInfo] of layerInfos.entries()) {\n      const input = this.arrs[i];\n      const output = this.arrs[i + 1];\n      let layer;\n      if (layerInfo.type === 'conv2d') {\n        layer = new ConvLayer(input, output, layerInfo.filters, layerInfo.kernelSize);\n      } else if (layerInfo.type === 'maxPool2d') {\n        layer = new MaxPoolLayer(input, output, layerInfo.poolSize);\n      }\n      this.layers.push(layer);\n    }\n\n    // prune first layer kernels with no connection going forward?\n  }\n\n  /**\n   * Given a change to the input layer, update all\n   */\n  run(dirty, dirtyBounds) {\n    // update first layer\n    this.arrs[0].assign(dirty, 0, dirtyBounds);\n\n    // propogate through network by running layers\n    const t00 = Date.now();\n    for (const [i, layer] of this.layers.entries()) {\n      const t0 = Date.now();\n      layer.run();\n      const t1 = Date.now();\n      console.log('time for layer ' + i, t1 - t0);\n    }\n    const t01 = Date.now();\n    console.log('total network time', t01 - t00);\n\n    // mark last layer clean (or it will accumlate dirty!)\n    this.arrs[this.arrs.length - 1].clean();\n  }\n\n  getOutput(i) {\n    const { arr: acts, _max: max, _ids: ids } = this.arrs[i + 1];\n    return { acts, max, ids };\n  }\n}\n","import nj from 'numjs';\nimport { dtype } from './conv/convArray';\nimport Network from './conv/network';\nimport p5 from 'p5';\n\nfunction limit(v, min, max) {\n  return v < min ? min : (v >= max ? max - 0.001 : v);\n}\n\nfunction safePt(pt, bounds) {\n  const [ minX, minY, maxX, maxY ] = bounds;\n  const x = limit(pt.x, minX, maxX);\n  const y = limit(pt.y, minY, maxY);\n  return new p5.Vector(x, y);\n}\n\nexport default class SmartCanvas {\n  constructor(p, shape, layerInfos) {\n    // assumes p is blank\n    this.p = p;\n    this.shape = shape;\n    this.layerInfos = layerInfos;\n    this.network = new Network(this.shape, layerInfos);\n    this._dirtyBounds = null;\n    this._backup = null;\n    this._listeners = [];\n  }\n\n  // do full calc once p5 is ready\n  init() {\n    if (!this.p._setupDone) {\n      setTimeout(() => this.init(), 10);\n    } else {\n      this.forceFullUpdate();\n    }\n  }\n\n  reset() {\n    this.p.clear();\n    this._dirtyBounds = this.bounds;\n    this.update();\n  }\n\n  get bounds() {\n    const [ maxY, maxX ] = this.shape;\n    return [ 0, 0, maxX, maxY ];\n  }\n\n  /**\n   * Draw a new line segment and update the dirtyBounds for this SmartCanvas\n   * @param {{x: number, y: number}} start - Start point of line segment\n   * @param {{x: number, y: number}} end - End point of line segment\n   * @param {boolean} makeBackup - If true, store the affected canvas area in the backup cache before change is applied.\n   */\n  addSegment(start, end, makeBackup=false) {\n    // sanitize\n    start = safePt(start, this.bounds);\n    end = safePt(end, this.bounds);\n\n    const bounds = this._getLineBounds(start, end);\n    if (makeBackup) {\n      if (this._backup !== null) {\n        console.log('Overwriting existing backup! Should call restore() first');\n      }\n      this._backup = {\n        img: this.p.get(...bounds),\n        bounds\n      };\n    }\n\n    this.p.line(start.x, start.y, end.x, end.y);\n    this._updateDirtyBounds(bounds);\n  }\n\n  /**\n   * Restore the image are from the backup cache to what it was previously and update dirty bounds to include\n   */\n  restore() {\n    if (this._backup !== null) {\n      const { img, bounds } = this._backup;\n      const [ x, y ] = bounds.slice(0, 2);\n      this.p.image(img, x, y);\n      this._backup = null;\n      this._updateDirtyBounds(bounds);\n    } else {\n      console.log('Backup failed, no backup cache available');\n    }\n  }\n\n  /**\n   * Recalculate the network activations within the current dirty bounds and reset dirty bounds to null\n   */\n  update() {\n    if (this._dirtyBounds) {\n      // get dirty area\n      const [ sx, sy, ex, ey ] = this._dirtyBounds;\n      const g = this.p.get(sx, sy, ex - sx, ey - sy);\n      g.loadPixels();\n      const dirty = nj[dtype](g.pixels).reshape(g.height, g.width, 4).slice(null, null, [3, 4]).reshape(1, g.height, g.width);\n      this.network.run(dirty, this._dirtyBounds);\n      this._notifyListeners({ network: this.network, dirtyBounds: [...this._dirtyBounds] });\n      this._dirtyBounds = null; // reset dirty bounds\n    }\n  }\n\n  forceFullUpdate() {\n    this._dirtyBounds = this.bounds;\n    this.update();\n  }\n\n  /**\n   * Expand the dirty bounds to include the given bounds\n   */\n  _updateDirtyBounds(bounds) {\n    if (!this._dirtyBounds) {\n      this._dirtyBounds = bounds;\n    } else {\n      const [ sx, sy, ex, ey ] = bounds;\n      const [ dsx, dsy, dex, dey ] = this._dirtyBounds;\n      this._dirtyBounds = [ Math.min(sx, dsx), Math.min(sy, dsy), Math.max(ex, dex), Math.max(ey, dey) ];\n    }\n  }\n\n  _getLineBounds(start, end) {\n    const pad = 1; // stroke weight is 2 right now, so pad by 1\n    let minX = Math.min(start.x, end.x) - pad;\n    let minY = Math.min(start.y, end.y) - pad;\n    let maxX = Math.max(start.x, end.x) + pad + 1;\n    let maxY = Math.max(start.y, end.y) + pad + 1;\n    const bounds = [ minX, minY, maxX, maxY ].map(v => Math.floor(v));\n    return bounds;\n  }\n\n  addListener(fn) {\n    this._listeners.push(fn);\n  }\n\n  removeListener(fn) {\n    const i = this._listeners.indexOf(fn);\n    if (i > -1) {\n      this._listeners.splice(i, 1);\n    }\n  }\n\n  _notifyListeners(...params) {\n    for (let fn of this._listeners) {\n      if (fn) {\n        fn(...params);\n      }\n    }\n  }\n}\n","import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport SmartCanvas from '../../js/smartCanvas';\nimport p5 from 'p5';\nimport { getSketch } from '../../js/sketches/drawingInputSketch';\n\nfunction KernelInspectorDrawingInput(props) {\n  const { shape, kernels, onUpdate } = props;\n  const imgRef = useRef(null);\n  const pRef = useRef(null);\n  const smartCanvasRef = useRef(null);\n\n  useEffect(() => {\n    if (!pRef.current) {\n      // currently doesn't support updating sketch\n      pRef.current = new p5(getSketch(shape, smartCanvasRef), imgRef.current);\n    }\n  });\n\n  useEffect(() => {\n    // only updates to kernels should actually retrigger this\n    const layerInfos = [\n      {\n        filters: kernels.map(k => [k]),\n        kernelSize: kernels[0].length,\n        type: 'conv2d'\n      }\n    ];\n    smartCanvasRef.current = new SmartCanvas(pRef.current, shape, layerInfos);\n    smartCanvasRef.current.addListener(onUpdate);\n    smartCanvasRef.current.init();\n  }, [ kernels, shape, onUpdate ]);\n\n  return (\n    <div ref={imgRef}></div>\n  );\n}\n\nKernelInspectorDrawingInput.propTypes = {\n  kernels: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))).isRequired,\n  shape: PropTypes.arrayOf(PropTypes.number).isRequired,\n  onUpdate: PropTypes.func,\n};\n\nexport default KernelInspectorDrawingInput;\n","/**\n * return the p5 sketch for the SmartCanvas\n */\nexport function getSketch(shape, smartCanvasRef) {\n  let dirty = false;\n  return (p) => {\n    p.setup = () => {\n      p.pixelDensity(1);\n      const [ w, h ] = shape;\n      p.createCanvas(w, h);\n      p.strokeWeight(2);\n    };\n\n    p.draw = () => {\n      if (p.mouseIsPressed) {\n        // while mouse is pressed, add line segments to canvas\n        const start = { x: p.pmouseX, y: p.pmouseY };\n        const end = { x: p.mouseX, y: p.mouseY };\n        if (!(start.x < 0 || start.y < 0 || end.x < 0 || end.y < 0 || end.x >= p.width || start.x >= p.width || end.y >= p.height || start.y >= p.height)) {\n          smartCanvasRef.current.addSegment(start, end);\n          dirty = true;\n        }\n      } else {\n        // at end of mouse press, update LineInfo\n        if (dirty) {\n          smartCanvasRef.current.update();\n          dirty = false;\n        }\n      }\n    };\n  };\n}\n","import nj from 'numjs';\n\n// some good contrast colors to start\nconst colors = ['#e6194b', '#3cb44b', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075'];\n// save colors so that they are consistent between renders\nconst colorMap = {};\n\n/**\n * Returns a p5 sketch that can draw a 2D array\n */\nexport function getSketch(kernels) {\n  // spacing between rectangles\n  const gridWeight = 0.08;\n  let ids = null;\n  let max = null;\n  let scale = 1;\n  let needsRefresh = false;\n\n  return (p) => {\n    p.setData = (_ids, _max, _scale=1) => {\n      // save the data for rendering in draw loop\n      ids = _ids;\n      // normalize max 2d array\n      let maxMax = Math.max(..._max.flat());\n      max = _max.map(row => row.map(v => v / maxMax));\n      scale = _scale;\n      needsRefresh = true;\n    }\n\n    p.setKernels = kernels => {\n      // create images based on kernels so we dont have to recalculate\n      p._kernelCache = [];\n      for (const kernel of kernels) {\n        const icon = p._getIcon(kernel);\n        p._kernelCache.push(icon);\n      }\n    }\n\n    p.setup = () => {\n      p.pixelDensity(1);\n      p.createCanvas(300, 300);\n      p.stroke(255);\n    };\n\n    p.draw = () => {\n      if (ids && max) {\n        // check if we need to resize\n        const h = ids.length * scale;\n        const w = ids[0].length * scale;\n        if (h !== p.height || w !== p.width) {\n          p.resizeCanvas(w, h);\n        }\n\n        // check if mouse is in canvas (with padding of zoomWindow)\n        const x = Math.floor(p.mouseX / scale);\n        const y = Math.floor(p.mouseY / scale);\n        const zoomWindow = 4;\n        const zoomScale = scale * 8;\n        if (x > zoomWindow && y > zoomWindow && x < (w / scale) - zoomWindow && y < (h / scale) - zoomWindow) {\n          // if so, we need to redraw with overlay\n          p.clear();\n          p._drawBackground(ids, max, scale);\n\n          // get zoomed in version\n          const bounds = [\n            Math.max(0, x - zoomWindow),\n            Math.max(0, y - zoomWindow),\n            Math.min(w / scale, x + zoomWindow + 1),\n            Math.min(h / scale, y + zoomWindow + 1)\n          ];\n          const [ x0, y0, x1, y1 ] = bounds;\n          const slice_ids = nj.array(ids).slice([y0, y1], [x0, x1]).tolist();\n          const slice_max = nj.array(max).slice([y0, y1], [x0, x1]).tolist();\n\n          // draw zoomed in version as overlay\n          p.push();\n          p.translate((x * scale) - ((zoomWindow + 0.5) * zoomScale), (y * scale) - ((zoomWindow + 0.5) * zoomScale));\n          // blank out background\n          p.push();\n          p.fill(255);\n          p.noStroke();\n          p.rect(0, 0, slice_ids[0].length * zoomScale, slice_ids.length * zoomScale);\n          p.pop();\n          // draw zoom\n          p._drawIconArray(slice_ids, slice_max, zoomScale);\n          // draw outline\n          p.push();\n          p.noFill();\n          p.strokeWeight(1);\n          p.stroke('#b2b2b2');\n          p.rect(0, 0, slice_ids[0].length * zoomScale, slice_ids.length * zoomScale);\n          p.pop();\n          // outline the center of the zoom\n          p.push();\n          p.noFill();\n          p.stroke('#b2b2b2');\n          p.strokeWeight(1);\n          p.rect(zoomWindow * zoomScale, zoomWindow * zoomScale, zoomScale, zoomScale);\n          p.pop();\n          p.pop();\n\n          needsRefresh = true;\n        } else {\n          // Only redraw once when zoom leaves, because then it is static\n          if (needsRefresh) {\n            p.clear();\n            p._drawBackground(ids, max, scale);\n            needsRefresh = false;\n          }\n        }\n      }\n    };\n\n    p.mouseClicked = () => {\n      if (ids && scale) {\n        const x = Math.floor(p.mouseX / scale);\n        const y = Math.floor(p.mouseY / scale);\n        if (x > 0 && y > 0 && x < ids.length && y < ids[0].length) {\n          if (p._onSelect) {\n            p._onSelect({ x, y });\n          }\n          p._pt = { x, y };\n        }\n      }\n    };\n\n    p._drawBackground = (ids, max, scale=1) => {\n      p.strokeWeight(scale * gridWeight);\n      for (let y = 0; y < ids.length; y += 1) {\n        for (let x = 0; x < ids[0].length; x += 1) {\n          // for performance reasons only draw ones that are dark enough\n          if (max[y][x] >= 0.1) {\n            let key = ids[y][x];\n            if (key >= 0) {\n              let c = p._getColor(key);\n              c.setAlpha(max[y][x] * 255);\n              p.fill(c);\n              p.rect(x * scale, y * scale, scale, scale);\n            }\n          }\n        }\n      }\n\n      if (p._pt) {\n        p.push();\n        p.scale(scale);\n        p.fill(0);\n        const { x, y } = p._pt;\n        const zoomScale = 6 / scale;\n        p.translate(0.5, 1);\n        p.triangle(x, y, x + (zoomScale * 0.75), y + (zoomScale * 2), x - (zoomScale * 0.75), y + (zoomScale * 2));\n        p.pop();\n      }\n    };\n\n    p._drawIconArray = (ids, max, scale=1) => {\n      for (let y = 0; y < ids.length; y += 1) {\n        for (let x = 0; x < ids[0].length; x += 1) {\n          let intensity = max[y][x];\n          if (intensity > 0.1) {\n            let key = ids[y][x];\n            if (key >= 0) {\n              const kernel = p._kernelCache[key];\n              p.push();\n              p.tint(255, intensity * 255);\n              p.image(kernel, x * scale, y * scale, scale, scale);\n              p.pop();\n            }\n          }\n        }\n      }\n    };\n\n    p._getColor = i => {\n      let c = colorMap[i];\n      if (!c) {\n        if (colors[i]) {\n          c = p.color(colors[i]);\n        } else {\n          c = p.color([ Math.random() * 155, Math.random() * 155, Math.random() * 155 ]);\n        }\n        colorMap[i] = c;\n      }\n      return c;\n    };\n\n    p._getIcon = imgArr => {\n      const kernelSize = imgArr.length;\n      const g = p.createGraphics(kernelSize, kernelSize);\n      // normalize\n      let max = Math.max(...imgArr.flat());\n      imgArr = imgArr.map(row => row.map(v => v / max));\n\n      g.loadPixels();\n      for (let y = 0; y < imgArr.length; y += 1) {\n        for (let x = 0; x < imgArr[0].length; x += 1) {\n          const v = imgArr[y][x] * 255;\n          if (v > 0) {\n            g.set(x, y, p.color(0, 0, 0, v));\n          } else if (v < 0) {\n            g.set(x, y, p.color(214, 30, 30, -v * 0.75));\n          }\n        }\n      }\n      g.updatePixels();\n      return g.get();\n    };\n  };\n}\n","import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport p5 from 'p5';\nimport { getSketch } from '../../js/sketches/colorCodedMapSketch';\n\nconst KernelInspectorColorCodedMap = props => {\n  const { kernels, pt, ids, max, scale, onSelect } = props;\n  const imgRef = useRef(null);\n  const pRef = useRef(null);\n\n  useEffect(() => {\n    if (imgRef.current) {\n      imgRef.current.innerHTML = '';\n      pRef.current = new p5(getSketch(), imgRef.current);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (pRef.current) {\n      pRef.current.setKernels(kernels);\n    }\n  }, [ kernels ]);\n\n  useEffect(() => {\n    if (pRef.current) {\n      pRef.current._pt = pt;\n    }\n  }, [ pt ]);\n\n  useEffect(() => {\n    if (pRef.current && ids && max) {\n      pRef.current.setData(ids, max, scale);\n    }\n  }, [ ids, max, scale ]);\n\n  useEffect(() => {\n    if (pRef.current) {\n      pRef.current._onSelect = onSelect;\n    }\n  }, [ onSelect ]);\n\n  return (\n    <div ref={imgRef}></div>\n  );\n};\n\nKernelInspectorColorCodedMap.propTypes = {\n  ids: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  max: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  kernels: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n  scale: PropTypes.number,\n  pt: PropTypes.object,\n  onSelect: PropTypes.func,\n};\n\nexport default KernelInspectorColorCodedMap;\n","import * as d3 from 'd3';\n\n// render the kernels using d3 on top of the x bars\nfunction renderKernelsOnBars(el, x, kernels) {\n  // flatten kernels into a data set with each individual weight as an entry\n  const flatKernelData = [];\n  kernels.forEach((kernel, i) => {\n    // normalize\n    let max = Math.max(...kernel.map(row => Math.max(...row.map(v => Math.abs(v)))));\n    kernel.forEach((row, rIndex) => row.forEach((v, colIndex) => {\n      flatKernelData.push({ kIndex: i, row: rIndex, col: colIndex, v: v / max });\n    }));\n  });\n\n  // render flat kernel data\n  const weightPixels = el.append('g').selectAll('.pixel').data(flatKernelData).enter();\n  const pixelSize = x.bandwidth() / kernels[0].length;\n  weightPixels.append('rect')\n    .attr('fill', d => {\n      if (d.v >= 0) {\n        return 'rgba(0, 0, 0, ' + (d.v) + ')';\n      } else {\n        return 'rgba(214, 30, 30, ' + (-d.v * 0.75) + ')';\n      }\n    })\n    .attr('x', d => x(d.kIndex) + (pixelSize * d.col))\n    .attr('y', d => (pixelSize * d.row))\n    .attr('height', pixelSize)\n    .attr('width', pixelSize);\n\n  // render outlines of kernels\n  const kernelOutlines = el.append('g').selectAll('.outline').data(kernels).enter();\n  kernelOutlines.append('rect')\n    .attr('x', (d, i) => x(i))\n    .attr('y', 0)\n    .attr('height', x.bandwidth())\n    .attr('width', x.bandwidth())\n    .style(\"stroke\", '#b2b2b2')\n    .style(\"fill\", \"none\")\n    .style(\"stroke-width\", 1);\n}\n\n// render bar chart of activations with the kernel icon on top of each bar\nexport function renderChart(el, kernels, acts) {\n  // format data for d3\n  const data = acts.map((act, i) => ({ name: i, value: act / 255 }));\n\n  // setup styles\n  const margin = {top: 4, right: 4, bottom: 4, left: 4};\n  const width = el.offsetWidth - margin.left - margin.right;\n  const height = width * 0.5;\n\n  // setup bands\n  const x = d3.scaleBand()\n    .domain(data.map(d => d.name))\n    .range([margin.left, width - margin.right])\n    .padding(0.1);\n  const y = d3.scaleLinear()\n    .domain([0, 1])\n    .range([height - margin.bottom, margin.top + x.bandwidth()]);\n\n  // create parent el\n  const svg = d3.select(el).append('svg')\n    .attr('width', width)\n    .attr('height', height);\n\n  // draw bars\n  const bars = svg.append('g').selectAll('.bar').data(data).enter();\n  bars.append('rect')\n      .attr('fill', '#e0e0e0')\n      .attr('stroke', '#b2b2b2')\n      .style('stroke-width', 1)\n      .attr('x', d => x(d.name))\n      .attr('y', d => y(d.value ? d.value : 0))\n      .attr('height', d => y(0) - y(d.value ? d.value : 0))\n      .attr('width', x.bandwidth())\n  bars.exit().remove();\n  renderKernelsOnBars(svg, x, kernels);\n\n  // draw x axis ticks\n  const xAxis = g => g\n    .attr('transform', `translate(0,${height - margin.bottom})`)\n    .attr('color', '#b2b2b2')\n    .call(d3.axisBottom(x).tickSize(0));\n  svg.append('g')\n    .style('font-size', '0')\n    .call(xAxis);\n\n  // // draw y axis percent labels\n  // const yAxis = g => g\n  //   .attr('transform', `translate(${margin.left},0)`)\n  //   .call(d3.axisLeft(y).tickFormat(d3.format('.0%')))\n  //   .call(g => g.select('.domain').remove());\n  // svg.append('g')\n  //   .style('font-size', '10px')\n  //   .call(yAxis);\n\n  return svg.node();\n}\n","import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { renderChart } from '../../js/charts/activationChart';\n\nconst KernelInspectorActivationChart = props => {\n  const chartRef = useRef(null);\n\n  const { kernels, acts } = props;\n  useEffect(() => {\n    // clear the previous chart\n    chartRef.current.innerHTML = '';\n    if (kernels && acts) {\n      renderChart(chartRef.current, kernels, acts);\n    }\n  }, [ kernels, acts ]);\n\n  return (\n    <div ref={chartRef} style={{ width: '400px' }}></div>\n  );\n};\n\nKernelInspectorActivationChart.propTypes = {\n  kernels: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))).isRequired,\n  acts: PropTypes.arrayOf(PropTypes.number),\n};\n\nexport default KernelInspectorActivationChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Array2DViewList from '../UI/Array2DViewList';\n\n// Renders two lists of 2D arrays as p5 sketches with one overlaid and transparent\nconst Array2DViewOverlayList = props => {\n  const { imgArrs, imgArrsOverlay, scale, overlayOpacity } = props;\n  return (\n    <div style={{ position: 'relative' }}>\n      <Array2DViewList\n        imgArrs={imgArrs}\n        scale={scale}\n      />\n      <Array2DViewList\n        imgArrs={imgArrsOverlay}\n        scale={scale}\n        style={{ position: 'absolute', top: '4px', opacity: overlayOpacity || 0.75 }}\n      />\n    </div>\n  );\n}\n\nArray2DViewOverlayList.propTypes = {\n  imgArrs: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n  imgArrsOverlay: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n  scale: PropTypes.number,\n  overlayOpacity: PropTypes.number,\n};\n\nexport default Array2DViewOverlayList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport KernelInspectorActivationChart from './KernelInspectorActivationChart';\nimport Array2DViewOverlayList from '../UI/Array2DViewOverlayList';\nimport nj from 'numjs';\n\n// get indices of kernels with top activations\nfunction selectTopIndices(acts, count) {\n  return acts.map((s, i) => [i, s]).sort((a, b) => (a[1] > b[1]) ? -1 : 1).slice(0, count).map(d => d[0]);\n}\n\nfunction getImgArrAtPt(imgArr, pt, pad) {\n  const { x, y } = pt;\n  const bounds = [ x - pad, y - pad, x + pad + 1, y + pad + 1 ];\n  const [ x0, y0, x1, y1 ] = bounds;\n  if (x0 < 0 || y0 < 0 || x1 >= imgArr[0].length || y1 >= imgArr.length) {\n    return null;\n  }\n  const imgArrSlice = nj.array(imgArr).slice([y0, y1], [x0, x1]).tolist();\n  return imgArrSlice;\n}\n\nconst KernelInspectorViewOutputAtPoint = props => {\n  let { acts, kernels, count, imgArr, pt } = props;\n\n  if (!acts || !pt || !kernels || kernels.length !== acts.length) {\n    return null;\n  }\n\n  // select the activations and img data at the selected pt\n  const { x, y } = pt;\n  let actsAtPt = acts.map(channel => channel[y][x]);\n  const pad = (kernels[0].length - 1) / 2;\n  const imgArrAtPt = getImgArrAtPt(imgArr, pt, pad);\n\n  // get the indices of the top activations at the given pt\n  const top = selectTopIndices(actsAtPt, count);\n\n  // map the top indices to the corresponding activations and kernels\n  kernels = top.map(i => kernels[i]);\n  actsAtPt = top.map(i => actsAtPt[i]);\n\n  const ptDisplay = `(${pt.x}, ${pt.y})`;\n\n  return (\n    <Grid container spacing={4} justify=\"center\" style={props.style}>\n      <Grid item>\n        <div>\n          <KernelInspectorActivationChart kernels={kernels} acts={actsAtPt} />\n          <div style={{ margin: '5px 0 25px 0', textAlign: 'center' }}>\n            <b>Top activations for pixel {ptDisplay}</b>\n          </div>\n        </div>\n        { imgArrAtPt &&\n          <div>\n            <Array2DViewOverlayList\n              imgArrs={new Array(kernels.length).fill(imgArrAtPt)}\n              imgArrsOverlay={kernels}\n              scale={6}\n              overlayOpacity={0.8}\n            />\n            <div style={{ margin: '10px 0', textAlign: 'center' }}>\n              <b>Kernel overlays for pixel {ptDisplay}</b>\n            </div>\n          </div>\n        }\n      </Grid>\n    </Grid>\n  );\n};\n\nKernelInspectorViewOutputAtPoint.propTypes = {\n  acts: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n  kernels: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))),\n  imgArr: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  pt: PropTypes.object,\n  count: PropTypes.number.isRequired,\n};\n\nexport default KernelInspectorViewOutputAtPoint;\n","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport KernelInspectorColorCodedMap from './KernelInspectorColorCodedMap';\nimport KernelInspectorViewOutputAtPoint from './KernelInspectorViewOutputAtPoint';\n\nfunction KernelInspectorViewOutput(props) {\n  const { data, kernels, defaultPt } = props;\n  // store selected point on color-coded map\n  const [ pt, setPt ] = useState(defaultPt);\n\n  // format data coming from network on updates\n  const { imgArr, acts, max, ids } = useMemo(() => {\n    if (data && data.network) {\n      const { acts: imgArr } = data.network.getOutput(-1); // get input\n      const { acts, max, ids } = data.network.getOutput(0); // get output\n      // unwrap ndarrays into arrays\n      return { imgArr: imgArr.tolist()[0], acts: acts.tolist(), max: max.tolist(), ids: ids.tolist() };\n    }\n    return {};\n  }, [ data ]);\n\n  return (\n    <Grid container spacing={4} justify=\"center\" style={props.style}>\n      <Grid item>\n        <div>\n          <KernelInspectorColorCodedMap\n            kernels={kernels}\n            max={max}\n            ids={ids}\n            scale={2.5}\n            onSelect={setPt}\n            pt={pt}\n          />\n          <div style={{ textAlign: 'center' }}>\n            <div style={{ marginTop: '10px' }}><b>A color-coded map of maximum activation</b></div>\n            <div style={{ marginTop: '10px' }}>Select a pixel to inspect</div>\n          </div>\n        </div>\n      </Grid>\n      <Grid item>\n        <KernelInspectorViewOutputAtPoint\n          kernels={kernels}\n          imgArr={imgArr}\n          acts={acts}\n          pt={pt}\n          count={Math.min(8, kernels.length)}\n          style={{ width: '400px' }}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n\nKernelInspectorViewOutput.propTypes = {\n  data: PropTypes.object.isRequired,\n  kernels: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))).isRequired,\n  defaultPt: PropTypes.object.isRequired,\n};\n\nexport default KernelInspectorViewOutput;\n","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport KernelInspectorDrawingInput from './KernelInspectorDrawingInput';\nimport KernelInspectorViewOutput from './KernelInspectorViewOutput';\nimport { getKernels } from '../../js/kernel';\n\n// shape of the drawing area\nconst shape = [ 150, 150 ];\nconst defaultPt = { x: Math.floor(shape[0] / 2) - 1, y: Math.floor(shape[1] / 2) - 1 }\n\nfunction KernelInspector(props) {\n  // store up-to-date data from network, use this object to trigger updates\n  const [ data, setData ] = useState(null);\n\n  // get the kernels\n  const { numComponents, lambda, sigma, windowSize, types } = props.kernelSettings;\n  const kernels = useMemo(() => {\n    return getKernels(windowSize, 2 ** numComponents, lambda, sigma, types);\n  }, [ numComponents, lambda, sigma, windowSize, types ]);\n\n  return (\n    <div style={props.style}>\n      <h3>Kernel Inspector</h3>\n      <Grid container spacing={4} justify=\"center\">\n        <Grid item>\n          <KernelInspectorDrawingInput\n            kernels={kernels}\n            shape={shape}\n            onUpdate={setData}\n          />\n          <div style={{ marginTop: '10px', textAlign: 'center' }}>Make a test drawing</div>\n        </Grid>\n        <Grid item>\n          { data && <KernelInspectorViewOutput kernels={kernels} data={data} defaultPt={defaultPt} /> }\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nKernelInspector.propTypes = {\n  kernelSettings: PropTypes.object.isRequired,\n};\n\nexport default KernelInspector;\n","import React, { useState, useEffect } from 'react';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport grey from '@material-ui/core/colors/grey';\nimport KernelTuner from '../KernelTuner/KernelTuner';\nimport KernelInspector from '../KernelInspector/KernelInspector';\nimport Container from '@material-ui/core/Container';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: grey,\n  },\n});\n\n// Default kernel settings on first page load\nconst defaultKernelSettings = {\n  numComponents: 2, // actual num is 2^numComponents\n  lambda: 4.9,\n  sigma: 3.3,\n  windowSize: 9,\n  types: ['l', 'L', 'T', 'X'] // 'l', 'i', 'L', 'T', 'X', 'Y'\n};\n// Check the saved kernel settings have not been corrupted somehow\nfunction areValidKernelSettings(kernelSettings) {\n  if (!kernelSettings) {\n    return false;\n  }\n  const { numComponents, lambda, sigma, windowSize, types } = kernelSettings;\n  if (isNaN(numComponents) || isNaN(lambda) || isNaN(sigma) || isNaN(windowSize) || !Array.isArray(types) || types.length === 0) {\n    return false;\n  }\n  return true;\n}\nconst storageKey = 'kernelSettings';\nconst storedSettings = JSON.parse(localStorage.getItem(storageKey));\nconst initialKernelSettings = areValidKernelSettings(storedSettings) ? storedSettings : defaultKernelSettings;\n\nexport default function App() {\n  const [ kernelSettings, updateKernelSettings ] = useState(initialKernelSettings);\n\n  // save kernel settings on change\n  useEffect(() => {\n    localStorage.setItem(storageKey, JSON.stringify(kernelSettings));\n  }, [ kernelSettings ]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container maxWidth=\"md\">\n        <KernelTuner defaultKernelSettings={kernelSettings} updateKernelSettings={updateKernelSettings} />\n      </Container>\n      <Container maxWidth=\"lg\" style={{ marginTop: '40px' }}>\n        <KernelInspector kernelSettings={kernelSettings} />\n      </Container>\n    </ThemeProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/Page/App';\n\nReactDOM.render(\n  (<App />),\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}